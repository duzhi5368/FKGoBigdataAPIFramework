/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package Hbase

import (
	"fmt"
	"math"
	"thrift"
)

// This is a temporary safety measure to ensure that the `math'
// import does not trip up any generated output that may not
// happen to use the math import due to not having emited enums.
//
// Future clean-ups will deprecate the need for this.
func init() {
	var temporaryAndUnused int32 = math.MinInt32
	temporaryAndUnused++
}

type Text []byte

type Bytes []byte

type ScannerID int32

/**
 * TCell - Used to transport a cell value (byte[]) and the timestamp it was
 * stored with together as a result for get and getRow methods. This promotes
 * the timestamp of a cell to a first-class value, making it easy to take
 * note of temporal data. Cell is used all the way from HStore up to HTable.
 * 
 * Attributes:
 *  - Value
 *  - Timestamp
 */
type TCell struct {
	thrift.TStruct
	Value     Bytes "value"     // 1
	Timestamp int64 "timestamp" // 2
}

func NewTCell() *TCell {
	output := &TCell{
		TStruct: thrift.NewTStruct("TCell", []thrift.TField{
			thrift.NewTField("value", thrift.BINARY, 1),
			thrift.NewTField("timestamp", thrift.I64, 2),
		}),
	}
	{
	}
	return output
}

func (p *TCell) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "value" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "timestamp" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TCell) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v0, err1 := iprot.ReadBinary()
	if err1 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "value", p.ThriftName(), err1)
	}
	p.Value = Bytes(v0)
	return err
}

func (p *TCell) ReadFieldValue(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *TCell) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v2, err3 := iprot.ReadI64()
	if err3 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "timestamp", p.ThriftName(), err3)
	}
	p.Timestamp = v2
	return err
}

func (p *TCell) ReadFieldTimestamp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *TCell) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TCell")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TCell) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Value != nil {
		err = oprot.WriteFieldBegin("value", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "value", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Value)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "value", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "value", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TCell) WriteFieldValue(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *TCell) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *TCell) WriteFieldTimestamp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *TCell) TStructName() string {
	return "TCell"
}

func (p *TCell) ThriftName() string {
	return "TCell"
}

func (p *TCell) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCell(%+v)", *p)
}

func (p *TCell) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*TCell)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *TCell) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Value
	case 2:
		return p.Timestamp
	}
	return nil
}

func (p *TCell) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("value", thrift.BINARY, 1),
		thrift.NewTField("timestamp", thrift.I64, 2),
	})
}

/**
 * An HColumnDescriptor contains information about a column family
 * such as the number of versions, compression settings, etc. It is
 * used as input when creating a table or adding a column.
 * 
 * Attributes:
 *  - Name
 *  - MaxVersions
 *  - Compression
 *  - InMemory
 *  - BloomFilterType
 *  - BloomFilterVectorSize
 *  - BloomFilterNbHashes
 *  - BlockCacheEnabled
 *  - TimeToLive
 */
type ColumnDescriptor struct {
	thrift.TStruct
	Name                  Text   "name"                  // 1
	MaxVersions           int32  "maxVersions"           // 2
	Compression           string "compression"           // 3
	InMemory              bool   "inMemory"              // 4
	BloomFilterType       string "bloomFilterType"       // 5
	BloomFilterVectorSize int32  "bloomFilterVectorSize" // 6
	BloomFilterNbHashes   int32  "bloomFilterNbHashes"   // 7
	BlockCacheEnabled     bool   "blockCacheEnabled"     // 8
	TimeToLive            int32  "timeToLive"            // 9
}

func NewColumnDescriptor() *ColumnDescriptor {
	output := &ColumnDescriptor{
		TStruct: thrift.NewTStruct("ColumnDescriptor", []thrift.TField{
			thrift.NewTField("name", thrift.BINARY, 1),
			thrift.NewTField("maxVersions", thrift.I32, 2),
			thrift.NewTField("compression", thrift.STRING, 3),
			thrift.NewTField("inMemory", thrift.BOOL, 4),
			thrift.NewTField("bloomFilterType", thrift.STRING, 5),
			thrift.NewTField("bloomFilterVectorSize", thrift.I32, 6),
			thrift.NewTField("bloomFilterNbHashes", thrift.I32, 7),
			thrift.NewTField("blockCacheEnabled", thrift.BOOL, 8),
			thrift.NewTField("timeToLive", thrift.I32, 9),
		}),
	}
	{
		output.MaxVersions = 3
		output.Compression = "NONE"
		output.InMemory = false
		output.BloomFilterType = "NONE"
		output.BloomFilterVectorSize = 0
		output.BloomFilterNbHashes = 0
		output.BlockCacheEnabled = false
		output.TimeToLive = -1
	}
	return output
}

func (p *ColumnDescriptor) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "name" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "maxVersions" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "compression" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "inMemory" {
			if fieldTypeId == thrift.BOOL {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "bloomFilterType" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 6 || fieldName == "bloomFilterVectorSize" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 7 || fieldName == "bloomFilterNbHashes" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 8 || fieldName == "blockCacheEnabled" {
			if fieldTypeId == thrift.BOOL {
				err = p.ReadField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 9 || fieldName == "timeToLive" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField9(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField9(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v4, err5 := iprot.ReadBinary()
	if err5 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err5)
	}
	p.Name = Text(v4)
	return err
}

func (p *ColumnDescriptor) ReadFieldName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ColumnDescriptor) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v6, err7 := iprot.ReadI32()
	if err7 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "maxVersions", p.ThriftName(), err7)
	}
	p.MaxVersions = v6
	return err
}

func (p *ColumnDescriptor) ReadFieldMaxVersions(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *ColumnDescriptor) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v8, err9 := iprot.ReadString()
	if err9 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "compression", p.ThriftName(), err9)
	}
	p.Compression = v8
	return err
}

func (p *ColumnDescriptor) ReadFieldCompression(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *ColumnDescriptor) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v10, err11 := iprot.ReadBool()
	if err11 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "inMemory", p.ThriftName(), err11)
	}
	p.InMemory = v10
	return err
}

func (p *ColumnDescriptor) ReadFieldInMemory(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *ColumnDescriptor) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v12, err13 := iprot.ReadString()
	if err13 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "bloomFilterType", p.ThriftName(), err13)
	}
	p.BloomFilterType = v12
	return err
}

func (p *ColumnDescriptor) ReadFieldBloomFilterType(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *ColumnDescriptor) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v14, err15 := iprot.ReadI32()
	if err15 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "bloomFilterVectorSize", p.ThriftName(), err15)
	}
	p.BloomFilterVectorSize = v14
	return err
}

func (p *ColumnDescriptor) ReadFieldBloomFilterVectorSize(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField6(iprot)
}

func (p *ColumnDescriptor) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v16, err17 := iprot.ReadI32()
	if err17 != nil {
		return thrift.NewTProtocolExceptionReadField(7, "bloomFilterNbHashes", p.ThriftName(), err17)
	}
	p.BloomFilterNbHashes = v16
	return err
}

func (p *ColumnDescriptor) ReadFieldBloomFilterNbHashes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField7(iprot)
}

func (p *ColumnDescriptor) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v18, err19 := iprot.ReadBool()
	if err19 != nil {
		return thrift.NewTProtocolExceptionReadField(8, "blockCacheEnabled", p.ThriftName(), err19)
	}
	p.BlockCacheEnabled = v18
	return err
}

func (p *ColumnDescriptor) ReadFieldBlockCacheEnabled(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField8(iprot)
}

func (p *ColumnDescriptor) ReadField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v20, err21 := iprot.ReadI32()
	if err21 != nil {
		return thrift.NewTProtocolExceptionReadField(9, "timeToLive", p.ThriftName(), err21)
	}
	p.TimeToLive = v20
	return err
}

func (p *ColumnDescriptor) ReadFieldTimeToLive(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField9(iprot)
}

func (p *ColumnDescriptor) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("ColumnDescriptor")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField6(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField7(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField8(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField9(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Name != nil {
		err = oprot.WriteFieldBegin("name", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Name)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ColumnDescriptor) WriteFieldName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ColumnDescriptor) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("maxVersions", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "maxVersions", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.MaxVersions))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "maxVersions", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "maxVersions", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) WriteFieldMaxVersions(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *ColumnDescriptor) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("compression", thrift.STRING, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "compression", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Compression))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "compression", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "compression", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) WriteFieldCompression(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *ColumnDescriptor) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("inMemory", thrift.BOOL, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "inMemory", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.InMemory))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "inMemory", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "inMemory", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) WriteFieldInMemory(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *ColumnDescriptor) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("bloomFilterType", thrift.STRING, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "bloomFilterType", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.BloomFilterType))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "bloomFilterType", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "bloomFilterType", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) WriteFieldBloomFilterType(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *ColumnDescriptor) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("bloomFilterVectorSize", thrift.I32, 6)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "bloomFilterVectorSize", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.BloomFilterVectorSize))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "bloomFilterVectorSize", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "bloomFilterVectorSize", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) WriteFieldBloomFilterVectorSize(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField6(oprot)
}

func (p *ColumnDescriptor) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("bloomFilterNbHashes", thrift.I32, 7)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "bloomFilterNbHashes", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.BloomFilterNbHashes))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "bloomFilterNbHashes", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "bloomFilterNbHashes", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) WriteFieldBloomFilterNbHashes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField7(oprot)
}

func (p *ColumnDescriptor) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("blockCacheEnabled", thrift.BOOL, 8)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "blockCacheEnabled", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.BlockCacheEnabled))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "blockCacheEnabled", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "blockCacheEnabled", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) WriteFieldBlockCacheEnabled(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField8(oprot)
}

func (p *ColumnDescriptor) WriteField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timeToLive", thrift.I32, 9)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "timeToLive", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.TimeToLive))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "timeToLive", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "timeToLive", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) WriteFieldTimeToLive(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField9(oprot)
}

func (p *ColumnDescriptor) TStructName() string {
	return "ColumnDescriptor"
}

func (p *ColumnDescriptor) ThriftName() string {
	return "ColumnDescriptor"
}

func (p *ColumnDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnDescriptor(%+v)", *p)
}

func (p *ColumnDescriptor) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ColumnDescriptor)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ColumnDescriptor) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Name
	case 2:
		return p.MaxVersions
	case 3:
		return p.Compression
	case 4:
		return p.InMemory
	case 5:
		return p.BloomFilterType
	case 6:
		return p.BloomFilterVectorSize
	case 7:
		return p.BloomFilterNbHashes
	case 8:
		return p.BlockCacheEnabled
	case 9:
		return p.TimeToLive
	}
	return nil
}

func (p *ColumnDescriptor) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("name", thrift.BINARY, 1),
		thrift.NewTField("maxVersions", thrift.I32, 2),
		thrift.NewTField("compression", thrift.STRING, 3),
		thrift.NewTField("inMemory", thrift.BOOL, 4),
		thrift.NewTField("bloomFilterType", thrift.STRING, 5),
		thrift.NewTField("bloomFilterVectorSize", thrift.I32, 6),
		thrift.NewTField("bloomFilterNbHashes", thrift.I32, 7),
		thrift.NewTField("blockCacheEnabled", thrift.BOOL, 8),
		thrift.NewTField("timeToLive", thrift.I32, 9),
	})
}

/**
 * A TRegionInfo contains information about an HTable region.
 * 
 * Attributes:
 *  - StartKey
 *  - EndKey
 *  - Id
 *  - Name
 *  - Version
 *  - ServerName
 *  - Port
 */
type TRegionInfo struct {
	thrift.TStruct
	StartKey   Text  "startKey"   // 1
	EndKey     Text  "endKey"     // 2
	Id         int64 "id"         // 3
	Name       Text  "name"       // 4
	Version    byte  "version"    // 5
	ServerName Text  "serverName" // 6
	Port       int32 "port"       // 7
}

func NewTRegionInfo() *TRegionInfo {
	output := &TRegionInfo{
		TStruct: thrift.NewTStruct("TRegionInfo", []thrift.TField{
			thrift.NewTField("startKey", thrift.BINARY, 1),
			thrift.NewTField("endKey", thrift.BINARY, 2),
			thrift.NewTField("id", thrift.I64, 3),
			thrift.NewTField("name", thrift.BINARY, 4),
			thrift.NewTField("version", thrift.BYTE, 5),
			thrift.NewTField("serverName", thrift.BINARY, 6),
			thrift.NewTField("port", thrift.I32, 7),
		}),
	}
	{
	}
	return output
}

func (p *TRegionInfo) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "startKey" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "endKey" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "id" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "name" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "version" {
			if fieldTypeId == thrift.BYTE {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 6 || fieldName == "serverName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 7 || fieldName == "port" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TRegionInfo) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v22, err23 := iprot.ReadBinary()
	if err23 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "startKey", p.ThriftName(), err23)
	}
	p.StartKey = Text(v22)
	return err
}

func (p *TRegionInfo) ReadFieldStartKey(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *TRegionInfo) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v24, err25 := iprot.ReadBinary()
	if err25 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "endKey", p.ThriftName(), err25)
	}
	p.EndKey = Text(v24)
	return err
}

func (p *TRegionInfo) ReadFieldEndKey(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *TRegionInfo) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v26, err27 := iprot.ReadI64()
	if err27 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "id", p.ThriftName(), err27)
	}
	p.Id = v26
	return err
}

func (p *TRegionInfo) ReadFieldId(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *TRegionInfo) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v28, err29 := iprot.ReadBinary()
	if err29 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "name", p.ThriftName(), err29)
	}
	p.Name = Text(v28)
	return err
}

func (p *TRegionInfo) ReadFieldName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *TRegionInfo) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v30, err31 := iprot.ReadByte()
	if err31 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "version", p.ThriftName(), err31)
	}
	p.Version = v30
	return err
}

func (p *TRegionInfo) ReadFieldVersion(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *TRegionInfo) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v32, err33 := iprot.ReadBinary()
	if err33 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "serverName", p.ThriftName(), err33)
	}
	p.ServerName = Text(v32)
	return err
}

func (p *TRegionInfo) ReadFieldServerName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField6(iprot)
}

func (p *TRegionInfo) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v34, err35 := iprot.ReadI32()
	if err35 != nil {
		return thrift.NewTProtocolExceptionReadField(7, "port", p.ThriftName(), err35)
	}
	p.Port = v34
	return err
}

func (p *TRegionInfo) ReadFieldPort(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField7(iprot)
}

func (p *TRegionInfo) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TRegionInfo")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField6(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField7(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TRegionInfo) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartKey != nil {
		err = oprot.WriteFieldBegin("startKey", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "startKey", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartKey)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "startKey", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "startKey", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TRegionInfo) WriteFieldStartKey(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *TRegionInfo) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.EndKey != nil {
		err = oprot.WriteFieldBegin("endKey", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "endKey", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.EndKey)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "endKey", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "endKey", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TRegionInfo) WriteFieldEndKey(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *TRegionInfo) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("id", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "id", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Id))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "id", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "id", p.ThriftName(), err)
	}
	return err
}

func (p *TRegionInfo) WriteFieldId(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *TRegionInfo) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Name != nil {
		err = oprot.WriteFieldBegin("name", thrift.BINARY, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "name", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Name)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TRegionInfo) WriteFieldName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *TRegionInfo) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("version", thrift.BYTE, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "version", p.ThriftName(), err)
	}
	err = oprot.WriteByte(byte(p.Version))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "version", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "version", p.ThriftName(), err)
	}
	return err
}

func (p *TRegionInfo) WriteFieldVersion(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *TRegionInfo) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ServerName != nil {
		err = oprot.WriteFieldBegin("serverName", thrift.BINARY, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "serverName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.ServerName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "serverName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "serverName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TRegionInfo) WriteFieldServerName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField6(oprot)
}

func (p *TRegionInfo) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("port", thrift.I32, 7)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "port", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Port))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "port", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "port", p.ThriftName(), err)
	}
	return err
}

func (p *TRegionInfo) WriteFieldPort(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField7(oprot)
}

func (p *TRegionInfo) TStructName() string {
	return "TRegionInfo"
}

func (p *TRegionInfo) ThriftName() string {
	return "TRegionInfo"
}

func (p *TRegionInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRegionInfo(%+v)", *p)
}

func (p *TRegionInfo) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*TRegionInfo)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *TRegionInfo) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.StartKey
	case 2:
		return p.EndKey
	case 3:
		return p.Id
	case 4:
		return p.Name
	case 5:
		return p.Version
	case 6:
		return p.ServerName
	case 7:
		return p.Port
	}
	return nil
}

func (p *TRegionInfo) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("startKey", thrift.BINARY, 1),
		thrift.NewTField("endKey", thrift.BINARY, 2),
		thrift.NewTField("id", thrift.I64, 3),
		thrift.NewTField("name", thrift.BINARY, 4),
		thrift.NewTField("version", thrift.BYTE, 5),
		thrift.NewTField("serverName", thrift.BINARY, 6),
		thrift.NewTField("port", thrift.I32, 7),
	})
}

/**
 * A Mutation object is used to either update or delete a column-value.
 * 
 * Attributes:
 *  - IsDelete
 *  - Column
 *  - Value
 *  - WriteToWAL
 */
type Mutation struct {
	thrift.TStruct
	IsDelete   bool "isDelete"   // 1
	Column     Text "column"     // 2
	Value      Text "value"      // 3
	WriteToWAL bool "writeToWAL" // 4
}

func NewMutation() *Mutation {
	output := &Mutation{
		TStruct: thrift.NewTStruct("Mutation", []thrift.TField{
			thrift.NewTField("isDelete", thrift.BOOL, 1),
			thrift.NewTField("column", thrift.BINARY, 2),
			thrift.NewTField("value", thrift.BINARY, 3),
			thrift.NewTField("writeToWAL", thrift.BOOL, 4),
		}),
	}
	{
		output.IsDelete = false
		output.WriteToWAL = true
	}
	return output
}

func (p *Mutation) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "isDelete" {
			if fieldTypeId == thrift.BOOL {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "column" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "value" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "writeToWAL" {
			if fieldTypeId == thrift.BOOL {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Mutation) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v36, err37 := iprot.ReadBool()
	if err37 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "isDelete", p.ThriftName(), err37)
	}
	p.IsDelete = v36
	return err
}

func (p *Mutation) ReadFieldIsDelete(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *Mutation) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v38, err39 := iprot.ReadBinary()
	if err39 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "column", p.ThriftName(), err39)
	}
	p.Column = Text(v38)
	return err
}

func (p *Mutation) ReadFieldColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *Mutation) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v40, err41 := iprot.ReadBinary()
	if err41 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "value", p.ThriftName(), err41)
	}
	p.Value = Text(v40)
	return err
}

func (p *Mutation) ReadFieldValue(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *Mutation) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v42, err43 := iprot.ReadBool()
	if err43 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "writeToWAL", p.ThriftName(), err43)
	}
	p.WriteToWAL = v42
	return err
}

func (p *Mutation) ReadFieldWriteToWAL(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *Mutation) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Mutation")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Mutation) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("isDelete", thrift.BOOL, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "isDelete", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.IsDelete))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "isDelete", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "isDelete", p.ThriftName(), err)
	}
	return err
}

func (p *Mutation) WriteFieldIsDelete(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *Mutation) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Mutation) WriteFieldColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *Mutation) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Value != nil {
		err = oprot.WriteFieldBegin("value", thrift.BINARY, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Value)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Mutation) WriteFieldValue(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *Mutation) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("writeToWAL", thrift.BOOL, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "writeToWAL", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.WriteToWAL))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "writeToWAL", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "writeToWAL", p.ThriftName(), err)
	}
	return err
}

func (p *Mutation) WriteFieldWriteToWAL(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *Mutation) TStructName() string {
	return "Mutation"
}

func (p *Mutation) ThriftName() string {
	return "Mutation"
}

func (p *Mutation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Mutation(%+v)", *p)
}

func (p *Mutation) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*Mutation)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *Mutation) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.IsDelete
	case 2:
		return p.Column
	case 3:
		return p.Value
	case 4:
		return p.WriteToWAL
	}
	return nil
}

func (p *Mutation) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("isDelete", thrift.BOOL, 1),
		thrift.NewTField("column", thrift.BINARY, 2),
		thrift.NewTField("value", thrift.BINARY, 3),
		thrift.NewTField("writeToWAL", thrift.BOOL, 4),
	})
}

/**
 * A BatchMutation object is used to apply a number of Mutations to a single row.
 * 
 * Attributes:
 *  - Row
 *  - Mutations
 */
type BatchMutation struct {
	thrift.TStruct
	Row       Text         "row"       // 1
	Mutations thrift.TList "mutations" // 2
}

func NewBatchMutation() *BatchMutation {
	output := &BatchMutation{
		TStruct: thrift.NewTStruct("BatchMutation", []thrift.TField{
			thrift.NewTField("row", thrift.BINARY, 1),
			thrift.NewTField("mutations", thrift.LIST, 2),
		}),
	}
	{
	}
	return output
}

func (p *BatchMutation) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "mutations" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BatchMutation) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v44, err45 := iprot.ReadBinary()
	if err45 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "row", p.ThriftName(), err45)
	}
	p.Row = Text(v44)
	return err
}

func (p *BatchMutation) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *BatchMutation) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype51, _size48, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Mutations", "", err)
	}
	p.Mutations = thrift.NewTList(_etype51, _size48)
	for _i52 := 0; _i52 < _size48; _i52++ {
		_elem53 := NewMutation()
		err56 := _elem53.Read(iprot)
		if err56 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem53Mutation", err56)
		}
		p.Mutations.Push(_elem53)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *BatchMutation) ReadFieldMutations(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *BatchMutation) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("BatchMutation")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BatchMutation) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BatchMutation) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *BatchMutation) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Mutations != nil {
		err = oprot.WriteFieldBegin("mutations", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "mutations", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Mutations.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter57 := range p.Mutations.Iter() {
			Iter58 := Iter57.(*Mutation)
			err = Iter58.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Mutation", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "mutations", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BatchMutation) WriteFieldMutations(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *BatchMutation) TStructName() string {
	return "BatchMutation"
}

func (p *BatchMutation) ThriftName() string {
	return "BatchMutation"
}

func (p *BatchMutation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchMutation(%+v)", *p)
}

func (p *BatchMutation) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*BatchMutation)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *BatchMutation) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Row
	case 2:
		return p.Mutations
	}
	return nil
}

func (p *BatchMutation) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("row", thrift.BINARY, 1),
		thrift.NewTField("mutations", thrift.LIST, 2),
	})
}

/**
 * For increments that are not incrementColumnValue
 * equivalents.
 * 
 * Attributes:
 *  - Table
 *  - Row
 *  - Column
 *  - Ammount
 */
type TIncrement struct {
	thrift.TStruct
	Table   Text  "table"   // 1
	Row     Text  "row"     // 2
	Column  Text  "column"  // 3
	Ammount int64 "ammount" // 4
}

func NewTIncrement() *TIncrement {
	output := &TIncrement{
		TStruct: thrift.NewTStruct("TIncrement", []thrift.TField{
			thrift.NewTField("table", thrift.BINARY, 1),
			thrift.NewTField("row", thrift.BINARY, 2),
			thrift.NewTField("column", thrift.BINARY, 3),
			thrift.NewTField("ammount", thrift.I64, 4),
		}),
	}
	{
	}
	return output
}

func (p *TIncrement) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "table" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "column" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "ammount" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TIncrement) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v59, err60 := iprot.ReadBinary()
	if err60 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err60)
	}
	p.Table = Text(v59)
	return err
}

func (p *TIncrement) ReadFieldTable(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *TIncrement) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v61, err62 := iprot.ReadBinary()
	if err62 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err62)
	}
	p.Row = Text(v61)
	return err
}

func (p *TIncrement) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *TIncrement) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v63, err64 := iprot.ReadBinary()
	if err64 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err64)
	}
	p.Column = Text(v63)
	return err
}

func (p *TIncrement) ReadFieldColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *TIncrement) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v65, err66 := iprot.ReadI64()
	if err66 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "ammount", p.ThriftName(), err66)
	}
	p.Ammount = v65
	return err
}

func (p *TIncrement) ReadFieldAmmount(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *TIncrement) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TIncrement")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TIncrement) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Table != nil {
		err = oprot.WriteFieldBegin("table", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Table)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TIncrement) WriteFieldTable(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *TIncrement) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TIncrement) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *TIncrement) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.BINARY, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TIncrement) WriteFieldColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *TIncrement) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("ammount", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "ammount", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Ammount))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "ammount", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "ammount", p.ThriftName(), err)
	}
	return err
}

func (p *TIncrement) WriteFieldAmmount(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *TIncrement) TStructName() string {
	return "TIncrement"
}

func (p *TIncrement) ThriftName() string {
	return "TIncrement"
}

func (p *TIncrement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIncrement(%+v)", *p)
}

func (p *TIncrement) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*TIncrement)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *TIncrement) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Table
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Ammount
	}
	return nil
}

func (p *TIncrement) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("table", thrift.BINARY, 1),
		thrift.NewTField("row", thrift.BINARY, 2),
		thrift.NewTField("column", thrift.BINARY, 3),
		thrift.NewTField("ammount", thrift.I64, 4),
	})
}

/**
 * Holds row name and then a map of columns to cells.
 * 
 * Attributes:
 *  - Row
 *  - Columns
 */
type TRowResult struct {
	thrift.TStruct
	Row     Text        "row"     // 1
	Columns thrift.TMap "columns" // 2
}

func NewTRowResult() *TRowResult {
	output := &TRowResult{
		TStruct: thrift.NewTStruct("TRowResult", []thrift.TField{
			thrift.NewTField("row", thrift.BINARY, 1),
			thrift.NewTField("columns", thrift.MAP, 2),
		}),
	}
	{
	}
	return output
}

func (p *TRowResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "columns" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TRowResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v67, err68 := iprot.ReadBinary()
	if err68 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "row", p.ThriftName(), err68)
	}
	p.Row = Text(v67)
	return err
}

func (p *TRowResult) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *TRowResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype72, _vtype73, _size71, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	p.Columns = thrift.NewTMap(_ktype72, _vtype73, _size71)
	for _i75 := 0; _i75 < _size71; _i75++ {
		v78, err79 := iprot.ReadBinary()
		if err79 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key76", "", err79)
		}
		_key76 := Text(v78)
		_val77 := NewTCell()
		err82 := _val77.Read(iprot)
		if err82 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_val77TCell", err82)
		}
		p.Columns.Set(_key76, _val77)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *TRowResult) ReadFieldColumns(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *TRowResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TRowResult")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TRowResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TRowResult) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *TRowResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.MAP, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.STRUCT, p.Columns.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter83 := range p.Columns.Iter() {
			Kiter84, Viter85 := Miter83.Key().(Text), Miter83.Value().(*TCell)
			err = oprot.WriteBinary(Kiter84)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter84", "", err)
			}
			err = Viter85.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TCell", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TRowResult) WriteFieldColumns(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *TRowResult) TStructName() string {
	return "TRowResult"
}

func (p *TRowResult) ThriftName() string {
	return "TRowResult"
}

func (p *TRowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRowResult(%+v)", *p)
}

func (p *TRowResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*TRowResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *TRowResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Row
	case 2:
		return p.Columns
	}
	return nil
}

func (p *TRowResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("row", thrift.BINARY, 1),
		thrift.NewTField("columns", thrift.MAP, 2),
	})
}

/**
 * A Scan object is used to specify scanner parameters when opening a scanner.
 * 
 * Attributes:
 *  - StartRow
 *  - StopRow
 *  - Timestamp
 *  - Columns
 *  - Caching
 *  - FilterString
 */
type TScan struct {
	thrift.TStruct
	StartRow     Text         "startRow"     // 1
	StopRow      Text         "stopRow"      // 2
	Timestamp    int64        "timestamp"    // 3
	Columns      thrift.TList "columns"      // 4
	Caching      int32        "caching"      // 5
	FilterString Text         "filterString" // 6
}

func NewTScan() *TScan {
	output := &TScan{
		TStruct: thrift.NewTStruct("TScan", []thrift.TField{
			thrift.NewTField("startRow", thrift.BINARY, 1),
			thrift.NewTField("stopRow", thrift.BINARY, 2),
			thrift.NewTField("timestamp", thrift.I64, 3),
			thrift.NewTField("columns", thrift.LIST, 4),
			thrift.NewTField("caching", thrift.I32, 5),
			thrift.NewTField("filterString", thrift.BINARY, 6),
		}),
	}
	{
	}
	return output
}

func (p *TScan) IsSetStartRow() bool {
	return p.StartRow != nil
}

func (p *TScan) IsSetStopRow() bool {
	return p.StopRow != nil
}

func (p *TScan) IsSetTimestamp() bool {
	return p.Timestamp != 0
}

func (p *TScan) IsSetColumns() bool {
	return p.Columns != nil && p.Columns.Len() > 0
}

func (p *TScan) IsSetCaching() bool {
	return p.Caching != 0
}

func (p *TScan) IsSetFilterString() bool {
	return p.FilterString != nil
}

func (p *TScan) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "startRow" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "stopRow" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "timestamp" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "columns" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "caching" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 6 || fieldName == "filterString" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TScan) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v86, err87 := iprot.ReadBinary()
	if err87 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "startRow", p.ThriftName(), err87)
	}
	p.StartRow = Text(v86)
	return err
}

func (p *TScan) ReadFieldStartRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *TScan) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v88, err89 := iprot.ReadBinary()
	if err89 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "stopRow", p.ThriftName(), err89)
	}
	p.StopRow = Text(v88)
	return err
}

func (p *TScan) ReadFieldStopRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *TScan) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v90, err91 := iprot.ReadI64()
	if err91 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err91)
	}
	p.Timestamp = v90
	return err
}

func (p *TScan) ReadFieldTimestamp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *TScan) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype97, _size94, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	p.Columns = thrift.NewTList(_etype97, _size94)
	for _i98 := 0; _i98 < _size94; _i98++ {
		v100, err101 := iprot.ReadBinary()
		if err101 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem99", "", err101)
		}
		_elem99 := Text(v100)
		p.Columns.Push(_elem99)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *TScan) ReadFieldColumns(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *TScan) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v102, err103 := iprot.ReadI32()
	if err103 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "caching", p.ThriftName(), err103)
	}
	p.Caching = v102
	return err
}

func (p *TScan) ReadFieldCaching(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *TScan) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v104, err105 := iprot.ReadBinary()
	if err105 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "filterString", p.ThriftName(), err105)
	}
	p.FilterString = Text(v104)
	return err
}

func (p *TScan) ReadFieldFilterString(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField6(iprot)
}

func (p *TScan) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TScan")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField6(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TScan) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartRow != nil {
		if p.IsSetStartRow() {
			err = oprot.WriteFieldBegin("startRow", thrift.BINARY, 1)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "startRow", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.StartRow)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "startRow", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "startRow", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *TScan) WriteFieldStartRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *TScan) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StopRow != nil {
		if p.IsSetStopRow() {
			err = oprot.WriteFieldBegin("stopRow", thrift.BINARY, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "stopRow", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.StopRow)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "stopRow", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "stopRow", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *TScan) WriteFieldStopRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *TScan) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetTimestamp() {
		err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
		}
		err = oprot.WriteI64(int64(p.Timestamp))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TScan) WriteFieldTimestamp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *TScan) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		if p.IsSetColumns() {
			err = oprot.WriteFieldBegin("columns", thrift.LIST, 4)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.BINARY, p.Columns.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter106 := range p.Columns.Iter() {
				Iter107 := Iter106.(Text)
				err = oprot.WriteBinary(Iter107)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter107", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *TScan) WriteFieldColumns(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *TScan) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetCaching() {
		err = oprot.WriteFieldBegin("caching", thrift.I32, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "caching", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Caching))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "caching", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "caching", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TScan) WriteFieldCaching(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *TScan) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.FilterString != nil {
		if p.IsSetFilterString() {
			err = oprot.WriteFieldBegin("filterString", thrift.BINARY, 6)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(6, "filterString", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.FilterString)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(6, "filterString", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(6, "filterString", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *TScan) WriteFieldFilterString(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField6(oprot)
}

func (p *TScan) TStructName() string {
	return "TScan"
}

func (p *TScan) ThriftName() string {
	return "TScan"
}

func (p *TScan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScan(%+v)", *p)
}

func (p *TScan) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*TScan)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *TScan) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.StartRow
	case 2:
		return p.StopRow
	case 3:
		return p.Timestamp
	case 4:
		return p.Columns
	case 5:
		return p.Caching
	case 6:
		return p.FilterString
	}
	return nil
}

func (p *TScan) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("startRow", thrift.BINARY, 1),
		thrift.NewTField("stopRow", thrift.BINARY, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("columns", thrift.LIST, 4),
		thrift.NewTField("caching", thrift.I32, 5),
		thrift.NewTField("filterString", thrift.BINARY, 6),
	})
}

/**
 * An IOError exception signals that an error occurred communicating
 * to the Hbase master or an Hbase region server.  Also used to return
 * more general Hbase error conditions.
 * 
 * Attributes:
 *  - Message
 */
type IOError struct {
	thrift.TStruct
	Message string "message" // 1
}

func NewIOError() *IOError {
	output := &IOError{
		TStruct: thrift.NewTStruct("IOError", []thrift.TField{
			thrift.NewTField("message", thrift.STRING, 1),
		}),
	}
	{
	}
	return output
}

func (p *IOError) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "message" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IOError) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v108, err109 := iprot.ReadString()
	if err109 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err109)
	}
	p.Message = v108
	return err
}

func (p *IOError) ReadFieldMessage(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *IOError) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("IOError")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IOError) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Message))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	return err
}

func (p *IOError) WriteFieldMessage(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *IOError) TStructName() string {
	return "IOError"
}

func (p *IOError) ThriftName() string {
	return "IOError"
}

func (p *IOError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IOError(%+v)", *p)
}

func (p *IOError) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*IOError)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *IOError) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Message
	}
	return nil
}

func (p *IOError) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("message", thrift.STRING, 1),
	})
}

/**
 * An IllegalArgument exception indicates an illegal or invalid
 * argument was passed into a procedure.
 * 
 * Attributes:
 *  - Message
 */
type IllegalArgument struct {
	thrift.TStruct
	Message string "message" // 1
}

func NewIllegalArgument() *IllegalArgument {
	output := &IllegalArgument{
		TStruct: thrift.NewTStruct("IllegalArgument", []thrift.TField{
			thrift.NewTField("message", thrift.STRING, 1),
		}),
	}
	{
	}
	return output
}

func (p *IllegalArgument) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "message" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IllegalArgument) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v110, err111 := iprot.ReadString()
	if err111 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err111)
	}
	p.Message = v110
	return err
}

func (p *IllegalArgument) ReadFieldMessage(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *IllegalArgument) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("IllegalArgument")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IllegalArgument) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Message))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	return err
}

func (p *IllegalArgument) WriteFieldMessage(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *IllegalArgument) TStructName() string {
	return "IllegalArgument"
}

func (p *IllegalArgument) ThriftName() string {
	return "IllegalArgument"
}

func (p *IllegalArgument) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IllegalArgument(%+v)", *p)
}

func (p *IllegalArgument) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*IllegalArgument)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *IllegalArgument) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Message
	}
	return nil
}

func (p *IllegalArgument) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("message", thrift.STRING, 1),
	})
}

/**
 * An AlreadyExists exceptions signals that a table with the specified
 * name already exists
 * 
 * Attributes:
 *  - Message
 */
type AlreadyExists struct {
	thrift.TStruct
	Message string "message" // 1
}

func NewAlreadyExists() *AlreadyExists {
	output := &AlreadyExists{
		TStruct: thrift.NewTStruct("AlreadyExists", []thrift.TField{
			thrift.NewTField("message", thrift.STRING, 1),
		}),
	}
	{
	}
	return output
}

func (p *AlreadyExists) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "message" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AlreadyExists) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v112, err113 := iprot.ReadString()
	if err113 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err113)
	}
	p.Message = v112
	return err
}

func (p *AlreadyExists) ReadFieldMessage(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *AlreadyExists) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("AlreadyExists")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AlreadyExists) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Message))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	return err
}

func (p *AlreadyExists) WriteFieldMessage(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *AlreadyExists) TStructName() string {
	return "AlreadyExists"
}

func (p *AlreadyExists) ThriftName() string {
	return "AlreadyExists"
}

func (p *AlreadyExists) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlreadyExists(%+v)", *p)
}

func (p *AlreadyExists) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*AlreadyExists)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *AlreadyExists) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Message
	}
	return nil
}

func (p *AlreadyExists) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("message", thrift.STRING, 1),
	})
}

func init() {
}
