/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
	"Hbase"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"thrift"
)

func Usage() {
	fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
	flag.PrintDefaults()
	fmt.Fprint(os.Stderr, "Functions:\n")
	fmt.Fprint(os.Stderr, "  enableTable(tableName Bytes) (io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  disableTable(tableName Bytes) (io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  isTableEnabled(tableName Bytes) (retval1586 bool, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  compact(tableNameOrRegionName Bytes) (io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  majorCompact(tableNameOrRegionName Bytes) (io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  getTableNames() (retval1589 thrift.TList, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  getColumnDescriptors(tableName Text) (retval1590 thrift.TMap, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  getTableRegions(tableName Text) (retval1591 thrift.TList, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  createTable(tableName Text, columnFamilies thrift.TList) (io *IOError, ia *IllegalArgument, exist *AlreadyExists, err error)\n")
	fmt.Fprint(os.Stderr, "  deleteTable(tableName Text) (io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  get(tableName Text, row Text, column Text, attributes thrift.TMap) (retval1594 thrift.TList, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  getVer(tableName Text, row Text, column Text, numVersions int32, attributes thrift.TMap) (retval1595 thrift.TList, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  getVerTs(tableName Text, row Text, column Text, timestamp int64, numVersions int32, attributes thrift.TMap) (retval1596 thrift.TList, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  getRow(tableName Text, row Text, attributes thrift.TMap) (retval1597 thrift.TList, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  getRowWithColumns(tableName Text, row Text, columns thrift.TList, attributes thrift.TMap) (retval1598 thrift.TList, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  getRowTs(tableName Text, row Text, timestamp int64, attributes thrift.TMap) (retval1599 thrift.TList, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  getRowWithColumnsTs(tableName Text, row Text, columns thrift.TList, timestamp int64, attributes thrift.TMap) (retval1600 thrift.TList, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  getRows(tableName Text, rows thrift.TList, attributes thrift.TMap) (retval1601 thrift.TList, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  getRowsWithColumns(tableName Text, rows thrift.TList, columns thrift.TList, attributes thrift.TMap) (retval1602 thrift.TList, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  getRowsTs(tableName Text, rows thrift.TList, timestamp int64, attributes thrift.TMap) (retval1603 thrift.TList, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  getRowsWithColumnsTs(tableName Text, rows thrift.TList, columns thrift.TList, timestamp int64, attributes thrift.TMap) (retval1604 thrift.TList, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  mutateRow(tableName Text, row Text, mutations thrift.TList, attributes thrift.TMap) (io *IOError, ia *IllegalArgument, err error)\n")
	fmt.Fprint(os.Stderr, "  mutateRowTs(tableName Text, row Text, mutations thrift.TList, timestamp int64, attributes thrift.TMap) (io *IOError, ia *IllegalArgument, err error)\n")
	fmt.Fprint(os.Stderr, "  mutateRows(tableName Text, rowBatches thrift.TList, attributes thrift.TMap) (io *IOError, ia *IllegalArgument, err error)\n")
	fmt.Fprint(os.Stderr, "  mutateRowsTs(tableName Text, rowBatches thrift.TList, timestamp int64, attributes thrift.TMap) (io *IOError, ia *IllegalArgument, err error)\n")
	fmt.Fprint(os.Stderr, "  atomicIncrement(tableName Text, row Text, column Text, value int64) (retval1609 int64, io *IOError, ia *IllegalArgument, err error)\n")
	fmt.Fprint(os.Stderr, "  deleteAll(tableName Text, row Text, column Text, attributes thrift.TMap) (io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  deleteAllTs(tableName Text, row Text, column Text, timestamp int64, attributes thrift.TMap) (io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  deleteAllRow(tableName Text, row Text, attributes thrift.TMap) (io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  increment(increment *TIncrement) (io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  incrementRows(increments thrift.TList) (io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  deleteAllRowTs(tableName Text, row Text, timestamp int64, attributes thrift.TMap) (io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  scannerOpenWithScan(tableName Text, scan *TScan, attributes thrift.TMap) (retval1616 ScannerID, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  scannerOpen(tableName Text, startRow Text, columns thrift.TList, attributes thrift.TMap) (retval1617 ScannerID, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  scannerOpenWithStop(tableName Text, startRow Text, stopRow Text, columns thrift.TList, attributes thrift.TMap) (retval1618 ScannerID, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  scannerOpenWithPrefix(tableName Text, startAndPrefix Text, columns thrift.TList, attributes thrift.TMap) (retval1619 ScannerID, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  scannerOpenTs(tableName Text, startRow Text, columns thrift.TList, timestamp int64, attributes thrift.TMap) (retval1620 ScannerID, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  scannerOpenWithStopTs(tableName Text, startRow Text, stopRow Text, columns thrift.TList, timestamp int64, attributes thrift.TMap) (retval1621 ScannerID, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  scannerGet(id ScannerID) (retval1622 thrift.TList, io *IOError, ia *IllegalArgument, err error)\n")
	fmt.Fprint(os.Stderr, "  scannerGetList(id ScannerID, nbRows int32) (retval1623 thrift.TList, io *IOError, ia *IllegalArgument, err error)\n")
	fmt.Fprint(os.Stderr, "  scannerClose(id ScannerID) (io *IOError, ia *IllegalArgument, err error)\n")
	fmt.Fprint(os.Stderr, "  getRowOrBefore(tableName Text, row Text, family Text) (retval1625 thrift.TList, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "  getRegionInfo(row Text) (retval1626 *TRegionInfo, io *IOError, err error)\n")
	fmt.Fprint(os.Stderr, "\n")
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var help bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.BoolVar(&help, "help", false, "See usage string")
	flag.Parse()
	if help || flag.NArg() == 0 {
		flag.Usage()
	}

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprint(os.Stderr, "Error parsing URL: ", err.Error(), "\n")
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprint(os.Stderr, "Error parsing URL: ", err.Error(), "\n")
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
		if err != nil {
			fmt.Fprint(os.Stderr, "Error resolving address", err.Error())
			os.Exit(1)
		}
		trans, err = thrift.NewTNonblockingSocketAddr(addr)
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprint(os.Stderr, "Error creating transport", err.Error())
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
		Usage()
		os.Exit(1)
	}
	client := Hbase.NewHbaseClientFactory(trans, protocolFactory)
	if err = trans.Open(); err != nil {
		fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.Error())
		os.Exit(1)
	}

	switch cmd {
	case "enableTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "EnableTable requires 1 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Bytes(argvalue0)
		fmt.Print(client.EnableTable(value0))
		fmt.Print("\n")
		break
	case "disableTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "DisableTable requires 1 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Bytes(argvalue0)
		fmt.Print(client.DisableTable(value0))
		fmt.Print("\n")
		break
	case "isTableEnabled":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "IsTableEnabled requires 1 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Bytes(argvalue0)
		fmt.Print(client.IsTableEnabled(value0))
		fmt.Print("\n")
		break
	case "compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "Compact requires 1 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Bytes(argvalue0)
		fmt.Print(client.Compact(value0))
		fmt.Print("\n")
		break
	case "majorCompact":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "MajorCompact requires 1 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Bytes(argvalue0)
		fmt.Print(client.MajorCompact(value0))
		fmt.Print("\n")
		break
	case "getTableNames":
		if flag.NArg()-1 != 0 {
			fmt.Fprint(os.Stderr, "GetTableNames requires 0 args\n")
			flag.Usage()
		}
		fmt.Print(client.GetTableNames())
		fmt.Print("\n")
		break
	case "getColumnDescriptors":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "GetColumnDescriptors requires 1 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		fmt.Print(client.GetColumnDescriptors(value0))
		fmt.Print("\n")
		break
	case "getTableRegions":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "GetTableRegions requires 1 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		fmt.Print(client.GetTableRegions(value0))
		fmt.Print("\n")
		break
	case "createTable":
		if flag.NArg()-1 != 2 {
			fmt.Fprint(os.Stderr, "CreateTable requires 2 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg1635 := flag.Arg(2)
		mbTrans1636 := thrift.NewTMemoryBufferLen(len(arg1635))
		defer mbTrans1636.Close()
		_, err1637 := mbTrans1636.WriteString(arg1635)
		if err1637 != nil {
			Usage()
			return
		}
		factory1638 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1639 := factory1638.GetProtocol(mbTrans1636)
		containerStruct1 := Hbase.NewCreateTableArgs()
		err1640 := containerStruct1.ReadField2(jsProt1639)
		if err1640 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.ColumnFamilies
		value1 := argvalue1
		fmt.Print(client.CreateTable(value0, value1))
		fmt.Print("\n")
		break
	case "deleteTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "DeleteTable requires 1 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		fmt.Print(client.DeleteTable(value0))
		fmt.Print("\n")
		break
	case "get":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "Get requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		arg1645 := flag.Arg(4)
		mbTrans1646 := thrift.NewTMemoryBufferLen(len(arg1645))
		defer mbTrans1646.Close()
		_, err1647 := mbTrans1646.WriteString(arg1645)
		if err1647 != nil {
			Usage()
			return
		}
		factory1648 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1649 := factory1648.GetProtocol(mbTrans1646)
		containerStruct3 := Hbase.NewGetArgs()
		err1650 := containerStruct3.ReadField4(jsProt1649)
		if err1650 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.Get(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getVer":
		if flag.NArg()-1 != 5 {
			fmt.Fprint(os.Stderr, "GetVer requires 5 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		tmp3, err1654 := (strconv.Atoi(flag.Arg(4)))
		if err1654 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		arg1655 := flag.Arg(5)
		mbTrans1656 := thrift.NewTMemoryBufferLen(len(arg1655))
		defer mbTrans1656.Close()
		_, err1657 := mbTrans1656.WriteString(arg1655)
		if err1657 != nil {
			Usage()
			return
		}
		factory1658 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1659 := factory1658.GetProtocol(mbTrans1656)
		containerStruct4 := Hbase.NewGetVerArgs()
		err1660 := containerStruct4.ReadField5(jsProt1659)
		if err1660 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.GetVer(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "getVerTs":
		if flag.NArg()-1 != 6 {
			fmt.Fprint(os.Stderr, "GetVerTs requires 6 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		argvalue3, err1664 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err1664 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		tmp4, err1665 := (strconv.Atoi(flag.Arg(5)))
		if err1665 != nil {
			Usage()
			return
		}
		argvalue4 := int32(tmp4)
		value4 := argvalue4
		arg1666 := flag.Arg(6)
		mbTrans1667 := thrift.NewTMemoryBufferLen(len(arg1666))
		defer mbTrans1667.Close()
		_, err1668 := mbTrans1667.WriteString(arg1666)
		if err1668 != nil {
			Usage()
			return
		}
		factory1669 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1670 := factory1669.GetProtocol(mbTrans1667)
		containerStruct5 := Hbase.NewGetVerTsArgs()
		err1671 := containerStruct5.ReadField6(jsProt1670)
		if err1671 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.Attributes
		value5 := argvalue5
		fmt.Print(client.GetVerTs(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "getRow":
		if flag.NArg()-1 != 3 {
			fmt.Fprint(os.Stderr, "GetRow requires 3 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg1674 := flag.Arg(3)
		mbTrans1675 := thrift.NewTMemoryBufferLen(len(arg1674))
		defer mbTrans1675.Close()
		_, err1676 := mbTrans1675.WriteString(arg1674)
		if err1676 != nil {
			Usage()
			return
		}
		factory1677 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1678 := factory1677.GetProtocol(mbTrans1675)
		containerStruct2 := Hbase.NewGetRowArgs()
		err1679 := containerStruct2.ReadField3(jsProt1678)
		if err1679 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Attributes
		value2 := argvalue2
		fmt.Print(client.GetRow(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getRowWithColumns":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "GetRowWithColumns requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg1682 := flag.Arg(3)
		mbTrans1683 := thrift.NewTMemoryBufferLen(len(arg1682))
		defer mbTrans1683.Close()
		_, err1684 := mbTrans1683.WriteString(arg1682)
		if err1684 != nil {
			Usage()
			return
		}
		factory1685 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1686 := factory1685.GetProtocol(mbTrans1683)
		containerStruct2 := Hbase.NewGetRowWithColumnsArgs()
		err1687 := containerStruct2.ReadField3(jsProt1686)
		if err1687 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		arg1688 := flag.Arg(4)
		mbTrans1689 := thrift.NewTMemoryBufferLen(len(arg1688))
		defer mbTrans1689.Close()
		_, err1690 := mbTrans1689.WriteString(arg1688)
		if err1690 != nil {
			Usage()
			return
		}
		factory1691 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1692 := factory1691.GetProtocol(mbTrans1689)
		containerStruct3 := Hbase.NewGetRowWithColumnsArgs()
		err1693 := containerStruct3.ReadField4(jsProt1692)
		if err1693 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.GetRowWithColumns(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getRowTs":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "GetRowTs requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2, err1696 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err1696 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg1697 := flag.Arg(4)
		mbTrans1698 := thrift.NewTMemoryBufferLen(len(arg1697))
		defer mbTrans1698.Close()
		_, err1699 := mbTrans1698.WriteString(arg1697)
		if err1699 != nil {
			Usage()
			return
		}
		factory1700 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1701 := factory1700.GetProtocol(mbTrans1698)
		containerStruct3 := Hbase.NewGetRowTsArgs()
		err1702 := containerStruct3.ReadField4(jsProt1701)
		if err1702 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.GetRowTs(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getRowWithColumnsTs":
		if flag.NArg()-1 != 5 {
			fmt.Fprint(os.Stderr, "GetRowWithColumnsTs requires 5 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg1705 := flag.Arg(3)
		mbTrans1706 := thrift.NewTMemoryBufferLen(len(arg1705))
		defer mbTrans1706.Close()
		_, err1707 := mbTrans1706.WriteString(arg1705)
		if err1707 != nil {
			Usage()
			return
		}
		factory1708 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1709 := factory1708.GetProtocol(mbTrans1706)
		containerStruct2 := Hbase.NewGetRowWithColumnsTsArgs()
		err1710 := containerStruct2.ReadField3(jsProt1709)
		if err1710 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		argvalue3, err1711 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err1711 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg1712 := flag.Arg(5)
		mbTrans1713 := thrift.NewTMemoryBufferLen(len(arg1712))
		defer mbTrans1713.Close()
		_, err1714 := mbTrans1713.WriteString(arg1712)
		if err1714 != nil {
			Usage()
			return
		}
		factory1715 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1716 := factory1715.GetProtocol(mbTrans1713)
		containerStruct4 := Hbase.NewGetRowWithColumnsTsArgs()
		err1717 := containerStruct4.ReadField5(jsProt1716)
		if err1717 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.GetRowWithColumnsTs(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "getRows":
		if flag.NArg()-1 != 3 {
			fmt.Fprint(os.Stderr, "GetRows requires 3 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg1719 := flag.Arg(2)
		mbTrans1720 := thrift.NewTMemoryBufferLen(len(arg1719))
		defer mbTrans1720.Close()
		_, err1721 := mbTrans1720.WriteString(arg1719)
		if err1721 != nil {
			Usage()
			return
		}
		factory1722 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1723 := factory1722.GetProtocol(mbTrans1720)
		containerStruct1 := Hbase.NewGetRowsArgs()
		err1724 := containerStruct1.ReadField2(jsProt1723)
		if err1724 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Rows
		value1 := argvalue1
		arg1725 := flag.Arg(3)
		mbTrans1726 := thrift.NewTMemoryBufferLen(len(arg1725))
		defer mbTrans1726.Close()
		_, err1727 := mbTrans1726.WriteString(arg1725)
		if err1727 != nil {
			Usage()
			return
		}
		factory1728 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1729 := factory1728.GetProtocol(mbTrans1726)
		containerStruct2 := Hbase.NewGetRowsArgs()
		err1730 := containerStruct2.ReadField3(jsProt1729)
		if err1730 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Attributes
		value2 := argvalue2
		fmt.Print(client.GetRows(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getRowsWithColumns":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "GetRowsWithColumns requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg1732 := flag.Arg(2)
		mbTrans1733 := thrift.NewTMemoryBufferLen(len(arg1732))
		defer mbTrans1733.Close()
		_, err1734 := mbTrans1733.WriteString(arg1732)
		if err1734 != nil {
			Usage()
			return
		}
		factory1735 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1736 := factory1735.GetProtocol(mbTrans1733)
		containerStruct1 := Hbase.NewGetRowsWithColumnsArgs()
		err1737 := containerStruct1.ReadField2(jsProt1736)
		if err1737 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Rows
		value1 := argvalue1
		arg1738 := flag.Arg(3)
		mbTrans1739 := thrift.NewTMemoryBufferLen(len(arg1738))
		defer mbTrans1739.Close()
		_, err1740 := mbTrans1739.WriteString(arg1738)
		if err1740 != nil {
			Usage()
			return
		}
		factory1741 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1742 := factory1741.GetProtocol(mbTrans1739)
		containerStruct2 := Hbase.NewGetRowsWithColumnsArgs()
		err1743 := containerStruct2.ReadField3(jsProt1742)
		if err1743 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		arg1744 := flag.Arg(4)
		mbTrans1745 := thrift.NewTMemoryBufferLen(len(arg1744))
		defer mbTrans1745.Close()
		_, err1746 := mbTrans1745.WriteString(arg1744)
		if err1746 != nil {
			Usage()
			return
		}
		factory1747 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1748 := factory1747.GetProtocol(mbTrans1745)
		containerStruct3 := Hbase.NewGetRowsWithColumnsArgs()
		err1749 := containerStruct3.ReadField4(jsProt1748)
		if err1749 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.GetRowsWithColumns(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getRowsTs":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "GetRowsTs requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg1751 := flag.Arg(2)
		mbTrans1752 := thrift.NewTMemoryBufferLen(len(arg1751))
		defer mbTrans1752.Close()
		_, err1753 := mbTrans1752.WriteString(arg1751)
		if err1753 != nil {
			Usage()
			return
		}
		factory1754 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1755 := factory1754.GetProtocol(mbTrans1752)
		containerStruct1 := Hbase.NewGetRowsTsArgs()
		err1756 := containerStruct1.ReadField2(jsProt1755)
		if err1756 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Rows
		value1 := argvalue1
		argvalue2, err1757 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err1757 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg1758 := flag.Arg(4)
		mbTrans1759 := thrift.NewTMemoryBufferLen(len(arg1758))
		defer mbTrans1759.Close()
		_, err1760 := mbTrans1759.WriteString(arg1758)
		if err1760 != nil {
			Usage()
			return
		}
		factory1761 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1762 := factory1761.GetProtocol(mbTrans1759)
		containerStruct3 := Hbase.NewGetRowsTsArgs()
		err1763 := containerStruct3.ReadField4(jsProt1762)
		if err1763 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.GetRowsTs(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getRowsWithColumnsTs":
		if flag.NArg()-1 != 5 {
			fmt.Fprint(os.Stderr, "GetRowsWithColumnsTs requires 5 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg1765 := flag.Arg(2)
		mbTrans1766 := thrift.NewTMemoryBufferLen(len(arg1765))
		defer mbTrans1766.Close()
		_, err1767 := mbTrans1766.WriteString(arg1765)
		if err1767 != nil {
			Usage()
			return
		}
		factory1768 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1769 := factory1768.GetProtocol(mbTrans1766)
		containerStruct1 := Hbase.NewGetRowsWithColumnsTsArgs()
		err1770 := containerStruct1.ReadField2(jsProt1769)
		if err1770 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Rows
		value1 := argvalue1
		arg1771 := flag.Arg(3)
		mbTrans1772 := thrift.NewTMemoryBufferLen(len(arg1771))
		defer mbTrans1772.Close()
		_, err1773 := mbTrans1772.WriteString(arg1771)
		if err1773 != nil {
			Usage()
			return
		}
		factory1774 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1775 := factory1774.GetProtocol(mbTrans1772)
		containerStruct2 := Hbase.NewGetRowsWithColumnsTsArgs()
		err1776 := containerStruct2.ReadField3(jsProt1775)
		if err1776 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		argvalue3, err1777 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err1777 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg1778 := flag.Arg(5)
		mbTrans1779 := thrift.NewTMemoryBufferLen(len(arg1778))
		defer mbTrans1779.Close()
		_, err1780 := mbTrans1779.WriteString(arg1778)
		if err1780 != nil {
			Usage()
			return
		}
		factory1781 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1782 := factory1781.GetProtocol(mbTrans1779)
		containerStruct4 := Hbase.NewGetRowsWithColumnsTsArgs()
		err1783 := containerStruct4.ReadField5(jsProt1782)
		if err1783 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.GetRowsWithColumnsTs(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "mutateRow":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "MutateRow requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg1786 := flag.Arg(3)
		mbTrans1787 := thrift.NewTMemoryBufferLen(len(arg1786))
		defer mbTrans1787.Close()
		_, err1788 := mbTrans1787.WriteString(arg1786)
		if err1788 != nil {
			Usage()
			return
		}
		factory1789 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1790 := factory1789.GetProtocol(mbTrans1787)
		containerStruct2 := Hbase.NewMutateRowArgs()
		err1791 := containerStruct2.ReadField3(jsProt1790)
		if err1791 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Mutations
		value2 := argvalue2
		arg1792 := flag.Arg(4)
		mbTrans1793 := thrift.NewTMemoryBufferLen(len(arg1792))
		defer mbTrans1793.Close()
		_, err1794 := mbTrans1793.WriteString(arg1792)
		if err1794 != nil {
			Usage()
			return
		}
		factory1795 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1796 := factory1795.GetProtocol(mbTrans1793)
		containerStruct3 := Hbase.NewMutateRowArgs()
		err1797 := containerStruct3.ReadField4(jsProt1796)
		if err1797 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.MutateRow(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "mutateRowTs":
		if flag.NArg()-1 != 5 {
			fmt.Fprint(os.Stderr, "MutateRowTs requires 5 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg1800 := flag.Arg(3)
		mbTrans1801 := thrift.NewTMemoryBufferLen(len(arg1800))
		defer mbTrans1801.Close()
		_, err1802 := mbTrans1801.WriteString(arg1800)
		if err1802 != nil {
			Usage()
			return
		}
		factory1803 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1804 := factory1803.GetProtocol(mbTrans1801)
		containerStruct2 := Hbase.NewMutateRowTsArgs()
		err1805 := containerStruct2.ReadField3(jsProt1804)
		if err1805 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Mutations
		value2 := argvalue2
		argvalue3, err1806 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err1806 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg1807 := flag.Arg(5)
		mbTrans1808 := thrift.NewTMemoryBufferLen(len(arg1807))
		defer mbTrans1808.Close()
		_, err1809 := mbTrans1808.WriteString(arg1807)
		if err1809 != nil {
			Usage()
			return
		}
		factory1810 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1811 := factory1810.GetProtocol(mbTrans1808)
		containerStruct4 := Hbase.NewMutateRowTsArgs()
		err1812 := containerStruct4.ReadField5(jsProt1811)
		if err1812 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.MutateRowTs(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "mutateRows":
		if flag.NArg()-1 != 3 {
			fmt.Fprint(os.Stderr, "MutateRows requires 3 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg1814 := flag.Arg(2)
		mbTrans1815 := thrift.NewTMemoryBufferLen(len(arg1814))
		defer mbTrans1815.Close()
		_, err1816 := mbTrans1815.WriteString(arg1814)
		if err1816 != nil {
			Usage()
			return
		}
		factory1817 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1818 := factory1817.GetProtocol(mbTrans1815)
		containerStruct1 := Hbase.NewMutateRowsArgs()
		err1819 := containerStruct1.ReadField2(jsProt1818)
		if err1819 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.RowBatches
		value1 := argvalue1
		arg1820 := flag.Arg(3)
		mbTrans1821 := thrift.NewTMemoryBufferLen(len(arg1820))
		defer mbTrans1821.Close()
		_, err1822 := mbTrans1821.WriteString(arg1820)
		if err1822 != nil {
			Usage()
			return
		}
		factory1823 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1824 := factory1823.GetProtocol(mbTrans1821)
		containerStruct2 := Hbase.NewMutateRowsArgs()
		err1825 := containerStruct2.ReadField3(jsProt1824)
		if err1825 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Attributes
		value2 := argvalue2
		fmt.Print(client.MutateRows(value0, value1, value2))
		fmt.Print("\n")
		break
	case "mutateRowsTs":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "MutateRowsTs requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg1827 := flag.Arg(2)
		mbTrans1828 := thrift.NewTMemoryBufferLen(len(arg1827))
		defer mbTrans1828.Close()
		_, err1829 := mbTrans1828.WriteString(arg1827)
		if err1829 != nil {
			Usage()
			return
		}
		factory1830 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1831 := factory1830.GetProtocol(mbTrans1828)
		containerStruct1 := Hbase.NewMutateRowsTsArgs()
		err1832 := containerStruct1.ReadField2(jsProt1831)
		if err1832 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.RowBatches
		value1 := argvalue1
		argvalue2, err1833 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err1833 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg1834 := flag.Arg(4)
		mbTrans1835 := thrift.NewTMemoryBufferLen(len(arg1834))
		defer mbTrans1835.Close()
		_, err1836 := mbTrans1835.WriteString(arg1834)
		if err1836 != nil {
			Usage()
			return
		}
		factory1837 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1838 := factory1837.GetProtocol(mbTrans1835)
		containerStruct3 := Hbase.NewMutateRowsTsArgs()
		err1839 := containerStruct3.ReadField4(jsProt1838)
		if err1839 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.MutateRowsTs(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "atomicIncrement":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "AtomicIncrement requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		argvalue3, err1843 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err1843 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AtomicIncrement(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "deleteAll":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "DeleteAll requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		arg1847 := flag.Arg(4)
		mbTrans1848 := thrift.NewTMemoryBufferLen(len(arg1847))
		defer mbTrans1848.Close()
		_, err1849 := mbTrans1848.WriteString(arg1847)
		if err1849 != nil {
			Usage()
			return
		}
		factory1850 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1851 := factory1850.GetProtocol(mbTrans1848)
		containerStruct3 := Hbase.NewDeleteAllArgs()
		err1852 := containerStruct3.ReadField4(jsProt1851)
		if err1852 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.DeleteAll(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "deleteAllTs":
		if flag.NArg()-1 != 5 {
			fmt.Fprint(os.Stderr, "DeleteAllTs requires 5 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		argvalue3, err1856 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err1856 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg1857 := flag.Arg(5)
		mbTrans1858 := thrift.NewTMemoryBufferLen(len(arg1857))
		defer mbTrans1858.Close()
		_, err1859 := mbTrans1858.WriteString(arg1857)
		if err1859 != nil {
			Usage()
			return
		}
		factory1860 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1861 := factory1860.GetProtocol(mbTrans1858)
		containerStruct4 := Hbase.NewDeleteAllTsArgs()
		err1862 := containerStruct4.ReadField5(jsProt1861)
		if err1862 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.DeleteAllTs(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "deleteAllRow":
		if flag.NArg()-1 != 3 {
			fmt.Fprint(os.Stderr, "DeleteAllRow requires 3 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg1865 := flag.Arg(3)
		mbTrans1866 := thrift.NewTMemoryBufferLen(len(arg1865))
		defer mbTrans1866.Close()
		_, err1867 := mbTrans1866.WriteString(arg1865)
		if err1867 != nil {
			Usage()
			return
		}
		factory1868 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1869 := factory1868.GetProtocol(mbTrans1866)
		containerStruct2 := Hbase.NewDeleteAllRowArgs()
		err1870 := containerStruct2.ReadField3(jsProt1869)
		if err1870 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Attributes
		value2 := argvalue2
		fmt.Print(client.DeleteAllRow(value0, value1, value2))
		fmt.Print("\n")
		break
	case "increment":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "Increment requires 1 args\n")
			flag.Usage()
		}
		arg1871 := flag.Arg(1)
		mbTrans1872 := thrift.NewTMemoryBufferLen(len(arg1871))
		defer mbTrans1872.Close()
		_, err1873 := mbTrans1872.WriteString(arg1871)
		if err1873 != nil {
			Usage()
			return
		}
		factory1874 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1875 := factory1874.GetProtocol(mbTrans1872)
		argvalue0 := Hbase.NewTIncrement()
		err1876 := argvalue0.Read(jsProt1875)
		if err1876 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Increment(value0))
		fmt.Print("\n")
		break
	case "incrementRows":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "IncrementRows requires 1 args\n")
			flag.Usage()
		}
		arg1877 := flag.Arg(1)
		mbTrans1878 := thrift.NewTMemoryBufferLen(len(arg1877))
		defer mbTrans1878.Close()
		_, err1879 := mbTrans1878.WriteString(arg1877)
		if err1879 != nil {
			Usage()
			return
		}
		factory1880 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1881 := factory1880.GetProtocol(mbTrans1878)
		containerStruct0 := Hbase.NewIncrementRowsArgs()
		err1882 := containerStruct0.ReadField1(jsProt1881)
		if err1882 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Increments
		value0 := argvalue0
		fmt.Print(client.IncrementRows(value0))
		fmt.Print("\n")
		break
	case "deleteAllRowTs":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "DeleteAllRowTs requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2, err1885 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err1885 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg1886 := flag.Arg(4)
		mbTrans1887 := thrift.NewTMemoryBufferLen(len(arg1886))
		defer mbTrans1887.Close()
		_, err1888 := mbTrans1887.WriteString(arg1886)
		if err1888 != nil {
			Usage()
			return
		}
		factory1889 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1890 := factory1889.GetProtocol(mbTrans1887)
		containerStruct3 := Hbase.NewDeleteAllRowTsArgs()
		err1891 := containerStruct3.ReadField4(jsProt1890)
		if err1891 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.DeleteAllRowTs(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "scannerOpenWithScan":
		if flag.NArg()-1 != 3 {
			fmt.Fprint(os.Stderr, "ScannerOpenWithScan requires 3 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg1893 := flag.Arg(2)
		mbTrans1894 := thrift.NewTMemoryBufferLen(len(arg1893))
		defer mbTrans1894.Close()
		_, err1895 := mbTrans1894.WriteString(arg1893)
		if err1895 != nil {
			Usage()
			return
		}
		factory1896 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1897 := factory1896.GetProtocol(mbTrans1894)
		argvalue1 := Hbase.NewTScan()
		err1898 := argvalue1.Read(jsProt1897)
		if err1898 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg1899 := flag.Arg(3)
		mbTrans1900 := thrift.NewTMemoryBufferLen(len(arg1899))
		defer mbTrans1900.Close()
		_, err1901 := mbTrans1900.WriteString(arg1899)
		if err1901 != nil {
			Usage()
			return
		}
		factory1902 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1903 := factory1902.GetProtocol(mbTrans1900)
		containerStruct2 := Hbase.NewScannerOpenWithScanArgs()
		err1904 := containerStruct2.ReadField3(jsProt1903)
		if err1904 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Attributes
		value2 := argvalue2
		fmt.Print(client.ScannerOpenWithScan(value0, value1, value2))
		fmt.Print("\n")
		break
	case "scannerOpen":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "ScannerOpen requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg1907 := flag.Arg(3)
		mbTrans1908 := thrift.NewTMemoryBufferLen(len(arg1907))
		defer mbTrans1908.Close()
		_, err1909 := mbTrans1908.WriteString(arg1907)
		if err1909 != nil {
			Usage()
			return
		}
		factory1910 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1911 := factory1910.GetProtocol(mbTrans1908)
		containerStruct2 := Hbase.NewScannerOpenArgs()
		err1912 := containerStruct2.ReadField3(jsProt1911)
		if err1912 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		arg1913 := flag.Arg(4)
		mbTrans1914 := thrift.NewTMemoryBufferLen(len(arg1913))
		defer mbTrans1914.Close()
		_, err1915 := mbTrans1914.WriteString(arg1913)
		if err1915 != nil {
			Usage()
			return
		}
		factory1916 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1917 := factory1916.GetProtocol(mbTrans1914)
		containerStruct3 := Hbase.NewScannerOpenArgs()
		err1918 := containerStruct3.ReadField4(jsProt1917)
		if err1918 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.ScannerOpen(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "scannerOpenWithStop":
		if flag.NArg()-1 != 5 {
			fmt.Fprint(os.Stderr, "ScannerOpenWithStop requires 5 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		arg1922 := flag.Arg(4)
		mbTrans1923 := thrift.NewTMemoryBufferLen(len(arg1922))
		defer mbTrans1923.Close()
		_, err1924 := mbTrans1923.WriteString(arg1922)
		if err1924 != nil {
			Usage()
			return
		}
		factory1925 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1926 := factory1925.GetProtocol(mbTrans1923)
		containerStruct3 := Hbase.NewScannerOpenWithStopArgs()
		err1927 := containerStruct3.ReadField4(jsProt1926)
		if err1927 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Columns
		value3 := argvalue3
		arg1928 := flag.Arg(5)
		mbTrans1929 := thrift.NewTMemoryBufferLen(len(arg1928))
		defer mbTrans1929.Close()
		_, err1930 := mbTrans1929.WriteString(arg1928)
		if err1930 != nil {
			Usage()
			return
		}
		factory1931 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1932 := factory1931.GetProtocol(mbTrans1929)
		containerStruct4 := Hbase.NewScannerOpenWithStopArgs()
		err1933 := containerStruct4.ReadField5(jsProt1932)
		if err1933 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.ScannerOpenWithStop(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "scannerOpenWithPrefix":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "ScannerOpenWithPrefix requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg1936 := flag.Arg(3)
		mbTrans1937 := thrift.NewTMemoryBufferLen(len(arg1936))
		defer mbTrans1937.Close()
		_, err1938 := mbTrans1937.WriteString(arg1936)
		if err1938 != nil {
			Usage()
			return
		}
		factory1939 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1940 := factory1939.GetProtocol(mbTrans1937)
		containerStruct2 := Hbase.NewScannerOpenWithPrefixArgs()
		err1941 := containerStruct2.ReadField3(jsProt1940)
		if err1941 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		arg1942 := flag.Arg(4)
		mbTrans1943 := thrift.NewTMemoryBufferLen(len(arg1942))
		defer mbTrans1943.Close()
		_, err1944 := mbTrans1943.WriteString(arg1942)
		if err1944 != nil {
			Usage()
			return
		}
		factory1945 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1946 := factory1945.GetProtocol(mbTrans1943)
		containerStruct3 := Hbase.NewScannerOpenWithPrefixArgs()
		err1947 := containerStruct3.ReadField4(jsProt1946)
		if err1947 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.ScannerOpenWithPrefix(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "scannerOpenTs":
		if flag.NArg()-1 != 5 {
			fmt.Fprint(os.Stderr, "ScannerOpenTs requires 5 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg1950 := flag.Arg(3)
		mbTrans1951 := thrift.NewTMemoryBufferLen(len(arg1950))
		defer mbTrans1951.Close()
		_, err1952 := mbTrans1951.WriteString(arg1950)
		if err1952 != nil {
			Usage()
			return
		}
		factory1953 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1954 := factory1953.GetProtocol(mbTrans1951)
		containerStruct2 := Hbase.NewScannerOpenTsArgs()
		err1955 := containerStruct2.ReadField3(jsProt1954)
		if err1955 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		argvalue3, err1956 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err1956 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg1957 := flag.Arg(5)
		mbTrans1958 := thrift.NewTMemoryBufferLen(len(arg1957))
		defer mbTrans1958.Close()
		_, err1959 := mbTrans1958.WriteString(arg1957)
		if err1959 != nil {
			Usage()
			return
		}
		factory1960 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1961 := factory1960.GetProtocol(mbTrans1958)
		containerStruct4 := Hbase.NewScannerOpenTsArgs()
		err1962 := containerStruct4.ReadField5(jsProt1961)
		if err1962 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.ScannerOpenTs(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "scannerOpenWithStopTs":
		if flag.NArg()-1 != 6 {
			fmt.Fprint(os.Stderr, "ScannerOpenWithStopTs requires 6 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		arg1966 := flag.Arg(4)
		mbTrans1967 := thrift.NewTMemoryBufferLen(len(arg1966))
		defer mbTrans1967.Close()
		_, err1968 := mbTrans1967.WriteString(arg1966)
		if err1968 != nil {
			Usage()
			return
		}
		factory1969 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1970 := factory1969.GetProtocol(mbTrans1967)
		containerStruct3 := Hbase.NewScannerOpenWithStopTsArgs()
		err1971 := containerStruct3.ReadField4(jsProt1970)
		if err1971 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Columns
		value3 := argvalue3
		argvalue4, err1972 := (strconv.ParseInt(flag.Arg(5), 10, 64))
		if err1972 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		arg1973 := flag.Arg(6)
		mbTrans1974 := thrift.NewTMemoryBufferLen(len(arg1973))
		defer mbTrans1974.Close()
		_, err1975 := mbTrans1974.WriteString(arg1973)
		if err1975 != nil {
			Usage()
			return
		}
		factory1976 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1977 := factory1976.GetProtocol(mbTrans1974)
		containerStruct5 := Hbase.NewScannerOpenWithStopTsArgs()
		err1978 := containerStruct5.ReadField6(jsProt1977)
		if err1978 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.Attributes
		value5 := argvalue5
		fmt.Print(client.ScannerOpenWithStopTs(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "scannerGet":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "ScannerGet requires 1 args\n")
			flag.Usage()
		}
		tmp0, err1979 := (strconv.Atoi(flag.Arg(1)))
		if err1979 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := Hbase.ScannerID(argvalue0)
		fmt.Print(client.ScannerGet(value0))
		fmt.Print("\n")
		break
	case "scannerGetList":
		if flag.NArg()-1 != 2 {
			fmt.Fprint(os.Stderr, "ScannerGetList requires 2 args\n")
			flag.Usage()
		}
		tmp0, err1980 := (strconv.Atoi(flag.Arg(1)))
		if err1980 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := Hbase.ScannerID(argvalue0)
		tmp1, err1981 := (strconv.Atoi(flag.Arg(2)))
		if err1981 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.ScannerGetList(value0, value1))
		fmt.Print("\n")
		break
	case "scannerClose":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "ScannerClose requires 1 args\n")
			flag.Usage()
		}
		tmp0, err1982 := (strconv.Atoi(flag.Arg(1)))
		if err1982 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := Hbase.ScannerID(argvalue0)
		fmt.Print(client.ScannerClose(value0))
		fmt.Print("\n")
		break
	case "getRowOrBefore":
		if flag.NArg()-1 != 3 {
			fmt.Fprint(os.Stderr, "GetRowOrBefore requires 3 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		fmt.Print(client.GetRowOrBefore(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getRegionInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "GetRegionInfo requires 1 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		fmt.Print(client.GetRegionInfo(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
	}
}
