/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package Hbase

import (
	"fmt"
	"math"
	"thrift"
)

// This is a temporary safety measure to ensure that the `math'
// import does not trip up any generated output that may not
// happen to use the math import due to not having emited enums.
//
// Future clean-ups will deprecate the need for this.
func init() {
	var temporaryAndUnused int32 = math.MinInt32
	temporaryAndUnused++
}

type IHbase interface {
	/**
	 * Brings a table on-line (enables it)
	 * 
	 * Parameters:
	 *  - TableName: name of the table
	 */
	EnableTable(tableName Bytes) (io *IOError, err error)
	/**
	 * Disables a table (takes it off-line) If it is being served, the master
	 * will tell the servers to stop serving it.
	 * 
	 * Parameters:
	 *  - TableName: name of the table
	 */
	DisableTable(tableName Bytes) (io *IOError, err error)
	/**
	 * @return true if table is on-line
	 * 
	 * Parameters:
	 *  - TableName: name of the table to check
	 */
	IsTableEnabled(tableName Bytes) (retval116 bool, io *IOError, err error)
	/**
	 * Parameters:
	 *  - TableNameOrRegionName
	 */
	Compact(tableNameOrRegionName Bytes) (io *IOError, err error)
	/**
	 * Parameters:
	 *  - TableNameOrRegionName
	 */
	MajorCompact(tableNameOrRegionName Bytes) (io *IOError, err error)
	/**
	 * List all the userspace tables.
	 * 
	 * @return returns a list of names
	 */
	GetTableNames() (retval119 thrift.TList, io *IOError, err error)
	/**
	 * List all the column families assoicated with a table.
	 * 
	 * @return list of column family descriptors
	 * 
	 * Parameters:
	 *  - TableName: table name
	 */
	GetColumnDescriptors(tableName Text) (retval120 thrift.TMap, io *IOError, err error)
	/**
	 * List the regions associated with a table.
	 * 
	 * @return list of region descriptors
	 * 
	 * Parameters:
	 *  - TableName: table name
	 */
	GetTableRegions(tableName Text) (retval121 thrift.TList, io *IOError, err error)
	/**
	 * Create a table with the specified column families.  The name
	 * field for each ColumnDescriptor must be set and must end in a
	 * colon (:). All other fields are optional and will get default
	 * values if not explicitly specified.
	 * 
	 * @throws IllegalArgument if an input parameter is invalid
	 * 
	 * @throws AlreadyExists if the table name already exists
	 * 
	 * Parameters:
	 *  - TableName: name of table to create
	 *  - ColumnFamilies: list of column family descriptors
	 */
	CreateTable(tableName Text, columnFamilies thrift.TList) (io *IOError, ia *IllegalArgument, exist *AlreadyExists, err error)
	/**
	 * Deletes a table
	 * 
	 * @throws IOError if table doesn't exist on server or there was some other
	 * problem
	 * 
	 * Parameters:
	 *  - TableName: name of table to delete
	 */
	DeleteTable(tableName Text) (io *IOError, err error)
	/**
	 * Get a single TCell for the specified table, row, and column at the
	 * latest timestamp. Returns an empty list if no such value exists.
	 * 
	 * @return value for specified row/column
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Column: column name
	 *  - Attributes: Get attributes
	 */
	Get(tableName Text, row Text, column Text, attributes thrift.TMap) (retval124 thrift.TList, io *IOError, err error)
	/**
	 * Get the specified number of versions for the specified table,
	 * row, and column.
	 * 
	 * @return list of cells for specified row/column
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Column: column name
	 *  - NumVersions: number of versions to retrieve
	 *  - Attributes: Get attributes
	 */
	GetVer(tableName Text, row Text, column Text, numVersions int32, attributes thrift.TMap) (retval125 thrift.TList, io *IOError, err error)
	/**
	 * Get the specified number of versions for the specified table,
	 * row, and column.  Only versions less than or equal to the specified
	 * timestamp will be returned.
	 * 
	 * @return list of cells for specified row/column
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Column: column name
	 *  - Timestamp: timestamp
	 *  - NumVersions: number of versions to retrieve
	 *  - Attributes: Get attributes
	 */
	GetVerTs(tableName Text, row Text, column Text, timestamp int64, numVersions int32, attributes thrift.TMap) (retval126 thrift.TList, io *IOError, err error)
	/**
	 * Get all the data for the specified table and row at the latest
	 * timestamp. Returns an empty list if the row does not exist.
	 * 
	 * @return TRowResult containing the row and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Attributes: Get attributes
	 */
	GetRow(tableName Text, row Text, attributes thrift.TMap) (retval127 thrift.TList, io *IOError, err error)
	/**
	 * Get the specified columns for the specified table and row at the latest
	 * timestamp. Returns an empty list if the row does not exist.
	 * 
	 * @return TRowResult containing the row and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Columns: List of columns to return, null for all columns
	 *  - Attributes: Get attributes
	 */
	GetRowWithColumns(tableName Text, row Text, columns thrift.TList, attributes thrift.TMap) (retval128 thrift.TList, io *IOError, err error)
	/**
	 * Get all the data for the specified table and row at the specified
	 * timestamp. Returns an empty list if the row does not exist.
	 * 
	 * @return TRowResult containing the row and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of the table
	 *  - Row: row key
	 *  - Timestamp: timestamp
	 *  - Attributes: Get attributes
	 */
	GetRowTs(tableName Text, row Text, timestamp int64, attributes thrift.TMap) (retval129 thrift.TList, io *IOError, err error)
	/**
	 * Get the specified columns for the specified table and row at the specified
	 * timestamp. Returns an empty list if the row does not exist.
	 * 
	 * @return TRowResult containing the row and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Columns: List of columns to return, null for all columns
	 *  - Timestamp
	 *  - Attributes: Get attributes
	 */
	GetRowWithColumnsTs(tableName Text, row Text, columns thrift.TList, timestamp int64, attributes thrift.TMap) (retval130 thrift.TList, io *IOError, err error)
	/**
	 * Get all the data for the specified table and rows at the latest
	 * timestamp. Returns an empty list if no rows exist.
	 * 
	 * @return TRowResult containing the rows and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Rows: row keys
	 *  - Attributes: Get attributes
	 */
	GetRows(tableName Text, rows thrift.TList, attributes thrift.TMap) (retval131 thrift.TList, io *IOError, err error)
	/**
	 * Get the specified columns for the specified table and rows at the latest
	 * timestamp. Returns an empty list if no rows exist.
	 * 
	 * @return TRowResult containing the rows and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Rows: row keys
	 *  - Columns: List of columns to return, null for all columns
	 *  - Attributes: Get attributes
	 */
	GetRowsWithColumns(tableName Text, rows thrift.TList, columns thrift.TList, attributes thrift.TMap) (retval132 thrift.TList, io *IOError, err error)
	/**
	 * Get all the data for the specified table and rows at the specified
	 * timestamp. Returns an empty list if no rows exist.
	 * 
	 * @return TRowResult containing the rows and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of the table
	 *  - Rows: row keys
	 *  - Timestamp: timestamp
	 *  - Attributes: Get attributes
	 */
	GetRowsTs(tableName Text, rows thrift.TList, timestamp int64, attributes thrift.TMap) (retval133 thrift.TList, io *IOError, err error)
	/**
	 * Get the specified columns for the specified table and rows at the specified
	 * timestamp. Returns an empty list if no rows exist.
	 * 
	 * @return TRowResult containing the rows and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Rows: row keys
	 *  - Columns: List of columns to return, null for all columns
	 *  - Timestamp
	 *  - Attributes: Get attributes
	 */
	GetRowsWithColumnsTs(tableName Text, rows thrift.TList, columns thrift.TList, timestamp int64, attributes thrift.TMap) (retval134 thrift.TList, io *IOError, err error)
	/**
	 * Apply a series of mutations (updates/deletes) to a row in a
	 * single transaction.  If an exception is thrown, then the
	 * transaction is aborted.  Default current timestamp is used, and
	 * all entries will have an identical timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Mutations: list of mutation commands
	 *  - Attributes: Mutation attributes
	 */
	MutateRow(tableName Text, row Text, mutations thrift.TList, attributes thrift.TMap) (io *IOError, ia *IllegalArgument, err error)
	/**
	 * Apply a series of mutations (updates/deletes) to a row in a
	 * single transaction.  If an exception is thrown, then the
	 * transaction is aborted.  The specified timestamp is used, and
	 * all entries will have an identical timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Mutations: list of mutation commands
	 *  - Timestamp: timestamp
	 *  - Attributes: Mutation attributes
	 */
	MutateRowTs(tableName Text, row Text, mutations thrift.TList, timestamp int64, attributes thrift.TMap) (io *IOError, ia *IllegalArgument, err error)
	/**
	 * Apply a series of batches (each a series of mutations on a single row)
	 * in a single transaction.  If an exception is thrown, then the
	 * transaction is aborted.  Default current timestamp is used, and
	 * all entries will have an identical timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - RowBatches: list of row batches
	 *  - Attributes: Mutation attributes
	 */
	MutateRows(tableName Text, rowBatches thrift.TList, attributes thrift.TMap) (io *IOError, ia *IllegalArgument, err error)
	/**
	 * Apply a series of batches (each a series of mutations on a single row)
	 * in a single transaction.  If an exception is thrown, then the
	 * transaction is aborted.  The specified timestamp is used, and
	 * all entries will have an identical timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - RowBatches: list of row batches
	 *  - Timestamp: timestamp
	 *  - Attributes: Mutation attributes
	 */
	MutateRowsTs(tableName Text, rowBatches thrift.TList, timestamp int64, attributes thrift.TMap) (io *IOError, ia *IllegalArgument, err error)
	/**
	 * Atomically increment the column value specified.  Returns the next value post increment.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row to increment
	 *  - Column: name of column
	 *  - Value: amount to increment by
	 */
	AtomicIncrement(tableName Text, row Text, column Text, value int64) (retval139 int64, io *IOError, ia *IllegalArgument, err error)
	/**
	 * Delete all cells that match the passed row and column.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: Row to update
	 *  - Column: name of column whose value is to be deleted
	 *  - Attributes: Delete attributes
	 */
	DeleteAll(tableName Text, row Text, column Text, attributes thrift.TMap) (io *IOError, err error)
	/**
	 * Delete all cells that match the passed row and column and whose
	 * timestamp is equal-to or older than the passed timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: Row to update
	 *  - Column: name of column whose value is to be deleted
	 *  - Timestamp: timestamp
	 *  - Attributes: Delete attributes
	 */
	DeleteAllTs(tableName Text, row Text, column Text, timestamp int64, attributes thrift.TMap) (io *IOError, err error)
	/**
	 * Completely delete the row's cells.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: key of the row to be completely deleted.
	 *  - Attributes: Delete attributes
	 */
	DeleteAllRow(tableName Text, row Text, attributes thrift.TMap) (io *IOError, err error)
	/**
	 * Increment a cell by the ammount.
	 * Increments can be applied async if hbase.regionserver.thrift.coalesceIncrement is set to true.
	 * False is the default.  Turn to true if you need the extra performance and can accept some
	 * data loss if a thrift server dies with increments still in the queue.
	 * 
	 * Parameters:
	 *  - Increment: The single increment to apply
	 */
	Increment(increment *TIncrement) (io *IOError, err error)
	/**
	 * Parameters:
	 *  - Increments: The list of increments
	 */
	IncrementRows(increments thrift.TList) (io *IOError, err error)
	/**
	 * Completely delete the row's cells marked with a timestamp
	 * equal-to or older than the passed timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: key of the row to be completely deleted.
	 *  - Timestamp: timestamp
	 *  - Attributes: Delete attributes
	 */
	DeleteAllRowTs(tableName Text, row Text, timestamp int64, attributes thrift.TMap) (io *IOError, err error)
	/**
	 * Get a scanner on the current table, using the Scan instance
	 * for the scan parameters.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Scan: Scan instance
	 *  - Attributes: Scan attributes
	 */
	ScannerOpenWithScan(tableName Text, scan *TScan, attributes thrift.TMap) (retval146 ScannerID, io *IOError, err error)
	/**
	 * Get a scanner on the current table starting at the specified row and
	 * ending at the last row in the table.  Return the specified columns.
	 * 
	 * @return scanner id to be used with other scanner procedures
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - StartRow: Starting row in table to scan.
	 * Send "" (empty string) to start at the first row.
	 *  - Columns: columns to scan. If column name is a column family, all
	 * columns of the specified column family are returned. It's also possible
	 * to pass a regex in the column qualifier.
	 *  - Attributes: Scan attributes
	 */
	ScannerOpen(tableName Text, startRow Text, columns thrift.TList, attributes thrift.TMap) (retval147 ScannerID, io *IOError, err error)
	/**
	 * Get a scanner on the current table starting and stopping at the
	 * specified rows.  ending at the last row in the table.  Return the
	 * specified columns.
	 * 
	 * @return scanner id to be used with other scanner procedures
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - StartRow: Starting row in table to scan.
	 * Send "" (empty string) to start at the first row.
	 *  - StopRow: row to stop scanning on. This row is *not* included in the
	 * scanner's results
	 *  - Columns: columns to scan. If column name is a column family, all
	 * columns of the specified column family are returned. It's also possible
	 * to pass a regex in the column qualifier.
	 *  - Attributes: Scan attributes
	 */
	ScannerOpenWithStop(tableName Text, startRow Text, stopRow Text, columns thrift.TList, attributes thrift.TMap) (retval148 ScannerID, io *IOError, err error)
	/**
	 * Open a scanner for a given prefix.  That is all rows will have the specified
	 * prefix. No other rows will be returned.
	 * 
	 * @return scanner id to use with other scanner calls
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - StartAndPrefix: the prefix (and thus start row) of the keys you want
	 *  - Columns: the columns you want returned
	 *  - Attributes: Scan attributes
	 */
	ScannerOpenWithPrefix(tableName Text, startAndPrefix Text, columns thrift.TList, attributes thrift.TMap) (retval149 ScannerID, io *IOError, err error)
	/**
	 * Get a scanner on the current table starting at the specified row and
	 * ending at the last row in the table.  Return the specified columns.
	 * Only values with the specified timestamp are returned.
	 * 
	 * @return scanner id to be used with other scanner procedures
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - StartRow: Starting row in table to scan.
	 * Send "" (empty string) to start at the first row.
	 *  - Columns: columns to scan. If column name is a column family, all
	 * columns of the specified column family are returned. It's also possible
	 * to pass a regex in the column qualifier.
	 *  - Timestamp: timestamp
	 *  - Attributes: Scan attributes
	 */
	ScannerOpenTs(tableName Text, startRow Text, columns thrift.TList, timestamp int64, attributes thrift.TMap) (retval150 ScannerID, io *IOError, err error)
	/**
	 * Get a scanner on the current table starting and stopping at the
	 * specified rows.  ending at the last row in the table.  Return the
	 * specified columns.  Only values with the specified timestamp are
	 * returned.
	 * 
	 * @return scanner id to be used with other scanner procedures
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - StartRow: Starting row in table to scan.
	 * Send "" (empty string) to start at the first row.
	 *  - StopRow: row to stop scanning on. This row is *not* included in the
	 * scanner's results
	 *  - Columns: columns to scan. If column name is a column family, all
	 * columns of the specified column family are returned. It's also possible
	 * to pass a regex in the column qualifier.
	 *  - Timestamp: timestamp
	 *  - Attributes: Scan attributes
	 */
	ScannerOpenWithStopTs(tableName Text, startRow Text, stopRow Text, columns thrift.TList, timestamp int64, attributes thrift.TMap) (retval151 ScannerID, io *IOError, err error)
	/**
	 * Returns the scanner's current row value and advances to the next
	 * row in the table.  When there are no more rows in the table, or a key
	 * greater-than-or-equal-to the scanner's specified stopRow is reached,
	 * an empty list is returned.
	 * 
	 * @return a TRowResult containing the current row and a map of the columns to TCells.
	 * 
	 * @throws IllegalArgument if ScannerID is invalid
	 * 
	 * @throws NotFound when the scanner reaches the end
	 * 
	 * Parameters:
	 *  - Id: id of a scanner returned by scannerOpen
	 */
	ScannerGet(id ScannerID) (retval152 thrift.TList, io *IOError, ia *IllegalArgument, err error)
	/**
	 * Returns, starting at the scanner's current row value nbRows worth of
	 * rows and advances to the next row in the table.  When there are no more
	 * rows in the table, or a key greater-than-or-equal-to the scanner's
	 * specified stopRow is reached,  an empty list is returned.
	 * 
	 * @return a TRowResult containing the current row and a map of the columns to TCells.
	 * 
	 * @throws IllegalArgument if ScannerID is invalid
	 * 
	 * @throws NotFound when the scanner reaches the end
	 * 
	 * Parameters:
	 *  - Id: id of a scanner returned by scannerOpen
	 *  - NbRows: number of results to return
	 */
	ScannerGetList(id ScannerID, nbRows int32) (retval153 thrift.TList, io *IOError, ia *IllegalArgument, err error)
	/**
	 * Closes the server-state associated with an open scanner.
	 * 
	 * @throws IllegalArgument if ScannerID is invalid
	 * 
	 * Parameters:
	 *  - Id: id of a scanner returned by scannerOpen
	 */
	ScannerClose(id ScannerID) (io *IOError, ia *IllegalArgument, err error)
	/**
	 * Get the row just before the specified one.
	 * 
	 * @return value for specified row/column
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Family: column name
	 */
	GetRowOrBefore(tableName Text, row Text, family Text) (retval155 thrift.TList, io *IOError, err error)
	/**
	 * Get the regininfo for the specified row. It scans
	 * the metatable to find region's start and end keys.
	 * 
	 * @return value for specified row/column
	 * 
	 * Parameters:
	 *  - Row: row key
	 */
	GetRegionInfo(row Text) (retval156 *TRegionInfo, io *IOError, err error)
}

type HbaseClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewHbaseClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HbaseClient {
	return &HbaseClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewHbaseClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HbaseClient {
	return &HbaseClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

/**
 * Brings a table on-line (enables it)
 * 
 * Parameters:
 *  - TableName: name of the table
 */
func (p *HbaseClient) EnableTable(tableName Bytes) (io *IOError, err error) {
	err = p.SendEnableTable(tableName)
	if err != nil {
		return
	}
	return p.RecvEnableTable()
}

func (p *HbaseClient) SendEnableTable(tableName Bytes) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("enableTable", thrift.CALL, p.SeqId)
	args158 := NewEnableTableArgs()
	args158.TableName = tableName
	err = args158.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvEnableTable() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error160 := thrift.NewTApplicationExceptionDefault()
		var error161 error
		error161, err = error160.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error161
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result159 := NewEnableTableResult()
	err = result159.Read(iprot)
	iprot.ReadMessageEnd()
	if result159.Io != nil {
		io = result159.Io
	}
	return
}

/**
 * Disables a table (takes it off-line) If it is being served, the master
 * will tell the servers to stop serving it.
 * 
 * Parameters:
 *  - TableName: name of the table
 */
func (p *HbaseClient) DisableTable(tableName Bytes) (io *IOError, err error) {
	err = p.SendDisableTable(tableName)
	if err != nil {
		return
	}
	return p.RecvDisableTable()
}

func (p *HbaseClient) SendDisableTable(tableName Bytes) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("disableTable", thrift.CALL, p.SeqId)
	args163 := NewDisableTableArgs()
	args163.TableName = tableName
	err = args163.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDisableTable() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error165 := thrift.NewTApplicationExceptionDefault()
		var error166 error
		error166, err = error165.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error166
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result164 := NewDisableTableResult()
	err = result164.Read(iprot)
	iprot.ReadMessageEnd()
	if result164.Io != nil {
		io = result164.Io
	}
	return
}

/**
 * @return true if table is on-line
 * 
 * Parameters:
 *  - TableName: name of the table to check
 */
func (p *HbaseClient) IsTableEnabled(tableName Bytes) (retval167 bool, io *IOError, err error) {
	err = p.SendIsTableEnabled(tableName)
	if err != nil {
		return
	}
	return p.RecvIsTableEnabled()
}

func (p *HbaseClient) SendIsTableEnabled(tableName Bytes) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("isTableEnabled", thrift.CALL, p.SeqId)
	args168 := NewIsTableEnabledArgs()
	args168.TableName = tableName
	err = args168.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvIsTableEnabled() (value bool, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error170 := thrift.NewTApplicationExceptionDefault()
		var error171 error
		error171, err = error170.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error171
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result169 := NewIsTableEnabledResult()
	err = result169.Read(iprot)
	iprot.ReadMessageEnd()
	value = result169.Success
	if result169.Io != nil {
		io = result169.Io
	}
	return
}

/**
 * Parameters:
 *  - TableNameOrRegionName
 */
func (p *HbaseClient) Compact(tableNameOrRegionName Bytes) (io *IOError, err error) {
	err = p.SendCompact(tableNameOrRegionName)
	if err != nil {
		return
	}
	return p.RecvCompact()
}

func (p *HbaseClient) SendCompact(tableNameOrRegionName Bytes) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("compact", thrift.CALL, p.SeqId)
	args173 := NewCompactArgs()
	args173.TableNameOrRegionName = tableNameOrRegionName
	err = args173.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvCompact() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error175 := thrift.NewTApplicationExceptionDefault()
		var error176 error
		error176, err = error175.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error176
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result174 := NewCompactResult()
	err = result174.Read(iprot)
	iprot.ReadMessageEnd()
	if result174.Io != nil {
		io = result174.Io
	}
	return
}

/**
 * Parameters:
 *  - TableNameOrRegionName
 */
func (p *HbaseClient) MajorCompact(tableNameOrRegionName Bytes) (io *IOError, err error) {
	err = p.SendMajorCompact(tableNameOrRegionName)
	if err != nil {
		return
	}
	return p.RecvMajorCompact()
}

func (p *HbaseClient) SendMajorCompact(tableNameOrRegionName Bytes) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("majorCompact", thrift.CALL, p.SeqId)
	args178 := NewMajorCompactArgs()
	args178.TableNameOrRegionName = tableNameOrRegionName
	err = args178.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvMajorCompact() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error180 := thrift.NewTApplicationExceptionDefault()
		var error181 error
		error181, err = error180.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error181
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result179 := NewMajorCompactResult()
	err = result179.Read(iprot)
	iprot.ReadMessageEnd()
	if result179.Io != nil {
		io = result179.Io
	}
	return
}

/**
 * List all the userspace tables.
 * 
 * @return returns a list of names
 */
func (p *HbaseClient) GetTableNames() (retval182 thrift.TList, io *IOError, err error) {
	err = p.SendGetTableNames()
	if err != nil {
		return
	}
	return p.RecvGetTableNames()
}

func (p *HbaseClient) SendGetTableNames() (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getTableNames", thrift.CALL, p.SeqId)
	args183 := NewGetTableNamesArgs()
	err = args183.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetTableNames() (value thrift.TList, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error185 := thrift.NewTApplicationExceptionDefault()
		var error186 error
		error186, err = error185.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error186
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result184 := NewGetTableNamesResult()
	err = result184.Read(iprot)
	iprot.ReadMessageEnd()
	value = result184.Success
	if result184.Io != nil {
		io = result184.Io
	}
	return
}

/**
 * List all the column families assoicated with a table.
 * 
 * @return list of column family descriptors
 * 
 * Parameters:
 *  - TableName: table name
 */
func (p *HbaseClient) GetColumnDescriptors(tableName Text) (retval187 thrift.TMap, io *IOError, err error) {
	err = p.SendGetColumnDescriptors(tableName)
	if err != nil {
		return
	}
	return p.RecvGetColumnDescriptors()
}

func (p *HbaseClient) SendGetColumnDescriptors(tableName Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getColumnDescriptors", thrift.CALL, p.SeqId)
	args188 := NewGetColumnDescriptorsArgs()
	args188.TableName = tableName
	err = args188.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetColumnDescriptors() (value thrift.TMap, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error190 := thrift.NewTApplicationExceptionDefault()
		var error191 error
		error191, err = error190.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error191
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result189 := NewGetColumnDescriptorsResult()
	err = result189.Read(iprot)
	iprot.ReadMessageEnd()
	value = result189.Success
	if result189.Io != nil {
		io = result189.Io
	}
	return
}

/**
 * List the regions associated with a table.
 * 
 * @return list of region descriptors
 * 
 * Parameters:
 *  - TableName: table name
 */
func (p *HbaseClient) GetTableRegions(tableName Text) (retval192 thrift.TList, io *IOError, err error) {
	err = p.SendGetTableRegions(tableName)
	if err != nil {
		return
	}
	return p.RecvGetTableRegions()
}

func (p *HbaseClient) SendGetTableRegions(tableName Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getTableRegions", thrift.CALL, p.SeqId)
	args193 := NewGetTableRegionsArgs()
	args193.TableName = tableName
	err = args193.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetTableRegions() (value thrift.TList, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error195 := thrift.NewTApplicationExceptionDefault()
		var error196 error
		error196, err = error195.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error196
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result194 := NewGetTableRegionsResult()
	err = result194.Read(iprot)
	iprot.ReadMessageEnd()
	value = result194.Success
	if result194.Io != nil {
		io = result194.Io
	}
	return
}

/**
 * Create a table with the specified column families.  The name
 * field for each ColumnDescriptor must be set and must end in a
 * colon (:). All other fields are optional and will get default
 * values if not explicitly specified.
 * 
 * @throws IllegalArgument if an input parameter is invalid
 * 
 * @throws AlreadyExists if the table name already exists
 * 
 * Parameters:
 *  - TableName: name of table to create
 *  - ColumnFamilies: list of column family descriptors
 */
func (p *HbaseClient) CreateTable(tableName Text, columnFamilies thrift.TList) (io *IOError, ia *IllegalArgument, exist *AlreadyExists, err error) {
	err = p.SendCreateTable(tableName, columnFamilies)
	if err != nil {
		return
	}
	return p.RecvCreateTable()
}

func (p *HbaseClient) SendCreateTable(tableName Text, columnFamilies thrift.TList) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("createTable", thrift.CALL, p.SeqId)
	args198 := NewCreateTableArgs()
	args198.TableName = tableName
	args198.ColumnFamilies = columnFamilies
	err = args198.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvCreateTable() (io *IOError, ia *IllegalArgument, exist *AlreadyExists, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error200 := thrift.NewTApplicationExceptionDefault()
		var error201 error
		error201, err = error200.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error201
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result199 := NewCreateTableResult()
	err = result199.Read(iprot)
	iprot.ReadMessageEnd()
	if result199.Io != nil {
		io = result199.Io
	}
	if result199.Ia != nil {
		ia = result199.Ia
	}
	if result199.Exist != nil {
		exist = result199.Exist
	}
	return
}

/**
 * Deletes a table
 * 
 * @throws IOError if table doesn't exist on server or there was some other
 * problem
 * 
 * Parameters:
 *  - TableName: name of table to delete
 */
func (p *HbaseClient) DeleteTable(tableName Text) (io *IOError, err error) {
	err = p.SendDeleteTable(tableName)
	if err != nil {
		return
	}
	return p.RecvDeleteTable()
}

func (p *HbaseClient) SendDeleteTable(tableName Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteTable", thrift.CALL, p.SeqId)
	args203 := NewDeleteTableArgs()
	args203.TableName = tableName
	err = args203.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDeleteTable() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error205 := thrift.NewTApplicationExceptionDefault()
		var error206 error
		error206, err = error205.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error206
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result204 := NewDeleteTableResult()
	err = result204.Read(iprot)
	iprot.ReadMessageEnd()
	if result204.Io != nil {
		io = result204.Io
	}
	return
}

/**
 * Get a single TCell for the specified table, row, and column at the
 * latest timestamp. Returns an empty list if no such value exists.
 * 
 * @return value for specified row/column
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) Get(tableName Text, row Text, column Text, attributes thrift.TMap) (retval207 thrift.TList, io *IOError, err error) {
	err = p.SendGet(tableName, row, column, attributes)
	if err != nil {
		return
	}
	return p.RecvGet()
}

func (p *HbaseClient) SendGet(tableName Text, row Text, column Text, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId)
	args208 := NewGetArgs()
	args208.TableName = tableName
	args208.Row = row
	args208.Column = column
	args208.Attributes = attributes
	err = args208.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGet() (value thrift.TList, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error210 := thrift.NewTApplicationExceptionDefault()
		var error211 error
		error211, err = error210.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error211
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result209 := NewGetResult()
	err = result209.Read(iprot)
	iprot.ReadMessageEnd()
	value = result209.Success
	if result209.Io != nil {
		io = result209.Io
	}
	return
}

/**
 * Get the specified number of versions for the specified table,
 * row, and column.
 * 
 * @return list of cells for specified row/column
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - NumVersions: number of versions to retrieve
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetVer(tableName Text, row Text, column Text, numVersions int32, attributes thrift.TMap) (retval212 thrift.TList, io *IOError, err error) {
	err = p.SendGetVer(tableName, row, column, numVersions, attributes)
	if err != nil {
		return
	}
	return p.RecvGetVer()
}

func (p *HbaseClient) SendGetVer(tableName Text, row Text, column Text, numVersions int32, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getVer", thrift.CALL, p.SeqId)
	args213 := NewGetVerArgs()
	args213.TableName = tableName
	args213.Row = row
	args213.Column = column
	args213.NumVersions = numVersions
	args213.Attributes = attributes
	err = args213.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetVer() (value thrift.TList, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error215 := thrift.NewTApplicationExceptionDefault()
		var error216 error
		error216, err = error215.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error216
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result214 := NewGetVerResult()
	err = result214.Read(iprot)
	iprot.ReadMessageEnd()
	value = result214.Success
	if result214.Io != nil {
		io = result214.Io
	}
	return
}

/**
 * Get the specified number of versions for the specified table,
 * row, and column.  Only versions less than or equal to the specified
 * timestamp will be returned.
 * 
 * @return list of cells for specified row/column
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - Timestamp: timestamp
 *  - NumVersions: number of versions to retrieve
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetVerTs(tableName Text, row Text, column Text, timestamp int64, numVersions int32, attributes thrift.TMap) (retval217 thrift.TList, io *IOError, err error) {
	err = p.SendGetVerTs(tableName, row, column, timestamp, numVersions, attributes)
	if err != nil {
		return
	}
	return p.RecvGetVerTs()
}

func (p *HbaseClient) SendGetVerTs(tableName Text, row Text, column Text, timestamp int64, numVersions int32, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getVerTs", thrift.CALL, p.SeqId)
	args218 := NewGetVerTsArgs()
	args218.TableName = tableName
	args218.Row = row
	args218.Column = column
	args218.Timestamp = timestamp
	args218.NumVersions = numVersions
	args218.Attributes = attributes
	err = args218.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetVerTs() (value thrift.TList, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error220 := thrift.NewTApplicationExceptionDefault()
		var error221 error
		error221, err = error220.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error221
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result219 := NewGetVerTsResult()
	err = result219.Read(iprot)
	iprot.ReadMessageEnd()
	value = result219.Success
	if result219.Io != nil {
		io = result219.Io
	}
	return
}

/**
 * Get all the data for the specified table and row at the latest
 * timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRow(tableName Text, row Text, attributes thrift.TMap) (retval222 thrift.TList, io *IOError, err error) {
	err = p.SendGetRow(tableName, row, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRow()
}

func (p *HbaseClient) SendGetRow(tableName Text, row Text, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRow", thrift.CALL, p.SeqId)
	args223 := NewGetRowArgs()
	args223.TableName = tableName
	args223.Row = row
	args223.Attributes = attributes
	err = args223.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRow() (value thrift.TList, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error225 := thrift.NewTApplicationExceptionDefault()
		var error226 error
		error226, err = error225.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error226
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result224 := NewGetRowResult()
	err = result224.Read(iprot)
	iprot.ReadMessageEnd()
	value = result224.Success
	if result224.Io != nil {
		io = result224.Io
	}
	return
}

/**
 * Get the specified columns for the specified table and row at the latest
 * timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowWithColumns(tableName Text, row Text, columns thrift.TList, attributes thrift.TMap) (retval227 thrift.TList, io *IOError, err error) {
	err = p.SendGetRowWithColumns(tableName, row, columns, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowWithColumns()
}

func (p *HbaseClient) SendGetRowWithColumns(tableName Text, row Text, columns thrift.TList, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowWithColumns", thrift.CALL, p.SeqId)
	args228 := NewGetRowWithColumnsArgs()
	args228.TableName = tableName
	args228.Row = row
	args228.Columns = columns
	args228.Attributes = attributes
	err = args228.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowWithColumns() (value thrift.TList, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error230 := thrift.NewTApplicationExceptionDefault()
		var error231 error
		error231, err = error230.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error231
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result229 := NewGetRowWithColumnsResult()
	err = result229.Read(iprot)
	iprot.ReadMessageEnd()
	value = result229.Success
	if result229.Io != nil {
		io = result229.Io
	}
	return
}

/**
 * Get all the data for the specified table and row at the specified
 * timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of the table
 *  - Row: row key
 *  - Timestamp: timestamp
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowTs(tableName Text, row Text, timestamp int64, attributes thrift.TMap) (retval232 thrift.TList, io *IOError, err error) {
	err = p.SendGetRowTs(tableName, row, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowTs()
}

func (p *HbaseClient) SendGetRowTs(tableName Text, row Text, timestamp int64, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowTs", thrift.CALL, p.SeqId)
	args233 := NewGetRowTsArgs()
	args233.TableName = tableName
	args233.Row = row
	args233.Timestamp = timestamp
	args233.Attributes = attributes
	err = args233.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowTs() (value thrift.TList, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error235 := thrift.NewTApplicationExceptionDefault()
		var error236 error
		error236, err = error235.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error236
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result234 := NewGetRowTsResult()
	err = result234.Read(iprot)
	iprot.ReadMessageEnd()
	value = result234.Success
	if result234.Io != nil {
		io = result234.Io
	}
	return
}

/**
 * Get the specified columns for the specified table and row at the specified
 * timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowWithColumnsTs(tableName Text, row Text, columns thrift.TList, timestamp int64, attributes thrift.TMap) (retval237 thrift.TList, io *IOError, err error) {
	err = p.SendGetRowWithColumnsTs(tableName, row, columns, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowWithColumnsTs()
}

func (p *HbaseClient) SendGetRowWithColumnsTs(tableName Text, row Text, columns thrift.TList, timestamp int64, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.CALL, p.SeqId)
	args238 := NewGetRowWithColumnsTsArgs()
	args238.TableName = tableName
	args238.Row = row
	args238.Columns = columns
	args238.Timestamp = timestamp
	args238.Attributes = attributes
	err = args238.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowWithColumnsTs() (value thrift.TList, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error240 := thrift.NewTApplicationExceptionDefault()
		var error241 error
		error241, err = error240.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error241
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result239 := NewGetRowWithColumnsTsResult()
	err = result239.Read(iprot)
	iprot.ReadMessageEnd()
	value = result239.Success
	if result239.Io != nil {
		io = result239.Io
	}
	return
}

/**
 * Get all the data for the specified table and rows at the latest
 * timestamp. Returns an empty list if no rows exist.
 * 
 * @return TRowResult containing the rows and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRows(tableName Text, rows thrift.TList, attributes thrift.TMap) (retval242 thrift.TList, io *IOError, err error) {
	err = p.SendGetRows(tableName, rows, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRows()
}

func (p *HbaseClient) SendGetRows(tableName Text, rows thrift.TList, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRows", thrift.CALL, p.SeqId)
	args243 := NewGetRowsArgs()
	args243.TableName = tableName
	args243.Rows = rows
	args243.Attributes = attributes
	err = args243.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRows() (value thrift.TList, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error245 := thrift.NewTApplicationExceptionDefault()
		var error246 error
		error246, err = error245.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error246
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result244 := NewGetRowsResult()
	err = result244.Read(iprot)
	iprot.ReadMessageEnd()
	value = result244.Success
	if result244.Io != nil {
		io = result244.Io
	}
	return
}

/**
 * Get the specified columns for the specified table and rows at the latest
 * timestamp. Returns an empty list if no rows exist.
 * 
 * @return TRowResult containing the rows and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Columns: List of columns to return, null for all columns
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowsWithColumns(tableName Text, rows thrift.TList, columns thrift.TList, attributes thrift.TMap) (retval247 thrift.TList, io *IOError, err error) {
	err = p.SendGetRowsWithColumns(tableName, rows, columns, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowsWithColumns()
}

func (p *HbaseClient) SendGetRowsWithColumns(tableName Text, rows thrift.TList, columns thrift.TList, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowsWithColumns", thrift.CALL, p.SeqId)
	args248 := NewGetRowsWithColumnsArgs()
	args248.TableName = tableName
	args248.Rows = rows
	args248.Columns = columns
	args248.Attributes = attributes
	err = args248.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowsWithColumns() (value thrift.TList, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error250 := thrift.NewTApplicationExceptionDefault()
		var error251 error
		error251, err = error250.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error251
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result249 := NewGetRowsWithColumnsResult()
	err = result249.Read(iprot)
	iprot.ReadMessageEnd()
	value = result249.Success
	if result249.Io != nil {
		io = result249.Io
	}
	return
}

/**
 * Get all the data for the specified table and rows at the specified
 * timestamp. Returns an empty list if no rows exist.
 * 
 * @return TRowResult containing the rows and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of the table
 *  - Rows: row keys
 *  - Timestamp: timestamp
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowsTs(tableName Text, rows thrift.TList, timestamp int64, attributes thrift.TMap) (retval252 thrift.TList, io *IOError, err error) {
	err = p.SendGetRowsTs(tableName, rows, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowsTs()
}

func (p *HbaseClient) SendGetRowsTs(tableName Text, rows thrift.TList, timestamp int64, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowsTs", thrift.CALL, p.SeqId)
	args253 := NewGetRowsTsArgs()
	args253.TableName = tableName
	args253.Rows = rows
	args253.Timestamp = timestamp
	args253.Attributes = attributes
	err = args253.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowsTs() (value thrift.TList, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error255 := thrift.NewTApplicationExceptionDefault()
		var error256 error
		error256, err = error255.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error256
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result254 := NewGetRowsTsResult()
	err = result254.Read(iprot)
	iprot.ReadMessageEnd()
	value = result254.Success
	if result254.Io != nil {
		io = result254.Io
	}
	return
}

/**
 * Get the specified columns for the specified table and rows at the specified
 * timestamp. Returns an empty list if no rows exist.
 * 
 * @return TRowResult containing the rows and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowsWithColumnsTs(tableName Text, rows thrift.TList, columns thrift.TList, timestamp int64, attributes thrift.TMap) (retval257 thrift.TList, io *IOError, err error) {
	err = p.SendGetRowsWithColumnsTs(tableName, rows, columns, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowsWithColumnsTs()
}

func (p *HbaseClient) SendGetRowsWithColumnsTs(tableName Text, rows thrift.TList, columns thrift.TList, timestamp int64, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.CALL, p.SeqId)
	args258 := NewGetRowsWithColumnsTsArgs()
	args258.TableName = tableName
	args258.Rows = rows
	args258.Columns = columns
	args258.Timestamp = timestamp
	args258.Attributes = attributes
	err = args258.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowsWithColumnsTs() (value thrift.TList, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error260 := thrift.NewTApplicationExceptionDefault()
		var error261 error
		error261, err = error260.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error261
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result259 := NewGetRowsWithColumnsTsResult()
	err = result259.Read(iprot)
	iprot.ReadMessageEnd()
	value = result259.Success
	if result259.Io != nil {
		io = result259.Io
	}
	return
}

/**
 * Apply a series of mutations (updates/deletes) to a row in a
 * single transaction.  If an exception is thrown, then the
 * transaction is aborted.  Default current timestamp is used, and
 * all entries will have an identical timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Mutations: list of mutation commands
 *  - Attributes: Mutation attributes
 */
func (p *HbaseClient) MutateRow(tableName Text, row Text, mutations thrift.TList, attributes thrift.TMap) (io *IOError, ia *IllegalArgument, err error) {
	err = p.SendMutateRow(tableName, row, mutations, attributes)
	if err != nil {
		return
	}
	return p.RecvMutateRow()
}

func (p *HbaseClient) SendMutateRow(tableName Text, row Text, mutations thrift.TList, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("mutateRow", thrift.CALL, p.SeqId)
	args263 := NewMutateRowArgs()
	args263.TableName = tableName
	args263.Row = row
	args263.Mutations = mutations
	args263.Attributes = attributes
	err = args263.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvMutateRow() (io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error265 := thrift.NewTApplicationExceptionDefault()
		var error266 error
		error266, err = error265.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error266
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result264 := NewMutateRowResult()
	err = result264.Read(iprot)
	iprot.ReadMessageEnd()
	if result264.Io != nil {
		io = result264.Io
	}
	if result264.Ia != nil {
		ia = result264.Ia
	}
	return
}

/**
 * Apply a series of mutations (updates/deletes) to a row in a
 * single transaction.  If an exception is thrown, then the
 * transaction is aborted.  The specified timestamp is used, and
 * all entries will have an identical timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Mutations: list of mutation commands
 *  - Timestamp: timestamp
 *  - Attributes: Mutation attributes
 */
func (p *HbaseClient) MutateRowTs(tableName Text, row Text, mutations thrift.TList, timestamp int64, attributes thrift.TMap) (io *IOError, ia *IllegalArgument, err error) {
	err = p.SendMutateRowTs(tableName, row, mutations, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvMutateRowTs()
}

func (p *HbaseClient) SendMutateRowTs(tableName Text, row Text, mutations thrift.TList, timestamp int64, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("mutateRowTs", thrift.CALL, p.SeqId)
	args268 := NewMutateRowTsArgs()
	args268.TableName = tableName
	args268.Row = row
	args268.Mutations = mutations
	args268.Timestamp = timestamp
	args268.Attributes = attributes
	err = args268.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvMutateRowTs() (io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error270 := thrift.NewTApplicationExceptionDefault()
		var error271 error
		error271, err = error270.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error271
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result269 := NewMutateRowTsResult()
	err = result269.Read(iprot)
	iprot.ReadMessageEnd()
	if result269.Io != nil {
		io = result269.Io
	}
	if result269.Ia != nil {
		ia = result269.Ia
	}
	return
}

/**
 * Apply a series of batches (each a series of mutations on a single row)
 * in a single transaction.  If an exception is thrown, then the
 * transaction is aborted.  Default current timestamp is used, and
 * all entries will have an identical timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - RowBatches: list of row batches
 *  - Attributes: Mutation attributes
 */
func (p *HbaseClient) MutateRows(tableName Text, rowBatches thrift.TList, attributes thrift.TMap) (io *IOError, ia *IllegalArgument, err error) {
	err = p.SendMutateRows(tableName, rowBatches, attributes)
	if err != nil {
		return
	}
	return p.RecvMutateRows()
}

func (p *HbaseClient) SendMutateRows(tableName Text, rowBatches thrift.TList, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("mutateRows", thrift.CALL, p.SeqId)
	args273 := NewMutateRowsArgs()
	args273.TableName = tableName
	args273.RowBatches = rowBatches
	args273.Attributes = attributes
	err = args273.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvMutateRows() (io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error275 := thrift.NewTApplicationExceptionDefault()
		var error276 error
		error276, err = error275.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error276
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result274 := NewMutateRowsResult()
	err = result274.Read(iprot)
	iprot.ReadMessageEnd()
	if result274.Io != nil {
		io = result274.Io
	}
	if result274.Ia != nil {
		ia = result274.Ia
	}
	return
}

/**
 * Apply a series of batches (each a series of mutations on a single row)
 * in a single transaction.  If an exception is thrown, then the
 * transaction is aborted.  The specified timestamp is used, and
 * all entries will have an identical timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - RowBatches: list of row batches
 *  - Timestamp: timestamp
 *  - Attributes: Mutation attributes
 */
func (p *HbaseClient) MutateRowsTs(tableName Text, rowBatches thrift.TList, timestamp int64, attributes thrift.TMap) (io *IOError, ia *IllegalArgument, err error) {
	err = p.SendMutateRowsTs(tableName, rowBatches, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvMutateRowsTs()
}

func (p *HbaseClient) SendMutateRowsTs(tableName Text, rowBatches thrift.TList, timestamp int64, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("mutateRowsTs", thrift.CALL, p.SeqId)
	args278 := NewMutateRowsTsArgs()
	args278.TableName = tableName
	args278.RowBatches = rowBatches
	args278.Timestamp = timestamp
	args278.Attributes = attributes
	err = args278.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvMutateRowsTs() (io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error280 := thrift.NewTApplicationExceptionDefault()
		var error281 error
		error281, err = error280.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error281
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result279 := NewMutateRowsTsResult()
	err = result279.Read(iprot)
	iprot.ReadMessageEnd()
	if result279.Io != nil {
		io = result279.Io
	}
	if result279.Ia != nil {
		ia = result279.Ia
	}
	return
}

/**
 * Atomically increment the column value specified.  Returns the next value post increment.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row to increment
 *  - Column: name of column
 *  - Value: amount to increment by
 */
func (p *HbaseClient) AtomicIncrement(tableName Text, row Text, column Text, value int64) (retval282 int64, io *IOError, ia *IllegalArgument, err error) {
	err = p.SendAtomicIncrement(tableName, row, column, value)
	if err != nil {
		return
	}
	return p.RecvAtomicIncrement()
}

func (p *HbaseClient) SendAtomicIncrement(tableName Text, row Text, column Text, value int64) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("atomicIncrement", thrift.CALL, p.SeqId)
	args283 := NewAtomicIncrementArgs()
	args283.TableName = tableName
	args283.Row = row
	args283.Column = column
	args283.Value = value
	err = args283.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvAtomicIncrement() (value int64, io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error285 := thrift.NewTApplicationExceptionDefault()
		var error286 error
		error286, err = error285.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error286
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result284 := NewAtomicIncrementResult()
	err = result284.Read(iprot)
	iprot.ReadMessageEnd()
	value = result284.Success
	if result284.Io != nil {
		io = result284.Io
	}
	if result284.Ia != nil {
		ia = result284.Ia
	}
	return
}

/**
 * Delete all cells that match the passed row and column.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: Row to update
 *  - Column: name of column whose value is to be deleted
 *  - Attributes: Delete attributes
 */
func (p *HbaseClient) DeleteAll(tableName Text, row Text, column Text, attributes thrift.TMap) (io *IOError, err error) {
	err = p.SendDeleteAll(tableName, row, column, attributes)
	if err != nil {
		return
	}
	return p.RecvDeleteAll()
}

func (p *HbaseClient) SendDeleteAll(tableName Text, row Text, column Text, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteAll", thrift.CALL, p.SeqId)
	args288 := NewDeleteAllArgs()
	args288.TableName = tableName
	args288.Row = row
	args288.Column = column
	args288.Attributes = attributes
	err = args288.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDeleteAll() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error290 := thrift.NewTApplicationExceptionDefault()
		var error291 error
		error291, err = error290.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error291
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result289 := NewDeleteAllResult()
	err = result289.Read(iprot)
	iprot.ReadMessageEnd()
	if result289.Io != nil {
		io = result289.Io
	}
	return
}

/**
 * Delete all cells that match the passed row and column and whose
 * timestamp is equal-to or older than the passed timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: Row to update
 *  - Column: name of column whose value is to be deleted
 *  - Timestamp: timestamp
 *  - Attributes: Delete attributes
 */
func (p *HbaseClient) DeleteAllTs(tableName Text, row Text, column Text, timestamp int64, attributes thrift.TMap) (io *IOError, err error) {
	err = p.SendDeleteAllTs(tableName, row, column, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvDeleteAllTs()
}

func (p *HbaseClient) SendDeleteAllTs(tableName Text, row Text, column Text, timestamp int64, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteAllTs", thrift.CALL, p.SeqId)
	args293 := NewDeleteAllTsArgs()
	args293.TableName = tableName
	args293.Row = row
	args293.Column = column
	args293.Timestamp = timestamp
	args293.Attributes = attributes
	err = args293.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDeleteAllTs() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error295 := thrift.NewTApplicationExceptionDefault()
		var error296 error
		error296, err = error295.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error296
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result294 := NewDeleteAllTsResult()
	err = result294.Read(iprot)
	iprot.ReadMessageEnd()
	if result294.Io != nil {
		io = result294.Io
	}
	return
}

/**
 * Completely delete the row's cells.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: key of the row to be completely deleted.
 *  - Attributes: Delete attributes
 */
func (p *HbaseClient) DeleteAllRow(tableName Text, row Text, attributes thrift.TMap) (io *IOError, err error) {
	err = p.SendDeleteAllRow(tableName, row, attributes)
	if err != nil {
		return
	}
	return p.RecvDeleteAllRow()
}

func (p *HbaseClient) SendDeleteAllRow(tableName Text, row Text, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteAllRow", thrift.CALL, p.SeqId)
	args298 := NewDeleteAllRowArgs()
	args298.TableName = tableName
	args298.Row = row
	args298.Attributes = attributes
	err = args298.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDeleteAllRow() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error300 := thrift.NewTApplicationExceptionDefault()
		var error301 error
		error301, err = error300.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error301
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result299 := NewDeleteAllRowResult()
	err = result299.Read(iprot)
	iprot.ReadMessageEnd()
	if result299.Io != nil {
		io = result299.Io
	}
	return
}

/**
 * Increment a cell by the ammount.
 * Increments can be applied async if hbase.regionserver.thrift.coalesceIncrement is set to true.
 * False is the default.  Turn to true if you need the extra performance and can accept some
 * data loss if a thrift server dies with increments still in the queue.
 * 
 * Parameters:
 *  - Increment: The single increment to apply
 */
func (p *HbaseClient) Increment(increment *TIncrement) (io *IOError, err error) {
	err = p.SendIncrement(increment)
	if err != nil {
		return
	}
	return p.RecvIncrement()
}

func (p *HbaseClient) SendIncrement(increment *TIncrement) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("increment", thrift.CALL, p.SeqId)
	args303 := NewIncrementArgs()
	args303.Increment = increment
	err = args303.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvIncrement() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error305 := thrift.NewTApplicationExceptionDefault()
		var error306 error
		error306, err = error305.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error306
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result304 := NewIncrementResult()
	err = result304.Read(iprot)
	iprot.ReadMessageEnd()
	if result304.Io != nil {
		io = result304.Io
	}
	return
}

/**
 * Parameters:
 *  - Increments: The list of increments
 */
func (p *HbaseClient) IncrementRows(increments thrift.TList) (io *IOError, err error) {
	err = p.SendIncrementRows(increments)
	if err != nil {
		return
	}
	return p.RecvIncrementRows()
}

func (p *HbaseClient) SendIncrementRows(increments thrift.TList) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("incrementRows", thrift.CALL, p.SeqId)
	args308 := NewIncrementRowsArgs()
	args308.Increments = increments
	err = args308.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvIncrementRows() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error310 := thrift.NewTApplicationExceptionDefault()
		var error311 error
		error311, err = error310.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error311
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result309 := NewIncrementRowsResult()
	err = result309.Read(iprot)
	iprot.ReadMessageEnd()
	if result309.Io != nil {
		io = result309.Io
	}
	return
}

/**
 * Completely delete the row's cells marked with a timestamp
 * equal-to or older than the passed timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: key of the row to be completely deleted.
 *  - Timestamp: timestamp
 *  - Attributes: Delete attributes
 */
func (p *HbaseClient) DeleteAllRowTs(tableName Text, row Text, timestamp int64, attributes thrift.TMap) (io *IOError, err error) {
	err = p.SendDeleteAllRowTs(tableName, row, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvDeleteAllRowTs()
}

func (p *HbaseClient) SendDeleteAllRowTs(tableName Text, row Text, timestamp int64, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteAllRowTs", thrift.CALL, p.SeqId)
	args313 := NewDeleteAllRowTsArgs()
	args313.TableName = tableName
	args313.Row = row
	args313.Timestamp = timestamp
	args313.Attributes = attributes
	err = args313.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDeleteAllRowTs() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error315 := thrift.NewTApplicationExceptionDefault()
		var error316 error
		error316, err = error315.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error316
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result314 := NewDeleteAllRowTsResult()
	err = result314.Read(iprot)
	iprot.ReadMessageEnd()
	if result314.Io != nil {
		io = result314.Io
	}
	return
}

/**
 * Get a scanner on the current table, using the Scan instance
 * for the scan parameters.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Scan: Scan instance
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpenWithScan(tableName Text, scan *TScan, attributes thrift.TMap) (retval317 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpenWithScan(tableName, scan, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpenWithScan()
}

func (p *HbaseClient) SendScannerOpenWithScan(tableName Text, scan *TScan, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpenWithScan", thrift.CALL, p.SeqId)
	args318 := NewScannerOpenWithScanArgs()
	args318.TableName = tableName
	args318.Scan = scan
	args318.Attributes = attributes
	err = args318.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpenWithScan() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error320 := thrift.NewTApplicationExceptionDefault()
		var error321 error
		error321, err = error320.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error321
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result319 := NewScannerOpenWithScanResult()
	err = result319.Read(iprot)
	iprot.ReadMessageEnd()
	value = result319.Success
	if result319.Io != nil {
		io = result319.Io
	}
	return
}

/**
 * Get a scanner on the current table starting at the specified row and
 * ending at the last row in the table.  Return the specified columns.
 * 
 * @return scanner id to be used with other scanner procedures
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpen(tableName Text, startRow Text, columns thrift.TList, attributes thrift.TMap) (retval322 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpen(tableName, startRow, columns, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpen()
}

func (p *HbaseClient) SendScannerOpen(tableName Text, startRow Text, columns thrift.TList, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpen", thrift.CALL, p.SeqId)
	args323 := NewScannerOpenArgs()
	args323.TableName = tableName
	args323.StartRow = startRow
	args323.Columns = columns
	args323.Attributes = attributes
	err = args323.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpen() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error325 := thrift.NewTApplicationExceptionDefault()
		var error326 error
		error326, err = error325.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error326
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result324 := NewScannerOpenResult()
	err = result324.Read(iprot)
	iprot.ReadMessageEnd()
	value = result324.Success
	if result324.Io != nil {
		io = result324.Io
	}
	return
}

/**
 * Get a scanner on the current table starting and stopping at the
 * specified rows.  ending at the last row in the table.  Return the
 * specified columns.
 * 
 * @return scanner id to be used with other scanner procedures
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - StopRow: row to stop scanning on. This row is *not* included in the
 * scanner's results
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpenWithStop(tableName Text, startRow Text, stopRow Text, columns thrift.TList, attributes thrift.TMap) (retval327 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpenWithStop(tableName, startRow, stopRow, columns, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpenWithStop()
}

func (p *HbaseClient) SendScannerOpenWithStop(tableName Text, startRow Text, stopRow Text, columns thrift.TList, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpenWithStop", thrift.CALL, p.SeqId)
	args328 := NewScannerOpenWithStopArgs()
	args328.TableName = tableName
	args328.StartRow = startRow
	args328.StopRow = stopRow
	args328.Columns = columns
	args328.Attributes = attributes
	err = args328.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpenWithStop() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error330 := thrift.NewTApplicationExceptionDefault()
		var error331 error
		error331, err = error330.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error331
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result329 := NewScannerOpenWithStopResult()
	err = result329.Read(iprot)
	iprot.ReadMessageEnd()
	value = result329.Success
	if result329.Io != nil {
		io = result329.Io
	}
	return
}

/**
 * Open a scanner for a given prefix.  That is all rows will have the specified
 * prefix. No other rows will be returned.
 * 
 * @return scanner id to use with other scanner calls
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartAndPrefix: the prefix (and thus start row) of the keys you want
 *  - Columns: the columns you want returned
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpenWithPrefix(tableName Text, startAndPrefix Text, columns thrift.TList, attributes thrift.TMap) (retval332 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpenWithPrefix(tableName, startAndPrefix, columns, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpenWithPrefix()
}

func (p *HbaseClient) SendScannerOpenWithPrefix(tableName Text, startAndPrefix Text, columns thrift.TList, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.CALL, p.SeqId)
	args333 := NewScannerOpenWithPrefixArgs()
	args333.TableName = tableName
	args333.StartAndPrefix = startAndPrefix
	args333.Columns = columns
	args333.Attributes = attributes
	err = args333.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpenWithPrefix() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error335 := thrift.NewTApplicationExceptionDefault()
		var error336 error
		error336, err = error335.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error336
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result334 := NewScannerOpenWithPrefixResult()
	err = result334.Read(iprot)
	iprot.ReadMessageEnd()
	value = result334.Success
	if result334.Io != nil {
		io = result334.Io
	}
	return
}

/**
 * Get a scanner on the current table starting at the specified row and
 * ending at the last row in the table.  Return the specified columns.
 * Only values with the specified timestamp are returned.
 * 
 * @return scanner id to be used with other scanner procedures
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Timestamp: timestamp
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpenTs(tableName Text, startRow Text, columns thrift.TList, timestamp int64, attributes thrift.TMap) (retval337 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpenTs(tableName, startRow, columns, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpenTs()
}

func (p *HbaseClient) SendScannerOpenTs(tableName Text, startRow Text, columns thrift.TList, timestamp int64, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpenTs", thrift.CALL, p.SeqId)
	args338 := NewScannerOpenTsArgs()
	args338.TableName = tableName
	args338.StartRow = startRow
	args338.Columns = columns
	args338.Timestamp = timestamp
	args338.Attributes = attributes
	err = args338.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpenTs() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error340 := thrift.NewTApplicationExceptionDefault()
		var error341 error
		error341, err = error340.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error341
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result339 := NewScannerOpenTsResult()
	err = result339.Read(iprot)
	iprot.ReadMessageEnd()
	value = result339.Success
	if result339.Io != nil {
		io = result339.Io
	}
	return
}

/**
 * Get a scanner on the current table starting and stopping at the
 * specified rows.  ending at the last row in the table.  Return the
 * specified columns.  Only values with the specified timestamp are
 * returned.
 * 
 * @return scanner id to be used with other scanner procedures
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - StopRow: row to stop scanning on. This row is *not* included in the
 * scanner's results
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Timestamp: timestamp
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpenWithStopTs(tableName Text, startRow Text, stopRow Text, columns thrift.TList, timestamp int64, attributes thrift.TMap) (retval342 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpenWithStopTs(tableName, startRow, stopRow, columns, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpenWithStopTs()
}

func (p *HbaseClient) SendScannerOpenWithStopTs(tableName Text, startRow Text, stopRow Text, columns thrift.TList, timestamp int64, attributes thrift.TMap) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.CALL, p.SeqId)
	args343 := NewScannerOpenWithStopTsArgs()
	args343.TableName = tableName
	args343.StartRow = startRow
	args343.StopRow = stopRow
	args343.Columns = columns
	args343.Timestamp = timestamp
	args343.Attributes = attributes
	err = args343.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpenWithStopTs() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error345 := thrift.NewTApplicationExceptionDefault()
		var error346 error
		error346, err = error345.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error346
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result344 := NewScannerOpenWithStopTsResult()
	err = result344.Read(iprot)
	iprot.ReadMessageEnd()
	value = result344.Success
	if result344.Io != nil {
		io = result344.Io
	}
	return
}

/**
 * Returns the scanner's current row value and advances to the next
 * row in the table.  When there are no more rows in the table, or a key
 * greater-than-or-equal-to the scanner's specified stopRow is reached,
 * an empty list is returned.
 * 
 * @return a TRowResult containing the current row and a map of the columns to TCells.
 * 
 * @throws IllegalArgument if ScannerID is invalid
 * 
 * @throws NotFound when the scanner reaches the end
 * 
 * Parameters:
 *  - Id: id of a scanner returned by scannerOpen
 */
func (p *HbaseClient) ScannerGet(id ScannerID) (retval347 thrift.TList, io *IOError, ia *IllegalArgument, err error) {
	err = p.SendScannerGet(id)
	if err != nil {
		return
	}
	return p.RecvScannerGet()
}

func (p *HbaseClient) SendScannerGet(id ScannerID) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerGet", thrift.CALL, p.SeqId)
	args348 := NewScannerGetArgs()
	args348.Id = id
	err = args348.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerGet() (value thrift.TList, io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error350 := thrift.NewTApplicationExceptionDefault()
		var error351 error
		error351, err = error350.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error351
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result349 := NewScannerGetResult()
	err = result349.Read(iprot)
	iprot.ReadMessageEnd()
	value = result349.Success
	if result349.Io != nil {
		io = result349.Io
	}
	if result349.Ia != nil {
		ia = result349.Ia
	}
	return
}

/**
 * Returns, starting at the scanner's current row value nbRows worth of
 * rows and advances to the next row in the table.  When there are no more
 * rows in the table, or a key greater-than-or-equal-to the scanner's
 * specified stopRow is reached,  an empty list is returned.
 * 
 * @return a TRowResult containing the current row and a map of the columns to TCells.
 * 
 * @throws IllegalArgument if ScannerID is invalid
 * 
 * @throws NotFound when the scanner reaches the end
 * 
 * Parameters:
 *  - Id: id of a scanner returned by scannerOpen
 *  - NbRows: number of results to return
 */
func (p *HbaseClient) ScannerGetList(id ScannerID, nbRows int32) (retval352 thrift.TList, io *IOError, ia *IllegalArgument, err error) {
	err = p.SendScannerGetList(id, nbRows)
	if err != nil {
		return
	}
	return p.RecvScannerGetList()
}

func (p *HbaseClient) SendScannerGetList(id ScannerID, nbRows int32) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerGetList", thrift.CALL, p.SeqId)
	args353 := NewScannerGetListArgs()
	args353.Id = id
	args353.NbRows = nbRows
	err = args353.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerGetList() (value thrift.TList, io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error355 := thrift.NewTApplicationExceptionDefault()
		var error356 error
		error356, err = error355.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error356
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result354 := NewScannerGetListResult()
	err = result354.Read(iprot)
	iprot.ReadMessageEnd()
	value = result354.Success
	if result354.Io != nil {
		io = result354.Io
	}
	if result354.Ia != nil {
		ia = result354.Ia
	}
	return
}

/**
 * Closes the server-state associated with an open scanner.
 * 
 * @throws IllegalArgument if ScannerID is invalid
 * 
 * Parameters:
 *  - Id: id of a scanner returned by scannerOpen
 */
func (p *HbaseClient) ScannerClose(id ScannerID) (io *IOError, ia *IllegalArgument, err error) {
	err = p.SendScannerClose(id)
	if err != nil {
		return
	}
	return p.RecvScannerClose()
}

func (p *HbaseClient) SendScannerClose(id ScannerID) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerClose", thrift.CALL, p.SeqId)
	args358 := NewScannerCloseArgs()
	args358.Id = id
	err = args358.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerClose() (io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error360 := thrift.NewTApplicationExceptionDefault()
		var error361 error
		error361, err = error360.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error361
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result359 := NewScannerCloseResult()
	err = result359.Read(iprot)
	iprot.ReadMessageEnd()
	if result359.Io != nil {
		io = result359.Io
	}
	if result359.Ia != nil {
		ia = result359.Ia
	}
	return
}

/**
 * Get the row just before the specified one.
 * 
 * @return value for specified row/column
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Family: column name
 */
func (p *HbaseClient) GetRowOrBefore(tableName Text, row Text, family Text) (retval362 thrift.TList, io *IOError, err error) {
	err = p.SendGetRowOrBefore(tableName, row, family)
	if err != nil {
		return
	}
	return p.RecvGetRowOrBefore()
}

func (p *HbaseClient) SendGetRowOrBefore(tableName Text, row Text, family Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowOrBefore", thrift.CALL, p.SeqId)
	args363 := NewGetRowOrBeforeArgs()
	args363.TableName = tableName
	args363.Row = row
	args363.Family = family
	err = args363.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowOrBefore() (value thrift.TList, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error365 := thrift.NewTApplicationExceptionDefault()
		var error366 error
		error366, err = error365.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error366
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result364 := NewGetRowOrBeforeResult()
	err = result364.Read(iprot)
	iprot.ReadMessageEnd()
	value = result364.Success
	if result364.Io != nil {
		io = result364.Io
	}
	return
}

/**
 * Get the regininfo for the specified row. It scans
 * the metatable to find region's start and end keys.
 * 
 * @return value for specified row/column
 * 
 * Parameters:
 *  - Row: row key
 */
func (p *HbaseClient) GetRegionInfo(row Text) (retval367 *TRegionInfo, io *IOError, err error) {
	err = p.SendGetRegionInfo(row)
	if err != nil {
		return
	}
	return p.RecvGetRegionInfo()
}

func (p *HbaseClient) SendGetRegionInfo(row Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRegionInfo", thrift.CALL, p.SeqId)
	args368 := NewGetRegionInfoArgs()
	args368.Row = row
	err = args368.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRegionInfo() (value *TRegionInfo, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error370 := thrift.NewTApplicationExceptionDefault()
		var error371 error
		error371, err = error370.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error371
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result369 := NewGetRegionInfoResult()
	err = result369.Read(iprot)
	iprot.ReadMessageEnd()
	value = result369.Success
	if result369.Io != nil {
		io = result369.Io
	}
	return
}

type HbaseProcessor struct {
	handler      IHbase
	processorMap map[string]thrift.TProcessorFunction
}

func (p *HbaseProcessor) Handler() IHbase {
	return p.handler
}

func (p *HbaseProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *HbaseProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
	processor, exists = p.processorMap[key]
	return processor, exists
}

func (p *HbaseProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewHbaseProcessor(handler IHbase) *HbaseProcessor {

	self372 := &HbaseProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self372.processorMap["enableTable"] = &hbaseProcessorEnableTable{handler: handler}
	self372.processorMap["disableTable"] = &hbaseProcessorDisableTable{handler: handler}
	self372.processorMap["isTableEnabled"] = &hbaseProcessorIsTableEnabled{handler: handler}
	self372.processorMap["compact"] = &hbaseProcessorCompact{handler: handler}
	self372.processorMap["majorCompact"] = &hbaseProcessorMajorCompact{handler: handler}
	self372.processorMap["getTableNames"] = &hbaseProcessorGetTableNames{handler: handler}
	self372.processorMap["getColumnDescriptors"] = &hbaseProcessorGetColumnDescriptors{handler: handler}
	self372.processorMap["getTableRegions"] = &hbaseProcessorGetTableRegions{handler: handler}
	self372.processorMap["createTable"] = &hbaseProcessorCreateTable{handler: handler}
	self372.processorMap["deleteTable"] = &hbaseProcessorDeleteTable{handler: handler}
	self372.processorMap["get"] = &hbaseProcessorGet{handler: handler}
	self372.processorMap["getVer"] = &hbaseProcessorGetVer{handler: handler}
	self372.processorMap["getVerTs"] = &hbaseProcessorGetVerTs{handler: handler}
	self372.processorMap["getRow"] = &hbaseProcessorGetRow{handler: handler}
	self372.processorMap["getRowWithColumns"] = &hbaseProcessorGetRowWithColumns{handler: handler}
	self372.processorMap["getRowTs"] = &hbaseProcessorGetRowTs{handler: handler}
	self372.processorMap["getRowWithColumnsTs"] = &hbaseProcessorGetRowWithColumnsTs{handler: handler}
	self372.processorMap["getRows"] = &hbaseProcessorGetRows{handler: handler}
	self372.processorMap["getRowsWithColumns"] = &hbaseProcessorGetRowsWithColumns{handler: handler}
	self372.processorMap["getRowsTs"] = &hbaseProcessorGetRowsTs{handler: handler}
	self372.processorMap["getRowsWithColumnsTs"] = &hbaseProcessorGetRowsWithColumnsTs{handler: handler}
	self372.processorMap["mutateRow"] = &hbaseProcessorMutateRow{handler: handler}
	self372.processorMap["mutateRowTs"] = &hbaseProcessorMutateRowTs{handler: handler}
	self372.processorMap["mutateRows"] = &hbaseProcessorMutateRows{handler: handler}
	self372.processorMap["mutateRowsTs"] = &hbaseProcessorMutateRowsTs{handler: handler}
	self372.processorMap["atomicIncrement"] = &hbaseProcessorAtomicIncrement{handler: handler}
	self372.processorMap["deleteAll"] = &hbaseProcessorDeleteAll{handler: handler}
	self372.processorMap["deleteAllTs"] = &hbaseProcessorDeleteAllTs{handler: handler}
	self372.processorMap["deleteAllRow"] = &hbaseProcessorDeleteAllRow{handler: handler}
	self372.processorMap["increment"] = &hbaseProcessorIncrement{handler: handler}
	self372.processorMap["incrementRows"] = &hbaseProcessorIncrementRows{handler: handler}
	self372.processorMap["deleteAllRowTs"] = &hbaseProcessorDeleteAllRowTs{handler: handler}
	self372.processorMap["scannerOpenWithScan"] = &hbaseProcessorScannerOpenWithScan{handler: handler}
	self372.processorMap["scannerOpen"] = &hbaseProcessorScannerOpen{handler: handler}
	self372.processorMap["scannerOpenWithStop"] = &hbaseProcessorScannerOpenWithStop{handler: handler}
	self372.processorMap["scannerOpenWithPrefix"] = &hbaseProcessorScannerOpenWithPrefix{handler: handler}
	self372.processorMap["scannerOpenTs"] = &hbaseProcessorScannerOpenTs{handler: handler}
	self372.processorMap["scannerOpenWithStopTs"] = &hbaseProcessorScannerOpenWithStopTs{handler: handler}
	self372.processorMap["scannerGet"] = &hbaseProcessorScannerGet{handler: handler}
	self372.processorMap["scannerGetList"] = &hbaseProcessorScannerGetList{handler: handler}
	self372.processorMap["scannerClose"] = &hbaseProcessorScannerClose{handler: handler}
	self372.processorMap["getRowOrBefore"] = &hbaseProcessorGetRowOrBefore{handler: handler}
	self372.processorMap["getRegionInfo"] = &hbaseProcessorGetRegionInfo{handler: handler}
	return self372
}

func (p *HbaseProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	process, nameFound := p.GetProcessorFunction(name)
	if !nameFound || process == nil {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x373 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
		x373.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return false, x373
	}
	return process.Process(seqId, iprot, oprot)
}

type hbaseProcessorEnableTable struct {
	handler IHbase
}

func (p *hbaseProcessorEnableTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewEnableTableArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("enableTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewEnableTableResult()
	if result.Io, err = p.handler.EnableTable(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing enableTable: "+err.Error())
		oprot.WriteMessageBegin("enableTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("enableTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDisableTable struct {
	handler IHbase
}

func (p *hbaseProcessorDisableTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDisableTableArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("disableTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDisableTableResult()
	if result.Io, err = p.handler.DisableTable(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disableTable: "+err.Error())
		oprot.WriteMessageBegin("disableTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("disableTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorIsTableEnabled struct {
	handler IHbase
}

func (p *hbaseProcessorIsTableEnabled) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewIsTableEnabledArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isTableEnabled", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewIsTableEnabledResult()
	if result.Success, result.Io, err = p.handler.IsTableEnabled(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isTableEnabled: "+err.Error())
		oprot.WriteMessageBegin("isTableEnabled", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("isTableEnabled", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorCompact struct {
	handler IHbase
}

func (p *hbaseProcessorCompact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCompactArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("compact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCompactResult()
	if result.Io, err = p.handler.Compact(args.TableNameOrRegionName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing compact: "+err.Error())
		oprot.WriteMessageBegin("compact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("compact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMajorCompact struct {
	handler IHbase
}

func (p *hbaseProcessorMajorCompact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMajorCompactArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("majorCompact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMajorCompactResult()
	if result.Io, err = p.handler.MajorCompact(args.TableNameOrRegionName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing majorCompact: "+err.Error())
		oprot.WriteMessageBegin("majorCompact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("majorCompact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetTableNames struct {
	handler IHbase
}

func (p *hbaseProcessorGetTableNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetTableNamesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTableNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetTableNamesResult()
	if result.Success, result.Io, err = p.handler.GetTableNames(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTableNames: "+err.Error())
		oprot.WriteMessageBegin("getTableNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getTableNames", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetColumnDescriptors struct {
	handler IHbase
}

func (p *hbaseProcessorGetColumnDescriptors) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetColumnDescriptorsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getColumnDescriptors", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetColumnDescriptorsResult()
	if result.Success, result.Io, err = p.handler.GetColumnDescriptors(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getColumnDescriptors: "+err.Error())
		oprot.WriteMessageBegin("getColumnDescriptors", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getColumnDescriptors", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetTableRegions struct {
	handler IHbase
}

func (p *hbaseProcessorGetTableRegions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetTableRegionsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTableRegions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetTableRegionsResult()
	if result.Success, result.Io, err = p.handler.GetTableRegions(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTableRegions: "+err.Error())
		oprot.WriteMessageBegin("getTableRegions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getTableRegions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorCreateTable struct {
	handler IHbase
}

func (p *hbaseProcessorCreateTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCreateTableArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCreateTableResult()
	if result.Io, result.Ia, result.Exist, err = p.handler.CreateTable(args.TableName, args.ColumnFamilies); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTable: "+err.Error())
		oprot.WriteMessageBegin("createTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("createTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteTable struct {
	handler IHbase
}

func (p *hbaseProcessorDeleteTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteTableArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteTableResult()
	if result.Io, err = p.handler.DeleteTable(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteTable: "+err.Error())
		oprot.WriteMessageBegin("deleteTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGet struct {
	handler IHbase
}

func (p *hbaseProcessorGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetResult()
	if result.Success, result.Io, err = p.handler.Get(args.TableName, args.Row, args.Column, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: "+err.Error())
		oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetVer struct {
	handler IHbase
}

func (p *hbaseProcessorGetVer) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetVerArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getVer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetVerResult()
	if result.Success, result.Io, err = p.handler.GetVer(args.TableName, args.Row, args.Column, args.NumVersions, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVer: "+err.Error())
		oprot.WriteMessageBegin("getVer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getVer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetVerTs struct {
	handler IHbase
}

func (p *hbaseProcessorGetVerTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetVerTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getVerTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetVerTsResult()
	if result.Success, result.Io, err = p.handler.GetVerTs(args.TableName, args.Row, args.Column, args.Timestamp, args.NumVersions, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVerTs: "+err.Error())
		oprot.WriteMessageBegin("getVerTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getVerTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRow struct {
	handler IHbase
}

func (p *hbaseProcessorGetRow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowResult()
	if result.Success, result.Io, err = p.handler.GetRow(args.TableName, args.Row, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRow: "+err.Error())
		oprot.WriteMessageBegin("getRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowWithColumns struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowWithColumns) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowWithColumnsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowWithColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowWithColumnsResult()
	if result.Success, result.Io, err = p.handler.GetRowWithColumns(args.TableName, args.Row, args.Columns, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowWithColumns: "+err.Error())
		oprot.WriteMessageBegin("getRowWithColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowWithColumns", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowTs struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowTsResult()
	if result.Success, result.Io, err = p.handler.GetRowTs(args.TableName, args.Row, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowTs: "+err.Error())
		oprot.WriteMessageBegin("getRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowWithColumnsTs struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowWithColumnsTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowWithColumnsTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowWithColumnsTsResult()
	if result.Success, result.Io, err = p.handler.GetRowWithColumnsTs(args.TableName, args.Row, args.Columns, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowWithColumnsTs: "+err.Error())
		oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRows struct {
	handler IHbase
}

func (p *hbaseProcessorGetRows) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowsResult()
	if result.Success, result.Io, err = p.handler.GetRows(args.TableName, args.Rows, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRows: "+err.Error())
		oprot.WriteMessageBegin("getRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRows", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowsWithColumns struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowsWithColumns) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowsWithColumnsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowsWithColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowsWithColumnsResult()
	if result.Success, result.Io, err = p.handler.GetRowsWithColumns(args.TableName, args.Rows, args.Columns, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowsWithColumns: "+err.Error())
		oprot.WriteMessageBegin("getRowsWithColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowsWithColumns", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowsTs struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowsTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowsTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowsTsResult()
	if result.Success, result.Io, err = p.handler.GetRowsTs(args.TableName, args.Rows, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowsTs: "+err.Error())
		oprot.WriteMessageBegin("getRowsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowsTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowsWithColumnsTs struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowsWithColumnsTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowsWithColumnsTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowsWithColumnsTsResult()
	if result.Success, result.Io, err = p.handler.GetRowsWithColumnsTs(args.TableName, args.Rows, args.Columns, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowsWithColumnsTs: "+err.Error())
		oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMutateRow struct {
	handler IHbase
}

func (p *hbaseProcessorMutateRow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMutateRowArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mutateRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMutateRowResult()
	if result.Io, result.Ia, err = p.handler.MutateRow(args.TableName, args.Row, args.Mutations, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRow: "+err.Error())
		oprot.WriteMessageBegin("mutateRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("mutateRow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMutateRowTs struct {
	handler IHbase
}

func (p *hbaseProcessorMutateRowTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMutateRowTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mutateRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMutateRowTsResult()
	if result.Io, result.Ia, err = p.handler.MutateRowTs(args.TableName, args.Row, args.Mutations, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRowTs: "+err.Error())
		oprot.WriteMessageBegin("mutateRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("mutateRowTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMutateRows struct {
	handler IHbase
}

func (p *hbaseProcessorMutateRows) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMutateRowsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mutateRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMutateRowsResult()
	if result.Io, result.Ia, err = p.handler.MutateRows(args.TableName, args.RowBatches, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRows: "+err.Error())
		oprot.WriteMessageBegin("mutateRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("mutateRows", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMutateRowsTs struct {
	handler IHbase
}

func (p *hbaseProcessorMutateRowsTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMutateRowsTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mutateRowsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMutateRowsTsResult()
	if result.Io, result.Ia, err = p.handler.MutateRowsTs(args.TableName, args.RowBatches, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRowsTs: "+err.Error())
		oprot.WriteMessageBegin("mutateRowsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("mutateRowsTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorAtomicIncrement struct {
	handler IHbase
}

func (p *hbaseProcessorAtomicIncrement) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAtomicIncrementArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("atomicIncrement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAtomicIncrementResult()
	if result.Success, result.Io, result.Ia, err = p.handler.AtomicIncrement(args.TableName, args.Row, args.Column, args.Value); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing atomicIncrement: "+err.Error())
		oprot.WriteMessageBegin("atomicIncrement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("atomicIncrement", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteAll struct {
	handler IHbase
}

func (p *hbaseProcessorDeleteAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteAllArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteAllResult()
	if result.Io, err = p.handler.DeleteAll(args.TableName, args.Row, args.Column, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAll: "+err.Error())
		oprot.WriteMessageBegin("deleteAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteAll", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteAllTs struct {
	handler IHbase
}

func (p *hbaseProcessorDeleteAllTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteAllTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteAllTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteAllTsResult()
	if result.Io, err = p.handler.DeleteAllTs(args.TableName, args.Row, args.Column, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAllTs: "+err.Error())
		oprot.WriteMessageBegin("deleteAllTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteAllTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteAllRow struct {
	handler IHbase
}

func (p *hbaseProcessorDeleteAllRow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteAllRowArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteAllRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteAllRowResult()
	if result.Io, err = p.handler.DeleteAllRow(args.TableName, args.Row, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAllRow: "+err.Error())
		oprot.WriteMessageBegin("deleteAllRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteAllRow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorIncrement struct {
	handler IHbase
}

func (p *hbaseProcessorIncrement) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewIncrementArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("increment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewIncrementResult()
	if result.Io, err = p.handler.Increment(args.Increment); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing increment: "+err.Error())
		oprot.WriteMessageBegin("increment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("increment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorIncrementRows struct {
	handler IHbase
}

func (p *hbaseProcessorIncrementRows) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewIncrementRowsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("incrementRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewIncrementRowsResult()
	if result.Io, err = p.handler.IncrementRows(args.Increments); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing incrementRows: "+err.Error())
		oprot.WriteMessageBegin("incrementRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("incrementRows", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteAllRowTs struct {
	handler IHbase
}

func (p *hbaseProcessorDeleteAllRowTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteAllRowTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteAllRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteAllRowTsResult()
	if result.Io, err = p.handler.DeleteAllRowTs(args.TableName, args.Row, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAllRowTs: "+err.Error())
		oprot.WriteMessageBegin("deleteAllRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteAllRowTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenWithScan struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpenWithScan) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenWithScanArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenWithScan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenWithScanResult()
	if result.Success, result.Io, err = p.handler.ScannerOpenWithScan(args.TableName, args.Scan, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithScan: "+err.Error())
		oprot.WriteMessageBegin("scannerOpenWithScan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpenWithScan", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpen struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpen) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpen", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenResult()
	if result.Success, result.Io, err = p.handler.ScannerOpen(args.TableName, args.StartRow, args.Columns, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpen: "+err.Error())
		oprot.WriteMessageBegin("scannerOpen", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpen", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenWithStop struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpenWithStop) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenWithStopArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenWithStop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenWithStopResult()
	if result.Success, result.Io, err = p.handler.ScannerOpenWithStop(args.TableName, args.StartRow, args.StopRow, args.Columns, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithStop: "+err.Error())
		oprot.WriteMessageBegin("scannerOpenWithStop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpenWithStop", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenWithPrefix struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpenWithPrefix) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenWithPrefixArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenWithPrefixResult()
	if result.Success, result.Io, err = p.handler.ScannerOpenWithPrefix(args.TableName, args.StartAndPrefix, args.Columns, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithPrefix: "+err.Error())
		oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenTs struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpenTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenTsResult()
	if result.Success, result.Io, err = p.handler.ScannerOpenTs(args.TableName, args.StartRow, args.Columns, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenTs: "+err.Error())
		oprot.WriteMessageBegin("scannerOpenTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpenTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenWithStopTs struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpenWithStopTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenWithStopTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenWithStopTsResult()
	if result.Success, result.Io, err = p.handler.ScannerOpenWithStopTs(args.TableName, args.StartRow, args.StopRow, args.Columns, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithStopTs: "+err.Error())
		oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerGet struct {
	handler IHbase
}

func (p *hbaseProcessorScannerGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerGetArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerGet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerGetResult()
	if result.Success, result.Io, result.Ia, err = p.handler.ScannerGet(args.Id); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerGet: "+err.Error())
		oprot.WriteMessageBegin("scannerGet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerGet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerGetList struct {
	handler IHbase
}

func (p *hbaseProcessorScannerGetList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerGetListArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerGetList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerGetListResult()
	if result.Success, result.Io, result.Ia, err = p.handler.ScannerGetList(args.Id, args.NbRows); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerGetList: "+err.Error())
		oprot.WriteMessageBegin("scannerGetList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerGetList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerClose struct {
	handler IHbase
}

func (p *hbaseProcessorScannerClose) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerCloseArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerClose", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerCloseResult()
	if result.Io, result.Ia, err = p.handler.ScannerClose(args.Id); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerClose: "+err.Error())
		oprot.WriteMessageBegin("scannerClose", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerClose", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowOrBefore struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowOrBefore) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowOrBeforeArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowOrBefore", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowOrBeforeResult()
	if result.Success, result.Io, err = p.handler.GetRowOrBefore(args.TableName, args.Row, args.Family); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowOrBefore: "+err.Error())
		oprot.WriteMessageBegin("getRowOrBefore", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowOrBefore", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRegionInfo struct {
	handler IHbase
}

func (p *hbaseProcessorGetRegionInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRegionInfoArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRegionInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRegionInfoResult()
	if result.Success, result.Io, err = p.handler.GetRegionInfo(args.Row); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRegionInfo: "+err.Error())
		oprot.WriteMessageBegin("getRegionInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRegionInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - TableName: name of the table
 */
type EnableTableArgs struct {
	thrift.TStruct
	TableName Bytes "tableName" // 1
}

func NewEnableTableArgs() *EnableTableArgs {
	output := &EnableTableArgs{
		TStruct: thrift.NewTStruct("enableTable_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
		}),
	}
	{
	}
	return output
}

func (p *EnableTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *EnableTableArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v374, err375 := iprot.ReadBinary()
	if err375 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err375)
	}
	p.TableName = Bytes(v374)
	return err
}

func (p *EnableTableArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *EnableTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("enableTable_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *EnableTableArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *EnableTableArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *EnableTableArgs) TStructName() string {
	return "EnableTableArgs"
}

func (p *EnableTableArgs) ThriftName() string {
	return "enableTable_args"
}

func (p *EnableTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EnableTableArgs(%+v)", *p)
}

func (p *EnableTableArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*EnableTableArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *EnableTableArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *EnableTableArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type EnableTableResult struct {
	thrift.TStruct
	Io *IOError "io" // 1
}

func NewEnableTableResult() *EnableTableResult {
	output := &EnableTableResult{
		TStruct: thrift.NewTStruct("enableTable_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *EnableTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *EnableTableResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err378 := p.Io.Read(iprot)
	if err378 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err378)
	}
	return err
}

func (p *EnableTableResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *EnableTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("enableTable_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *EnableTableResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *EnableTableResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *EnableTableResult) TStructName() string {
	return "EnableTableResult"
}

func (p *EnableTableResult) ThriftName() string {
	return "enableTable_result"
}

func (p *EnableTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EnableTableResult(%+v)", *p)
}

func (p *EnableTableResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*EnableTableResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *EnableTableResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *EnableTableResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of the table
 */
type DisableTableArgs struct {
	thrift.TStruct
	TableName Bytes "tableName" // 1
}

func NewDisableTableArgs() *DisableTableArgs {
	output := &DisableTableArgs{
		TStruct: thrift.NewTStruct("disableTable_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
		}),
	}
	{
	}
	return output
}

func (p *DisableTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DisableTableArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v379, err380 := iprot.ReadBinary()
	if err380 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err380)
	}
	p.TableName = Bytes(v379)
	return err
}

func (p *DisableTableArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DisableTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("disableTable_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DisableTableArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DisableTableArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DisableTableArgs) TStructName() string {
	return "DisableTableArgs"
}

func (p *DisableTableArgs) ThriftName() string {
	return "disableTable_args"
}

func (p *DisableTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DisableTableArgs(%+v)", *p)
}

func (p *DisableTableArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DisableTableArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *DisableTableArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *DisableTableArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DisableTableResult struct {
	thrift.TStruct
	Io *IOError "io" // 1
}

func NewDisableTableResult() *DisableTableResult {
	output := &DisableTableResult{
		TStruct: thrift.NewTStruct("disableTable_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *DisableTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DisableTableResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err383 := p.Io.Read(iprot)
	if err383 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err383)
	}
	return err
}

func (p *DisableTableResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DisableTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("disableTable_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DisableTableResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DisableTableResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DisableTableResult) TStructName() string {
	return "DisableTableResult"
}

func (p *DisableTableResult) ThriftName() string {
	return "disableTable_result"
}

func (p *DisableTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DisableTableResult(%+v)", *p)
}

func (p *DisableTableResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DisableTableResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *DisableTableResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DisableTableResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of the table to check
 */
type IsTableEnabledArgs struct {
	thrift.TStruct
	TableName Bytes "tableName" // 1
}

func NewIsTableEnabledArgs() *IsTableEnabledArgs {
	output := &IsTableEnabledArgs{
		TStruct: thrift.NewTStruct("isTableEnabled_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
		}),
	}
	{
	}
	return output
}

func (p *IsTableEnabledArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IsTableEnabledArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v384, err385 := iprot.ReadBinary()
	if err385 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err385)
	}
	p.TableName = Bytes(v384)
	return err
}

func (p *IsTableEnabledArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *IsTableEnabledArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("isTableEnabled_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IsTableEnabledArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IsTableEnabledArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *IsTableEnabledArgs) TStructName() string {
	return "IsTableEnabledArgs"
}

func (p *IsTableEnabledArgs) ThriftName() string {
	return "isTableEnabled_args"
}

func (p *IsTableEnabledArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsTableEnabledArgs(%+v)", *p)
}

func (p *IsTableEnabledArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*IsTableEnabledArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *IsTableEnabledArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *IsTableEnabledArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type IsTableEnabledResult struct {
	thrift.TStruct
	Success bool     "success" // 0
	Io      *IOError "io"      // 1
}

func NewIsTableEnabledResult() *IsTableEnabledResult {
	output := &IsTableEnabledResult{
		TStruct: thrift.NewTStruct("isTableEnabled_result", []thrift.TField{
			thrift.NewTField("success", thrift.BOOL, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *IsTableEnabledResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.BOOL {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IsTableEnabledResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v386, err387 := iprot.ReadBool()
	if err387 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err387)
	}
	p.Success = v386
	return err
}

func (p *IsTableEnabledResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *IsTableEnabledResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err390 := p.Io.Read(iprot)
	if err390 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err390)
	}
	return err
}

func (p *IsTableEnabledResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *IsTableEnabledResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("isTableEnabled_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IsTableEnabledResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *IsTableEnabledResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *IsTableEnabledResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IsTableEnabledResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *IsTableEnabledResult) TStructName() string {
	return "IsTableEnabledResult"
}

func (p *IsTableEnabledResult) ThriftName() string {
	return "isTableEnabled_result"
}

func (p *IsTableEnabledResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsTableEnabledResult(%+v)", *p)
}

func (p *IsTableEnabledResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*IsTableEnabledResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *IsTableEnabledResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *IsTableEnabledResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.BOOL, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableNameOrRegionName
 */
type CompactArgs struct {
	thrift.TStruct
	TableNameOrRegionName Bytes "tableNameOrRegionName" // 1
}

func NewCompactArgs() *CompactArgs {
	output := &CompactArgs{
		TStruct: thrift.NewTStruct("compact_args", []thrift.TField{
			thrift.NewTField("tableNameOrRegionName", thrift.BINARY, 1),
		}),
	}
	{
	}
	return output
}

func (p *CompactArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableNameOrRegionName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CompactArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v391, err392 := iprot.ReadBinary()
	if err392 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableNameOrRegionName", p.ThriftName(), err392)
	}
	p.TableNameOrRegionName = Bytes(v391)
	return err
}

func (p *CompactArgs) ReadFieldTableNameOrRegionName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *CompactArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("compact_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CompactArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableNameOrRegionName != nil {
		err = oprot.WriteFieldBegin("tableNameOrRegionName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableNameOrRegionName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactArgs) WriteFieldTableNameOrRegionName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *CompactArgs) TStructName() string {
	return "CompactArgs"
}

func (p *CompactArgs) ThriftName() string {
	return "compact_args"
}

func (p *CompactArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompactArgs(%+v)", *p)
}

func (p *CompactArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*CompactArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *CompactArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableNameOrRegionName
	}
	return nil
}

func (p *CompactArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableNameOrRegionName", thrift.BINARY, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type CompactResult struct {
	thrift.TStruct
	Io *IOError "io" // 1
}

func NewCompactResult() *CompactResult {
	output := &CompactResult{
		TStruct: thrift.NewTStruct("compact_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *CompactResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CompactResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err395 := p.Io.Read(iprot)
	if err395 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err395)
	}
	return err
}

func (p *CompactResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *CompactResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("compact_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CompactResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *CompactResult) TStructName() string {
	return "CompactResult"
}

func (p *CompactResult) ThriftName() string {
	return "compact_result"
}

func (p *CompactResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompactResult(%+v)", *p)
}

func (p *CompactResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*CompactResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *CompactResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *CompactResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableNameOrRegionName
 */
type MajorCompactArgs struct {
	thrift.TStruct
	TableNameOrRegionName Bytes "tableNameOrRegionName" // 1
}

func NewMajorCompactArgs() *MajorCompactArgs {
	output := &MajorCompactArgs{
		TStruct: thrift.NewTStruct("majorCompact_args", []thrift.TField{
			thrift.NewTField("tableNameOrRegionName", thrift.BINARY, 1),
		}),
	}
	{
	}
	return output
}

func (p *MajorCompactArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableNameOrRegionName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MajorCompactArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v396, err397 := iprot.ReadBinary()
	if err397 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableNameOrRegionName", p.ThriftName(), err397)
	}
	p.TableNameOrRegionName = Bytes(v396)
	return err
}

func (p *MajorCompactArgs) ReadFieldTableNameOrRegionName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *MajorCompactArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("majorCompact_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MajorCompactArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableNameOrRegionName != nil {
		err = oprot.WriteFieldBegin("tableNameOrRegionName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableNameOrRegionName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MajorCompactArgs) WriteFieldTableNameOrRegionName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *MajorCompactArgs) TStructName() string {
	return "MajorCompactArgs"
}

func (p *MajorCompactArgs) ThriftName() string {
	return "majorCompact_args"
}

func (p *MajorCompactArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MajorCompactArgs(%+v)", *p)
}

func (p *MajorCompactArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MajorCompactArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *MajorCompactArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableNameOrRegionName
	}
	return nil
}

func (p *MajorCompactArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableNameOrRegionName", thrift.BINARY, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type MajorCompactResult struct {
	thrift.TStruct
	Io *IOError "io" // 1
}

func NewMajorCompactResult() *MajorCompactResult {
	output := &MajorCompactResult{
		TStruct: thrift.NewTStruct("majorCompact_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *MajorCompactResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MajorCompactResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err400 := p.Io.Read(iprot)
	if err400 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err400)
	}
	return err
}

func (p *MajorCompactResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *MajorCompactResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("majorCompact_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MajorCompactResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MajorCompactResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *MajorCompactResult) TStructName() string {
	return "MajorCompactResult"
}

func (p *MajorCompactResult) ThriftName() string {
	return "majorCompact_result"
}

func (p *MajorCompactResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MajorCompactResult(%+v)", *p)
}

func (p *MajorCompactResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MajorCompactResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *MajorCompactResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *MajorCompactResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

type GetTableNamesArgs struct {
	thrift.TStruct
}

func NewGetTableNamesArgs() *GetTableNamesArgs {
	output := &GetTableNamesArgs{
		TStruct: thrift.NewTStruct("getTableNames_args", []thrift.TField{}),
	}
	{
	}
	return output
}

func (p *GetTableNamesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		err = iprot.Skip(fieldTypeId)
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableNamesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getTableNames_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableNamesArgs) TStructName() string {
	return "GetTableNamesArgs"
}

func (p *GetTableNamesArgs) ThriftName() string {
	return "getTableNames_args"
}

func (p *GetTableNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableNamesArgs(%+v)", *p)
}

func (p *GetTableNamesArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetTableNamesArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetTableNamesArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *GetTableNamesArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetTableNamesResult struct {
	thrift.TStruct
	Success thrift.TList "success" // 0
	Io      *IOError     "io"      // 1
}

func NewGetTableNamesResult() *GetTableNamesResult {
	output := &GetTableNamesResult{
		TStruct: thrift.NewTStruct("getTableNames_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetTableNamesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableNamesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype406, _size403, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype406, _size403)
	for _i407 := 0; _i407 < _size403; _i407++ {
		v409, err410 := iprot.ReadBinary()
		if err410 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem408", "", err410)
		}
		_elem408 := Text(v409)
		p.Success.Push(_elem408)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetTableNamesResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetTableNamesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err413 := p.Io.Read(iprot)
	if err413 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err413)
	}
	return err
}

func (p *GetTableNamesResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetTableNamesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getTableNames_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableNamesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BINARY, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter414 := range p.Success.Iter() {
			Iter415 := Iter414.(Text)
			err = oprot.WriteBinary(Iter415)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter415", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetTableNamesResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetTableNamesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetTableNamesResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetTableNamesResult) TStructName() string {
	return "GetTableNamesResult"
}

func (p *GetTableNamesResult) ThriftName() string {
	return "getTableNames_result"
}

func (p *GetTableNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableNamesResult(%+v)", *p)
}

func (p *GetTableNamesResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetTableNamesResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetTableNamesResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetTableNamesResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: table name
 */
type GetColumnDescriptorsArgs struct {
	thrift.TStruct
	TableName Text "tableName" // 1
}

func NewGetColumnDescriptorsArgs() *GetColumnDescriptorsArgs {
	output := &GetColumnDescriptorsArgs{
		TStruct: thrift.NewTStruct("getColumnDescriptors_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetColumnDescriptorsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetColumnDescriptorsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v416, err417 := iprot.ReadBinary()
	if err417 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err417)
	}
	p.TableName = Text(v416)
	return err
}

func (p *GetColumnDescriptorsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetColumnDescriptorsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getColumnDescriptors_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetColumnDescriptorsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetColumnDescriptorsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetColumnDescriptorsArgs) TStructName() string {
	return "GetColumnDescriptorsArgs"
}

func (p *GetColumnDescriptorsArgs) ThriftName() string {
	return "getColumnDescriptors_args"
}

func (p *GetColumnDescriptorsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetColumnDescriptorsArgs(%+v)", *p)
}

func (p *GetColumnDescriptorsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetColumnDescriptorsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetColumnDescriptorsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *GetColumnDescriptorsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetColumnDescriptorsResult struct {
	thrift.TStruct
	Success thrift.TMap "success" // 0
	Io      *IOError    "io"      // 1
}

func NewGetColumnDescriptorsResult() *GetColumnDescriptorsResult {
	output := &GetColumnDescriptorsResult{
		TStruct: thrift.NewTStruct("getColumnDescriptors_result", []thrift.TField{
			thrift.NewTField("success", thrift.MAP, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetColumnDescriptorsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetColumnDescriptorsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype421, _vtype422, _size420, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTMap(_ktype421, _vtype422, _size420)
	for _i424 := 0; _i424 < _size420; _i424++ {
		v427, err428 := iprot.ReadBinary()
		if err428 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key425", "", err428)
		}
		_key425 := Text(v427)
		_val426 := NewColumnDescriptor()
		err431 := _val426.Read(iprot)
		if err431 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_val426ColumnDescriptor", err431)
		}
		p.Success.Set(_key425, _val426)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetColumnDescriptorsResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetColumnDescriptorsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err434 := p.Io.Read(iprot)
	if err434 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err434)
	}
	return err
}

func (p *GetColumnDescriptorsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetColumnDescriptorsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getColumnDescriptors_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetColumnDescriptorsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.MAP, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter435 := range p.Success.Iter() {
			Kiter436, Viter437 := Miter435.Key().(Text), Miter435.Value().(*ColumnDescriptor)
			err = oprot.WriteBinary(Kiter436)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter436", "", err)
			}
			err = Viter437.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("ColumnDescriptor", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetColumnDescriptorsResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetColumnDescriptorsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetColumnDescriptorsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetColumnDescriptorsResult) TStructName() string {
	return "GetColumnDescriptorsResult"
}

func (p *GetColumnDescriptorsResult) ThriftName() string {
	return "getColumnDescriptors_result"
}

func (p *GetColumnDescriptorsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetColumnDescriptorsResult(%+v)", *p)
}

func (p *GetColumnDescriptorsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetColumnDescriptorsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetColumnDescriptorsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetColumnDescriptorsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.MAP, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: table name
 */
type GetTableRegionsArgs struct {
	thrift.TStruct
	TableName Text "tableName" // 1
}

func NewGetTableRegionsArgs() *GetTableRegionsArgs {
	output := &GetTableRegionsArgs{
		TStruct: thrift.NewTStruct("getTableRegions_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetTableRegionsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableRegionsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v438, err439 := iprot.ReadBinary()
	if err439 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err439)
	}
	p.TableName = Text(v438)
	return err
}

func (p *GetTableRegionsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetTableRegionsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getTableRegions_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableRegionsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetTableRegionsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetTableRegionsArgs) TStructName() string {
	return "GetTableRegionsArgs"
}

func (p *GetTableRegionsArgs) ThriftName() string {
	return "getTableRegions_args"
}

func (p *GetTableRegionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableRegionsArgs(%+v)", *p)
}

func (p *GetTableRegionsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetTableRegionsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetTableRegionsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *GetTableRegionsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetTableRegionsResult struct {
	thrift.TStruct
	Success thrift.TList "success" // 0
	Io      *IOError     "io"      // 1
}

func NewGetTableRegionsResult() *GetTableRegionsResult {
	output := &GetTableRegionsResult{
		TStruct: thrift.NewTStruct("getTableRegions_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetTableRegionsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableRegionsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype445, _size442, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype445, _size442)
	for _i446 := 0; _i446 < _size442; _i446++ {
		_elem447 := NewTRegionInfo()
		err450 := _elem447.Read(iprot)
		if err450 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem447TRegionInfo", err450)
		}
		p.Success.Push(_elem447)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetTableRegionsResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetTableRegionsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err453 := p.Io.Read(iprot)
	if err453 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err453)
	}
	return err
}

func (p *GetTableRegionsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetTableRegionsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getTableRegions_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableRegionsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter454 := range p.Success.Iter() {
			Iter455 := Iter454.(*TRegionInfo)
			err = Iter455.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRegionInfo", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetTableRegionsResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetTableRegionsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetTableRegionsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetTableRegionsResult) TStructName() string {
	return "GetTableRegionsResult"
}

func (p *GetTableRegionsResult) ThriftName() string {
	return "getTableRegions_result"
}

func (p *GetTableRegionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableRegionsResult(%+v)", *p)
}

func (p *GetTableRegionsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetTableRegionsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetTableRegionsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetTableRegionsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table to create
 *  - ColumnFamilies: list of column family descriptors
 */
type CreateTableArgs struct {
	thrift.TStruct
	TableName      Text         "tableName"      // 1
	ColumnFamilies thrift.TList "columnFamilies" // 2
}

func NewCreateTableArgs() *CreateTableArgs {
	output := &CreateTableArgs{
		TStruct: thrift.NewTStruct("createTable_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("columnFamilies", thrift.LIST, 2),
		}),
	}
	{
	}
	return output
}

func (p *CreateTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "columnFamilies" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CreateTableArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v456, err457 := iprot.ReadBinary()
	if err457 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err457)
	}
	p.TableName = Text(v456)
	return err
}

func (p *CreateTableArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *CreateTableArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype463, _size460, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ColumnFamilies", "", err)
	}
	p.ColumnFamilies = thrift.NewTList(_etype463, _size460)
	for _i464 := 0; _i464 < _size460; _i464++ {
		_elem465 := NewColumnDescriptor()
		err468 := _elem465.Read(iprot)
		if err468 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem465ColumnDescriptor", err468)
		}
		p.ColumnFamilies.Push(_elem465)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CreateTableArgs) ReadFieldColumnFamilies(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *CreateTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("createTable_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CreateTableArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CreateTableArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *CreateTableArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnFamilies != nil {
		err = oprot.WriteFieldBegin("columnFamilies", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columnFamilies", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.ColumnFamilies.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter469 := range p.ColumnFamilies.Iter() {
			Iter470 := Iter469.(*ColumnDescriptor)
			err = Iter470.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("ColumnDescriptor", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columnFamilies", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CreateTableArgs) WriteFieldColumnFamilies(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *CreateTableArgs) TStructName() string {
	return "CreateTableArgs"
}

func (p *CreateTableArgs) ThriftName() string {
	return "createTable_args"
}

func (p *CreateTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTableArgs(%+v)", *p)
}

func (p *CreateTableArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*CreateTableArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *CreateTableArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.ColumnFamilies
	}
	return nil
}

func (p *CreateTableArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("columnFamilies", thrift.LIST, 2),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 *  - Exist
 */
type CreateTableResult struct {
	thrift.TStruct
	Io    *IOError         "io"    // 1
	Ia    *IllegalArgument "ia"    // 2
	Exist *AlreadyExists   "exist" // 3
}

func NewCreateTableResult() *CreateTableResult {
	output := &CreateTableResult{
		TStruct: thrift.NewTStruct("createTable_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
			thrift.NewTField("ia", thrift.STRUCT, 2),
			thrift.NewTField("exist", thrift.STRUCT, 3),
		}),
	}
	{
	}
	return output
}

func (p *CreateTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ia" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "exist" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CreateTableResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err473 := p.Io.Read(iprot)
	if err473 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err473)
	}
	return err
}

func (p *CreateTableResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *CreateTableResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err476 := p.Ia.Read(iprot)
	if err476 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err476)
	}
	return err
}

func (p *CreateTableResult) ReadFieldIa(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *CreateTableResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Exist = NewAlreadyExists()
	err479 := p.Exist.Read(iprot)
	if err479 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ExistAlreadyExists", err479)
	}
	return err
}

func (p *CreateTableResult) ReadFieldExist(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *CreateTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("createTable_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Exist != nil:
		if err = p.WriteField3(oprot); err != nil {
			return err
		}
	case p.Ia != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CreateTableResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CreateTableResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *CreateTableResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CreateTableResult) WriteFieldIa(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *CreateTableResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Exist != nil {
		err = oprot.WriteFieldBegin("exist", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "exist", p.ThriftName(), err)
		}
		err = p.Exist.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("AlreadyExists", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "exist", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CreateTableResult) WriteFieldExist(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *CreateTableResult) TStructName() string {
	return "CreateTableResult"
}

func (p *CreateTableResult) ThriftName() string {
	return "createTable_result"
}

func (p *CreateTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTableResult(%+v)", *p)
}

func (p *CreateTableResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*CreateTableResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *CreateTableResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	case 3:
		return p.Exist
	}
	return nil
}

func (p *CreateTableResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
		thrift.NewTField("exist", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - TableName: name of table to delete
 */
type DeleteTableArgs struct {
	thrift.TStruct
	TableName Text "tableName" // 1
}

func NewDeleteTableArgs() *DeleteTableArgs {
	output := &DeleteTableArgs{
		TStruct: thrift.NewTStruct("deleteTable_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
		}),
	}
	{
	}
	return output
}

func (p *DeleteTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteTableArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v480, err481 := iprot.ReadBinary()
	if err481 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err481)
	}
	p.TableName = Text(v480)
	return err
}

func (p *DeleteTableArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DeleteTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteTable_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteTableArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteTableArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DeleteTableArgs) TStructName() string {
	return "DeleteTableArgs"
}

func (p *DeleteTableArgs) ThriftName() string {
	return "deleteTable_args"
}

func (p *DeleteTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTableArgs(%+v)", *p)
}

func (p *DeleteTableArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DeleteTableArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *DeleteTableArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *DeleteTableArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DeleteTableResult struct {
	thrift.TStruct
	Io *IOError "io" // 1
}

func NewDeleteTableResult() *DeleteTableResult {
	output := &DeleteTableResult{
		TStruct: thrift.NewTStruct("deleteTable_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *DeleteTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteTableResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err484 := p.Io.Read(iprot)
	if err484 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err484)
	}
	return err
}

func (p *DeleteTableResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DeleteTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteTable_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteTableResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteTableResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DeleteTableResult) TStructName() string {
	return "DeleteTableResult"
}

func (p *DeleteTableResult) ThriftName() string {
	return "deleteTable_result"
}

func (p *DeleteTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTableResult(%+v)", *p)
}

func (p *DeleteTableResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DeleteTableResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *DeleteTableResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DeleteTableResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - Attributes: Get attributes
 */
type GetArgs struct {
	thrift.TStruct
	TableName  Text        "tableName"  // 1
	Row        Text        "row"        // 2
	Column     Text        "column"     // 3
	Attributes thrift.TMap "attributes" // 4
}

func NewGetArgs() *GetArgs {
	output := &GetArgs{
		TStruct: thrift.NewTStruct("get_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("row", thrift.BINARY, 2),
			thrift.NewTField("column", thrift.BINARY, 3),
			thrift.NewTField("attributes", thrift.MAP, 4),
		}),
	}
	{
	}
	return output
}

func (p *GetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "column" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v485, err486 := iprot.ReadBinary()
	if err486 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err486)
	}
	p.TableName = Text(v485)
	return err
}

func (p *GetArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v487, err488 := iprot.ReadBinary()
	if err488 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err488)
	}
	p.Row = Text(v487)
	return err
}

func (p *GetArgs) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v489, err490 := iprot.ReadBinary()
	if err490 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err490)
	}
	p.Column = Text(v489)
	return err
}

func (p *GetArgs) ReadFieldColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype494, _vtype495, _size493, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype494, _vtype495, _size493)
	for _i497 := 0; _i497 < _size493; _i497++ {
		v500, err501 := iprot.ReadBinary()
		if err501 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key498", "", err501)
		}
		_key498 := Text(v500)
		v502, err503 := iprot.ReadBinary()
		if err503 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val499", "", err503)
		}
		_val499 := Text(v502)
		p.Attributes.Set(_key498, _val499)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *GetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetArgs) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.BINARY, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetArgs) WriteFieldColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter504 := range p.Attributes.Iter() {
			Kiter505, Viter506 := Miter504.Key().(Text), Miter504.Value().(Text)
			err = oprot.WriteBinary(Kiter505)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter505", "", err)
			}
			err = oprot.WriteBinary(Viter506)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter506", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *GetArgs) TStructName() string {
	return "GetArgs"
}

func (p *GetArgs) ThriftName() string {
	return "get_args"
}

func (p *GetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetArgs(%+v)", *p)
}

func (p *GetArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *GetArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("row", thrift.BINARY, 2),
		thrift.NewTField("column", thrift.BINARY, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetResult struct {
	thrift.TStruct
	Success thrift.TList "success" // 0
	Io      *IOError     "io"      // 1
}

func NewGetResult() *GetResult {
	output := &GetResult{
		TStruct: thrift.NewTStruct("get_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype512, _size509, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype512, _size509)
	for _i513 := 0; _i513 < _size509; _i513++ {
		_elem514 := NewTCell()
		err517 := _elem514.Read(iprot)
		if err517 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem514TCell", err517)
		}
		p.Success.Push(_elem514)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err520 := p.Io.Read(iprot)
	if err520 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err520)
	}
	return err
}

func (p *GetResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter521 := range p.Success.Iter() {
			Iter522 := Iter521.(*TCell)
			err = Iter522.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TCell", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetResult) TStructName() string {
	return "GetResult"
}

func (p *GetResult) ThriftName() string {
	return "get_result"
}

func (p *GetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResult(%+v)", *p)
}

func (p *GetResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - NumVersions: number of versions to retrieve
 *  - Attributes: Get attributes
 */
type GetVerArgs struct {
	thrift.TStruct
	TableName   Text        "tableName"   // 1
	Row         Text        "row"         // 2
	Column      Text        "column"      // 3
	NumVersions int32       "numVersions" // 4
	Attributes  thrift.TMap "attributes"  // 5
}

func NewGetVerArgs() *GetVerArgs {
	output := &GetVerArgs{
		TStruct: thrift.NewTStruct("getVer_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("row", thrift.BINARY, 2),
			thrift.NewTField("column", thrift.BINARY, 3),
			thrift.NewTField("numVersions", thrift.I32, 4),
			thrift.NewTField("attributes", thrift.MAP, 5),
		}),
	}
	{
	}
	return output
}

func (p *GetVerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "column" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "numVersions" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v523, err524 := iprot.ReadBinary()
	if err524 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err524)
	}
	p.TableName = Text(v523)
	return err
}

func (p *GetVerArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetVerArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v525, err526 := iprot.ReadBinary()
	if err526 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err526)
	}
	p.Row = Text(v525)
	return err
}

func (p *GetVerArgs) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetVerArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v527, err528 := iprot.ReadBinary()
	if err528 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err528)
	}
	p.Column = Text(v527)
	return err
}

func (p *GetVerArgs) ReadFieldColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetVerArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v529, err530 := iprot.ReadI32()
	if err530 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "numVersions", p.ThriftName(), err530)
	}
	p.NumVersions = v529
	return err
}

func (p *GetVerArgs) ReadFieldNumVersions(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *GetVerArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype534, _vtype535, _size533, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype534, _vtype535, _size533)
	for _i537 := 0; _i537 < _size533; _i537++ {
		v540, err541 := iprot.ReadBinary()
		if err541 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key538", "", err541)
		}
		_key538 := Text(v540)
		v542, err543 := iprot.ReadBinary()
		if err543 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val539", "", err543)
		}
		_val539 := Text(v542)
		p.Attributes.Set(_key538, _val539)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetVerArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *GetVerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getVer_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetVerArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerArgs) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetVerArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.BINARY, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerArgs) WriteFieldColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetVerArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("numVersions", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "numVersions", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.NumVersions))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "numVersions", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "numVersions", p.ThriftName(), err)
	}
	return err
}

func (p *GetVerArgs) WriteFieldNumVersions(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *GetVerArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter544 := range p.Attributes.Iter() {
			Kiter545, Viter546 := Miter544.Key().(Text), Miter544.Value().(Text)
			err = oprot.WriteBinary(Kiter545)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter545", "", err)
			}
			err = oprot.WriteBinary(Viter546)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter546", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *GetVerArgs) TStructName() string {
	return "GetVerArgs"
}

func (p *GetVerArgs) ThriftName() string {
	return "getVer_args"
}

func (p *GetVerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVerArgs(%+v)", *p)
}

func (p *GetVerArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetVerArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetVerArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.NumVersions
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *GetVerArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("row", thrift.BINARY, 2),
		thrift.NewTField("column", thrift.BINARY, 3),
		thrift.NewTField("numVersions", thrift.I32, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetVerResult struct {
	thrift.TStruct
	Success thrift.TList "success" // 0
	Io      *IOError     "io"      // 1
}

func NewGetVerResult() *GetVerResult {
	output := &GetVerResult{
		TStruct: thrift.NewTStruct("getVer_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetVerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype552, _size549, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype552, _size549)
	for _i553 := 0; _i553 < _size549; _i553++ {
		_elem554 := NewTCell()
		err557 := _elem554.Read(iprot)
		if err557 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem554TCell", err557)
		}
		p.Success.Push(_elem554)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetVerResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetVerResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err560 := p.Io.Read(iprot)
	if err560 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err560)
	}
	return err
}

func (p *GetVerResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetVerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getVer_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter561 := range p.Success.Iter() {
			Iter562 := Iter561.(*TCell)
			err = Iter562.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TCell", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetVerResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetVerResult) TStructName() string {
	return "GetVerResult"
}

func (p *GetVerResult) ThriftName() string {
	return "getVer_result"
}

func (p *GetVerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVerResult(%+v)", *p)
}

func (p *GetVerResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetVerResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetVerResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetVerResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - Timestamp: timestamp
 *  - NumVersions: number of versions to retrieve
 *  - Attributes: Get attributes
 */
type GetVerTsArgs struct {
	thrift.TStruct
	TableName   Text        "tableName"   // 1
	Row         Text        "row"         // 2
	Column      Text        "column"      // 3
	Timestamp   int64       "timestamp"   // 4
	NumVersions int32       "numVersions" // 5
	Attributes  thrift.TMap "attributes"  // 6
}

func NewGetVerTsArgs() *GetVerTsArgs {
	output := &GetVerTsArgs{
		TStruct: thrift.NewTStruct("getVerTs_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("row", thrift.BINARY, 2),
			thrift.NewTField("column", thrift.BINARY, 3),
			thrift.NewTField("timestamp", thrift.I64, 4),
			thrift.NewTField("numVersions", thrift.I32, 5),
			thrift.NewTField("attributes", thrift.MAP, 6),
		}),
	}
	{
	}
	return output
}

func (p *GetVerTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "column" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "timestamp" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "numVersions" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 6 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v563, err564 := iprot.ReadBinary()
	if err564 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err564)
	}
	p.TableName = Text(v563)
	return err
}

func (p *GetVerTsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetVerTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v565, err566 := iprot.ReadBinary()
	if err566 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err566)
	}
	p.Row = Text(v565)
	return err
}

func (p *GetVerTsArgs) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetVerTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v567, err568 := iprot.ReadBinary()
	if err568 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err568)
	}
	p.Column = Text(v567)
	return err
}

func (p *GetVerTsArgs) ReadFieldColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetVerTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v569, err570 := iprot.ReadI64()
	if err570 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err570)
	}
	p.Timestamp = v569
	return err
}

func (p *GetVerTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *GetVerTsArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v571, err572 := iprot.ReadI32()
	if err572 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "numVersions", p.ThriftName(), err572)
	}
	p.NumVersions = v571
	return err
}

func (p *GetVerTsArgs) ReadFieldNumVersions(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *GetVerTsArgs) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype576, _vtype577, _size575, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype576, _vtype577, _size575)
	for _i579 := 0; _i579 < _size575; _i579++ {
		v582, err583 := iprot.ReadBinary()
		if err583 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key580", "", err583)
		}
		_key580 := Text(v582)
		v584, err585 := iprot.ReadBinary()
		if err585 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val581", "", err585)
		}
		_val581 := Text(v584)
		p.Attributes.Set(_key580, _val581)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetVerTsArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField6(iprot)
}

func (p *GetVerTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getVerTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField6(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetVerTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsArgs) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetVerTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.BINARY, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsArgs) WriteFieldColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetVerTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *GetVerTsArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("numVersions", thrift.I32, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "numVersions", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.NumVersions))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "numVersions", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "numVersions", p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsArgs) WriteFieldNumVersions(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *GetVerTsArgs) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter586 := range p.Attributes.Iter() {
			Kiter587, Viter588 := Miter586.Key().(Text), Miter586.Value().(Text)
			err = oprot.WriteBinary(Kiter587)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter587", "", err)
			}
			err = oprot.WriteBinary(Viter588)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter588", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField6(oprot)
}

func (p *GetVerTsArgs) TStructName() string {
	return "GetVerTsArgs"
}

func (p *GetVerTsArgs) ThriftName() string {
	return "getVerTs_args"
}

func (p *GetVerTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVerTsArgs(%+v)", *p)
}

func (p *GetVerTsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetVerTsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetVerTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Timestamp
	case 5:
		return p.NumVersions
	case 6:
		return p.Attributes
	}
	return nil
}

func (p *GetVerTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("row", thrift.BINARY, 2),
		thrift.NewTField("column", thrift.BINARY, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("numVersions", thrift.I32, 5),
		thrift.NewTField("attributes", thrift.MAP, 6),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetVerTsResult struct {
	thrift.TStruct
	Success thrift.TList "success" // 0
	Io      *IOError     "io"      // 1
}

func NewGetVerTsResult() *GetVerTsResult {
	output := &GetVerTsResult{
		TStruct: thrift.NewTStruct("getVerTs_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetVerTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype594, _size591, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype594, _size591)
	for _i595 := 0; _i595 < _size591; _i595++ {
		_elem596 := NewTCell()
		err599 := _elem596.Read(iprot)
		if err599 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem596TCell", err599)
		}
		p.Success.Push(_elem596)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetVerTsResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetVerTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err602 := p.Io.Read(iprot)
	if err602 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err602)
	}
	return err
}

func (p *GetVerTsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetVerTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getVerTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter603 := range p.Success.Iter() {
			Iter604 := Iter603.(*TCell)
			err = Iter604.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TCell", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetVerTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetVerTsResult) TStructName() string {
	return "GetVerTsResult"
}

func (p *GetVerTsResult) ThriftName() string {
	return "getVerTs_result"
}

func (p *GetVerTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVerTsResult(%+v)", *p)
}

func (p *GetVerTsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetVerTsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetVerTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetVerTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Attributes: Get attributes
 */
type GetRowArgs struct {
	thrift.TStruct
	TableName  Text        "tableName"  // 1
	Row        Text        "row"        // 2
	Attributes thrift.TMap "attributes" // 3
}

func NewGetRowArgs() *GetRowArgs {
	output := &GetRowArgs{
		TStruct: thrift.NewTStruct("getRow_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("row", thrift.BINARY, 2),
			thrift.NewTField("attributes", thrift.MAP, 3),
		}),
	}
	{
	}
	return output
}

func (p *GetRowArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v605, err606 := iprot.ReadBinary()
	if err606 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err606)
	}
	p.TableName = Text(v605)
	return err
}

func (p *GetRowArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v607, err608 := iprot.ReadBinary()
	if err608 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err608)
	}
	p.Row = Text(v607)
	return err
}

func (p *GetRowArgs) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetRowArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype612, _vtype613, _size611, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype612, _vtype613, _size611)
	for _i615 := 0; _i615 < _size611; _i615++ {
		v618, err619 := iprot.ReadBinary()
		if err619 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key616", "", err619)
		}
		_key616 := Text(v618)
		v620, err621 := iprot.ReadBinary()
		if err621 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val617", "", err621)
		}
		_val617 := Text(v620)
		p.Attributes.Set(_key616, _val617)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetRowArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRow_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowArgs) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetRowArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter622 := range p.Attributes.Iter() {
			Kiter623, Viter624 := Miter622.Key().(Text), Miter622.Value().(Text)
			err = oprot.WriteBinary(Kiter623)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter623", "", err)
			}
			err = oprot.WriteBinary(Viter624)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter624", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetRowArgs) TStructName() string {
	return "GetRowArgs"
}

func (p *GetRowArgs) ThriftName() string {
	return "getRow_args"
}

func (p *GetRowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowArgs(%+v)", *p)
}

func (p *GetRowArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Attributes
	}
	return nil
}

func (p *GetRowArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("row", thrift.BINARY, 2),
		thrift.NewTField("attributes", thrift.MAP, 3),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowResult struct {
	thrift.TStruct
	Success thrift.TList "success" // 0
	Io      *IOError     "io"      // 1
}

func NewGetRowResult() *GetRowResult {
	output := &GetRowResult{
		TStruct: thrift.NewTStruct("getRow_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetRowResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype630, _size627, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype630, _size627)
	for _i631 := 0; _i631 < _size627; _i631++ {
		_elem632 := NewTRowResult()
		err635 := _elem632.Read(iprot)
		if err635 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem632TRowResult", err635)
		}
		p.Success.Push(_elem632)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetRowResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err638 := p.Io.Read(iprot)
	if err638 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err638)
	}
	return err
}

func (p *GetRowResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRow_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter639 := range p.Success.Iter() {
			Iter640 := Iter639.(*TRowResult)
			err = Iter640.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetRowResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowResult) TStructName() string {
	return "GetRowResult"
}

func (p *GetRowResult) ThriftName() string {
	return "getRow_result"
}

func (p *GetRowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowResult(%+v)", *p)
}

func (p *GetRowResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - Attributes: Get attributes
 */
type GetRowWithColumnsArgs struct {
	thrift.TStruct
	TableName  Text         "tableName"  // 1
	Row        Text         "row"        // 2
	Columns    thrift.TList "columns"    // 3
	Attributes thrift.TMap  "attributes" // 4
}

func NewGetRowWithColumnsArgs() *GetRowWithColumnsArgs {
	output := &GetRowWithColumnsArgs{
		TStruct: thrift.NewTStruct("getRowWithColumns_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("row", thrift.BINARY, 2),
			thrift.NewTField("columns", thrift.LIST, 3),
			thrift.NewTField("attributes", thrift.MAP, 4),
		}),
	}
	{
	}
	return output
}

func (p *GetRowWithColumnsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "columns" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v641, err642 := iprot.ReadBinary()
	if err642 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err642)
	}
	p.TableName = Text(v641)
	return err
}

func (p *GetRowWithColumnsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowWithColumnsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v643, err644 := iprot.ReadBinary()
	if err644 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err644)
	}
	p.Row = Text(v643)
	return err
}

func (p *GetRowWithColumnsArgs) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetRowWithColumnsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype650, _size647, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	p.Columns = thrift.NewTList(_etype650, _size647)
	for _i651 := 0; _i651 < _size647; _i651++ {
		v653, err654 := iprot.ReadBinary()
		if err654 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem652", "", err654)
		}
		_elem652 := Text(v653)
		p.Columns.Push(_elem652)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowWithColumnsArgs) ReadFieldColumns(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetRowWithColumnsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype658, _vtype659, _size657, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype658, _vtype659, _size657)
	for _i661 := 0; _i661 < _size657; _i661++ {
		v664, err665 := iprot.ReadBinary()
		if err665 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key662", "", err665)
		}
		_key662 := Text(v664)
		v666, err667 := iprot.ReadBinary()
		if err667 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val663", "", err667)
		}
		_val663 := Text(v666)
		p.Attributes.Set(_key662, _val663)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowWithColumnsArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *GetRowWithColumnsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowWithColumns_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowWithColumnsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsArgs) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetRowWithColumnsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BINARY, p.Columns.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter668 := range p.Columns.Iter() {
			Iter669 := Iter668.(Text)
			err = oprot.WriteBinary(Iter669)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter669", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsArgs) WriteFieldColumns(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetRowWithColumnsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter670 := range p.Attributes.Iter() {
			Kiter671, Viter672 := Miter670.Key().(Text), Miter670.Value().(Text)
			err = oprot.WriteBinary(Kiter671)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter671", "", err)
			}
			err = oprot.WriteBinary(Viter672)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter672", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *GetRowWithColumnsArgs) TStructName() string {
	return "GetRowWithColumnsArgs"
}

func (p *GetRowWithColumnsArgs) ThriftName() string {
	return "getRowWithColumns_args"
}

func (p *GetRowWithColumnsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowWithColumnsArgs(%+v)", *p)
}

func (p *GetRowWithColumnsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowWithColumnsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowWithColumnsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Columns
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *GetRowWithColumnsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("row", thrift.BINARY, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowWithColumnsResult struct {
	thrift.TStruct
	Success thrift.TList "success" // 0
	Io      *IOError     "io"      // 1
}

func NewGetRowWithColumnsResult() *GetRowWithColumnsResult {
	output := &GetRowWithColumnsResult{
		TStruct: thrift.NewTStruct("getRowWithColumns_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetRowWithColumnsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype678, _size675, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype678, _size675)
	for _i679 := 0; _i679 < _size675; _i679++ {
		_elem680 := NewTRowResult()
		err683 := _elem680.Read(iprot)
		if err683 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem680TRowResult", err683)
		}
		p.Success.Push(_elem680)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowWithColumnsResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetRowWithColumnsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err686 := p.Io.Read(iprot)
	if err686 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err686)
	}
	return err
}

func (p *GetRowWithColumnsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowWithColumnsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowWithColumns_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter687 := range p.Success.Iter() {
			Iter688 := Iter687.(*TRowResult)
			err = Iter688.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetRowWithColumnsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowWithColumnsResult) TStructName() string {
	return "GetRowWithColumnsResult"
}

func (p *GetRowWithColumnsResult) ThriftName() string {
	return "getRowWithColumns_result"
}

func (p *GetRowWithColumnsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowWithColumnsResult(%+v)", *p)
}

func (p *GetRowWithColumnsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowWithColumnsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowWithColumnsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowWithColumnsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of the table
 *  - Row: row key
 *  - Timestamp: timestamp
 *  - Attributes: Get attributes
 */
type GetRowTsArgs struct {
	thrift.TStruct
	TableName  Text        "tableName"  // 1
	Row        Text        "row"        // 2
	Timestamp  int64       "timestamp"  // 3
	Attributes thrift.TMap "attributes" // 4
}

func NewGetRowTsArgs() *GetRowTsArgs {
	output := &GetRowTsArgs{
		TStruct: thrift.NewTStruct("getRowTs_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("row", thrift.BINARY, 2),
			thrift.NewTField("timestamp", thrift.I64, 3),
			thrift.NewTField("attributes", thrift.MAP, 4),
		}),
	}
	{
	}
	return output
}

func (p *GetRowTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "timestamp" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v689, err690 := iprot.ReadBinary()
	if err690 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err690)
	}
	p.TableName = Text(v689)
	return err
}

func (p *GetRowTsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v691, err692 := iprot.ReadBinary()
	if err692 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err692)
	}
	p.Row = Text(v691)
	return err
}

func (p *GetRowTsArgs) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetRowTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v693, err694 := iprot.ReadI64()
	if err694 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err694)
	}
	p.Timestamp = v693
	return err
}

func (p *GetRowTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetRowTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype698, _vtype699, _size697, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype698, _vtype699, _size697)
	for _i701 := 0; _i701 < _size697; _i701++ {
		v704, err705 := iprot.ReadBinary()
		if err705 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key702", "", err705)
		}
		_key702 := Text(v704)
		v706, err707 := iprot.ReadBinary()
		if err707 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val703", "", err707)
		}
		_val703 := Text(v706)
		p.Attributes.Set(_key702, _val703)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowTsArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *GetRowTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowTsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowTsArgs) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetRowTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *GetRowTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetRowTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter708 := range p.Attributes.Iter() {
			Kiter709, Viter710 := Miter708.Key().(Text), Miter708.Value().(Text)
			err = oprot.WriteBinary(Kiter709)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter709", "", err)
			}
			err = oprot.WriteBinary(Viter710)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter710", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowTsArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *GetRowTsArgs) TStructName() string {
	return "GetRowTsArgs"
}

func (p *GetRowTsArgs) ThriftName() string {
	return "getRowTs_args"
}

func (p *GetRowTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowTsArgs(%+v)", *p)
}

func (p *GetRowTsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowTsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Timestamp
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *GetRowTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("row", thrift.BINARY, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowTsResult struct {
	thrift.TStruct
	Success thrift.TList "success" // 0
	Io      *IOError     "io"      // 1
}

func NewGetRowTsResult() *GetRowTsResult {
	output := &GetRowTsResult{
		TStruct: thrift.NewTStruct("getRowTs_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetRowTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowTsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype716, _size713, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype716, _size713)
	for _i717 := 0; _i717 < _size713; _i717++ {
		_elem718 := NewTRowResult()
		err721 := _elem718.Read(iprot)
		if err721 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem718TRowResult", err721)
		}
		p.Success.Push(_elem718)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowTsResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetRowTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err724 := p.Io.Read(iprot)
	if err724 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err724)
	}
	return err
}

func (p *GetRowTsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowTsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter725 := range p.Success.Iter() {
			Iter726 := Iter725.(*TRowResult)
			err = Iter726.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowTsResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetRowTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowTsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowTsResult) TStructName() string {
	return "GetRowTsResult"
}

func (p *GetRowTsResult) ThriftName() string {
	return "getRowTs_result"
}

func (p *GetRowTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowTsResult(%+v)", *p)
}

func (p *GetRowTsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowTsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 *  - Attributes: Get attributes
 */
type GetRowWithColumnsTsArgs struct {
	thrift.TStruct
	TableName  Text         "tableName"  // 1
	Row        Text         "row"        // 2
	Columns    thrift.TList "columns"    // 3
	Timestamp  int64        "timestamp"  // 4
	Attributes thrift.TMap  "attributes" // 5
}

func NewGetRowWithColumnsTsArgs() *GetRowWithColumnsTsArgs {
	output := &GetRowWithColumnsTsArgs{
		TStruct: thrift.NewTStruct("getRowWithColumnsTs_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("row", thrift.BINARY, 2),
			thrift.NewTField("columns", thrift.LIST, 3),
			thrift.NewTField("timestamp", thrift.I64, 4),
			thrift.NewTField("attributes", thrift.MAP, 5),
		}),
	}
	{
	}
	return output
}

func (p *GetRowWithColumnsTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "columns" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "timestamp" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v727, err728 := iprot.ReadBinary()
	if err728 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err728)
	}
	p.TableName = Text(v727)
	return err
}

func (p *GetRowWithColumnsTsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowWithColumnsTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v729, err730 := iprot.ReadBinary()
	if err730 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err730)
	}
	p.Row = Text(v729)
	return err
}

func (p *GetRowWithColumnsTsArgs) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetRowWithColumnsTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype736, _size733, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	p.Columns = thrift.NewTList(_etype736, _size733)
	for _i737 := 0; _i737 < _size733; _i737++ {
		v739, err740 := iprot.ReadBinary()
		if err740 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem738", "", err740)
		}
		_elem738 := Text(v739)
		p.Columns.Push(_elem738)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) ReadFieldColumns(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetRowWithColumnsTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v741, err742 := iprot.ReadI64()
	if err742 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err742)
	}
	p.Timestamp = v741
	return err
}

func (p *GetRowWithColumnsTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *GetRowWithColumnsTsArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype746, _vtype747, _size745, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype746, _vtype747, _size745)
	for _i749 := 0; _i749 < _size745; _i749++ {
		v752, err753 := iprot.ReadBinary()
		if err753 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key750", "", err753)
		}
		_key750 := Text(v752)
		v754, err755 := iprot.ReadBinary()
		if err755 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val751", "", err755)
		}
		_val751 := Text(v754)
		p.Attributes.Set(_key750, _val751)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *GetRowWithColumnsTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowWithColumnsTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowWithColumnsTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetRowWithColumnsTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BINARY, p.Columns.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter756 := range p.Columns.Iter() {
			Iter757 := Iter756.(Text)
			err = oprot.WriteBinary(Iter757)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter757", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) WriteFieldColumns(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetRowWithColumnsTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *GetRowWithColumnsTsArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter758 := range p.Attributes.Iter() {
			Kiter759, Viter760 := Miter758.Key().(Text), Miter758.Value().(Text)
			err = oprot.WriteBinary(Kiter759)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter759", "", err)
			}
			err = oprot.WriteBinary(Viter760)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter760", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *GetRowWithColumnsTsArgs) TStructName() string {
	return "GetRowWithColumnsTsArgs"
}

func (p *GetRowWithColumnsTsArgs) ThriftName() string {
	return "getRowWithColumnsTs_args"
}

func (p *GetRowWithColumnsTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowWithColumnsTsArgs(%+v)", *p)
}

func (p *GetRowWithColumnsTsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowWithColumnsTsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowWithColumnsTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Columns
	case 4:
		return p.Timestamp
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *GetRowWithColumnsTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("row", thrift.BINARY, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowWithColumnsTsResult struct {
	thrift.TStruct
	Success thrift.TList "success" // 0
	Io      *IOError     "io"      // 1
}

func NewGetRowWithColumnsTsResult() *GetRowWithColumnsTsResult {
	output := &GetRowWithColumnsTsResult{
		TStruct: thrift.NewTStruct("getRowWithColumnsTs_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetRowWithColumnsTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype766, _size763, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype766, _size763)
	for _i767 := 0; _i767 < _size763; _i767++ {
		_elem768 := NewTRowResult()
		err771 := _elem768.Read(iprot)
		if err771 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem768TRowResult", err771)
		}
		p.Success.Push(_elem768)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowWithColumnsTsResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetRowWithColumnsTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err774 := p.Io.Read(iprot)
	if err774 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err774)
	}
	return err
}

func (p *GetRowWithColumnsTsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowWithColumnsTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowWithColumnsTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter775 := range p.Success.Iter() {
			Iter776 := Iter775.(*TRowResult)
			err = Iter776.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetRowWithColumnsTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowWithColumnsTsResult) TStructName() string {
	return "GetRowWithColumnsTsResult"
}

func (p *GetRowWithColumnsTsResult) ThriftName() string {
	return "getRowWithColumnsTs_result"
}

func (p *GetRowWithColumnsTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowWithColumnsTsResult(%+v)", *p)
}

func (p *GetRowWithColumnsTsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowWithColumnsTsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowWithColumnsTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowWithColumnsTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Attributes: Get attributes
 */
type GetRowsArgs struct {
	thrift.TStruct
	TableName  Text         "tableName"  // 1
	Rows       thrift.TList "rows"       // 2
	Attributes thrift.TMap  "attributes" // 3
}

func NewGetRowsArgs() *GetRowsArgs {
	output := &GetRowsArgs{
		TStruct: thrift.NewTStruct("getRows_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("rows", thrift.LIST, 2),
			thrift.NewTField("attributes", thrift.MAP, 3),
		}),
	}
	{
	}
	return output
}

func (p *GetRowsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "rows" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v777, err778 := iprot.ReadBinary()
	if err778 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err778)
	}
	p.TableName = Text(v777)
	return err
}

func (p *GetRowsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype784, _size781, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
	}
	p.Rows = thrift.NewTList(_etype784, _size781)
	for _i785 := 0; _i785 < _size781; _i785++ {
		v787, err788 := iprot.ReadBinary()
		if err788 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem786", "", err788)
		}
		_elem786 := Text(v787)
		p.Rows.Push(_elem786)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsArgs) ReadFieldRows(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetRowsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype792, _vtype793, _size791, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype792, _vtype793, _size791)
	for _i795 := 0; _i795 < _size791; _i795++ {
		v798, err799 := iprot.ReadBinary()
		if err799 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key796", "", err799)
		}
		_key796 := Text(v798)
		v800, err801 := iprot.ReadBinary()
		if err801 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val797", "", err801)
		}
		_val797 := Text(v800)
		p.Attributes.Set(_key796, _val797)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowsArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetRowsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRows_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Rows != nil {
		err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BINARY, p.Rows.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter802 := range p.Rows.Iter() {
			Iter803 := Iter802.(Text)
			err = oprot.WriteBinary(Iter803)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter803", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsArgs) WriteFieldRows(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetRowsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter804 := range p.Attributes.Iter() {
			Kiter805, Viter806 := Miter804.Key().(Text), Miter804.Value().(Text)
			err = oprot.WriteBinary(Kiter805)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter805", "", err)
			}
			err = oprot.WriteBinary(Viter806)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter806", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetRowsArgs) TStructName() string {
	return "GetRowsArgs"
}

func (p *GetRowsArgs) ThriftName() string {
	return "getRows_args"
}

func (p *GetRowsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowsArgs(%+v)", *p)
}

func (p *GetRowsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Rows
	case 3:
		return p.Attributes
	}
	return nil
}

func (p *GetRowsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("rows", thrift.LIST, 2),
		thrift.NewTField("attributes", thrift.MAP, 3),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowsResult struct {
	thrift.TStruct
	Success thrift.TList "success" // 0
	Io      *IOError     "io"      // 1
}

func NewGetRowsResult() *GetRowsResult {
	output := &GetRowsResult{
		TStruct: thrift.NewTStruct("getRows_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetRowsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype812, _size809, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype812, _size809)
	for _i813 := 0; _i813 < _size809; _i813++ {
		_elem814 := NewTRowResult()
		err817 := _elem814.Read(iprot)
		if err817 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem814TRowResult", err817)
		}
		p.Success.Push(_elem814)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetRowsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err820 := p.Io.Read(iprot)
	if err820 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err820)
	}
	return err
}

func (p *GetRowsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRows_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter821 := range p.Success.Iter() {
			Iter822 := Iter821.(*TRowResult)
			err = Iter822.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetRowsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowsResult) TStructName() string {
	return "GetRowsResult"
}

func (p *GetRowsResult) ThriftName() string {
	return "getRows_result"
}

func (p *GetRowsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowsResult(%+v)", *p)
}

func (p *GetRowsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Columns: List of columns to return, null for all columns
 *  - Attributes: Get attributes
 */
type GetRowsWithColumnsArgs struct {
	thrift.TStruct
	TableName  Text         "tableName"  // 1
	Rows       thrift.TList "rows"       // 2
	Columns    thrift.TList "columns"    // 3
	Attributes thrift.TMap  "attributes" // 4
}

func NewGetRowsWithColumnsArgs() *GetRowsWithColumnsArgs {
	output := &GetRowsWithColumnsArgs{
		TStruct: thrift.NewTStruct("getRowsWithColumns_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("rows", thrift.LIST, 2),
			thrift.NewTField("columns", thrift.LIST, 3),
			thrift.NewTField("attributes", thrift.MAP, 4),
		}),
	}
	{
	}
	return output
}

func (p *GetRowsWithColumnsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "rows" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "columns" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v823, err824 := iprot.ReadBinary()
	if err824 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err824)
	}
	p.TableName = Text(v823)
	return err
}

func (p *GetRowsWithColumnsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowsWithColumnsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype830, _size827, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
	}
	p.Rows = thrift.NewTList(_etype830, _size827)
	for _i831 := 0; _i831 < _size827; _i831++ {
		v833, err834 := iprot.ReadBinary()
		if err834 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem832", "", err834)
		}
		_elem832 := Text(v833)
		p.Rows.Push(_elem832)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsArgs) ReadFieldRows(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetRowsWithColumnsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype840, _size837, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	p.Columns = thrift.NewTList(_etype840, _size837)
	for _i841 := 0; _i841 < _size837; _i841++ {
		v843, err844 := iprot.ReadBinary()
		if err844 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem842", "", err844)
		}
		_elem842 := Text(v843)
		p.Columns.Push(_elem842)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsArgs) ReadFieldColumns(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetRowsWithColumnsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype848, _vtype849, _size847, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype848, _vtype849, _size847)
	for _i851 := 0; _i851 < _size847; _i851++ {
		v854, err855 := iprot.ReadBinary()
		if err855 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key852", "", err855)
		}
		_key852 := Text(v854)
		v856, err857 := iprot.ReadBinary()
		if err857 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val853", "", err857)
		}
		_val853 := Text(v856)
		p.Attributes.Set(_key852, _val853)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowsWithColumnsArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *GetRowsWithColumnsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsWithColumns_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowsWithColumnsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Rows != nil {
		err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BINARY, p.Rows.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter858 := range p.Rows.Iter() {
			Iter859 := Iter858.(Text)
			err = oprot.WriteBinary(Iter859)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter859", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsArgs) WriteFieldRows(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetRowsWithColumnsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BINARY, p.Columns.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter860 := range p.Columns.Iter() {
			Iter861 := Iter860.(Text)
			err = oprot.WriteBinary(Iter861)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter861", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsArgs) WriteFieldColumns(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetRowsWithColumnsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter862 := range p.Attributes.Iter() {
			Kiter863, Viter864 := Miter862.Key().(Text), Miter862.Value().(Text)
			err = oprot.WriteBinary(Kiter863)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter863", "", err)
			}
			err = oprot.WriteBinary(Viter864)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter864", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *GetRowsWithColumnsArgs) TStructName() string {
	return "GetRowsWithColumnsArgs"
}

func (p *GetRowsWithColumnsArgs) ThriftName() string {
	return "getRowsWithColumns_args"
}

func (p *GetRowsWithColumnsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowsWithColumnsArgs(%+v)", *p)
}

func (p *GetRowsWithColumnsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowsWithColumnsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowsWithColumnsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Rows
	case 3:
		return p.Columns
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *GetRowsWithColumnsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("rows", thrift.LIST, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowsWithColumnsResult struct {
	thrift.TStruct
	Success thrift.TList "success" // 0
	Io      *IOError     "io"      // 1
}

func NewGetRowsWithColumnsResult() *GetRowsWithColumnsResult {
	output := &GetRowsWithColumnsResult{
		TStruct: thrift.NewTStruct("getRowsWithColumns_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetRowsWithColumnsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype870, _size867, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype870, _size867)
	for _i871 := 0; _i871 < _size867; _i871++ {
		_elem872 := NewTRowResult()
		err875 := _elem872.Read(iprot)
		if err875 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem872TRowResult", err875)
		}
		p.Success.Push(_elem872)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetRowsWithColumnsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err878 := p.Io.Read(iprot)
	if err878 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err878)
	}
	return err
}

func (p *GetRowsWithColumnsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowsWithColumnsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsWithColumns_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter879 := range p.Success.Iter() {
			Iter880 := Iter879.(*TRowResult)
			err = Iter880.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetRowsWithColumnsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowsWithColumnsResult) TStructName() string {
	return "GetRowsWithColumnsResult"
}

func (p *GetRowsWithColumnsResult) ThriftName() string {
	return "getRowsWithColumns_result"
}

func (p *GetRowsWithColumnsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowsWithColumnsResult(%+v)", *p)
}

func (p *GetRowsWithColumnsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowsWithColumnsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowsWithColumnsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowsWithColumnsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of the table
 *  - Rows: row keys
 *  - Timestamp: timestamp
 *  - Attributes: Get attributes
 */
type GetRowsTsArgs struct {
	thrift.TStruct
	TableName  Text         "tableName"  // 1
	Rows       thrift.TList "rows"       // 2
	Timestamp  int64        "timestamp"  // 3
	Attributes thrift.TMap  "attributes" // 4
}

func NewGetRowsTsArgs() *GetRowsTsArgs {
	output := &GetRowsTsArgs{
		TStruct: thrift.NewTStruct("getRowsTs_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("rows", thrift.LIST, 2),
			thrift.NewTField("timestamp", thrift.I64, 3),
			thrift.NewTField("attributes", thrift.MAP, 4),
		}),
	}
	{
	}
	return output
}

func (p *GetRowsTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "rows" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "timestamp" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v881, err882 := iprot.ReadBinary()
	if err882 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err882)
	}
	p.TableName = Text(v881)
	return err
}

func (p *GetRowsTsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowsTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype888, _size885, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
	}
	p.Rows = thrift.NewTList(_etype888, _size885)
	for _i889 := 0; _i889 < _size885; _i889++ {
		v891, err892 := iprot.ReadBinary()
		if err892 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem890", "", err892)
		}
		_elem890 := Text(v891)
		p.Rows.Push(_elem890)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsTsArgs) ReadFieldRows(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetRowsTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v893, err894 := iprot.ReadI64()
	if err894 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err894)
	}
	p.Timestamp = v893
	return err
}

func (p *GetRowsTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetRowsTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype898, _vtype899, _size897, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype898, _vtype899, _size897)
	for _i901 := 0; _i901 < _size897; _i901++ {
		v904, err905 := iprot.ReadBinary()
		if err905 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key902", "", err905)
		}
		_key902 := Text(v904)
		v906, err907 := iprot.ReadBinary()
		if err907 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val903", "", err907)
		}
		_val903 := Text(v906)
		p.Attributes.Set(_key902, _val903)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowsTsArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *GetRowsTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsTsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowsTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Rows != nil {
		err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BINARY, p.Rows.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter908 := range p.Rows.Iter() {
			Iter909 := Iter908.(Text)
			err = oprot.WriteBinary(Iter909)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter909", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsTsArgs) WriteFieldRows(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetRowsTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetRowsTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter910 := range p.Attributes.Iter() {
			Kiter911, Viter912 := Miter910.Key().(Text), Miter910.Value().(Text)
			err = oprot.WriteBinary(Kiter911)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter911", "", err)
			}
			err = oprot.WriteBinary(Viter912)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter912", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsTsArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *GetRowsTsArgs) TStructName() string {
	return "GetRowsTsArgs"
}

func (p *GetRowsTsArgs) ThriftName() string {
	return "getRowsTs_args"
}

func (p *GetRowsTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowsTsArgs(%+v)", *p)
}

func (p *GetRowsTsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowsTsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowsTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Rows
	case 3:
		return p.Timestamp
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *GetRowsTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("rows", thrift.LIST, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowsTsResult struct {
	thrift.TStruct
	Success thrift.TList "success" // 0
	Io      *IOError     "io"      // 1
}

func NewGetRowsTsResult() *GetRowsTsResult {
	output := &GetRowsTsResult{
		TStruct: thrift.NewTStruct("getRowsTs_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetRowsTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsTsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype918, _size915, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype918, _size915)
	for _i919 := 0; _i919 < _size915; _i919++ {
		_elem920 := NewTRowResult()
		err923 := _elem920.Read(iprot)
		if err923 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem920TRowResult", err923)
		}
		p.Success.Push(_elem920)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsTsResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetRowsTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err926 := p.Io.Read(iprot)
	if err926 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err926)
	}
	return err
}

func (p *GetRowsTsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowsTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsTsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter927 := range p.Success.Iter() {
			Iter928 := Iter927.(*TRowResult)
			err = Iter928.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsTsResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetRowsTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsTsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowsTsResult) TStructName() string {
	return "GetRowsTsResult"
}

func (p *GetRowsTsResult) ThriftName() string {
	return "getRowsTs_result"
}

func (p *GetRowsTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowsTsResult(%+v)", *p)
}

func (p *GetRowsTsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowsTsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowsTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowsTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 *  - Attributes: Get attributes
 */
type GetRowsWithColumnsTsArgs struct {
	thrift.TStruct
	TableName  Text         "tableName"  // 1
	Rows       thrift.TList "rows"       // 2
	Columns    thrift.TList "columns"    // 3
	Timestamp  int64        "timestamp"  // 4
	Attributes thrift.TMap  "attributes" // 5
}

func NewGetRowsWithColumnsTsArgs() *GetRowsWithColumnsTsArgs {
	output := &GetRowsWithColumnsTsArgs{
		TStruct: thrift.NewTStruct("getRowsWithColumnsTs_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("rows", thrift.LIST, 2),
			thrift.NewTField("columns", thrift.LIST, 3),
			thrift.NewTField("timestamp", thrift.I64, 4),
			thrift.NewTField("attributes", thrift.MAP, 5),
		}),
	}
	{
	}
	return output
}

func (p *GetRowsWithColumnsTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "rows" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "columns" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "timestamp" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v929, err930 := iprot.ReadBinary()
	if err930 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err930)
	}
	p.TableName = Text(v929)
	return err
}

func (p *GetRowsWithColumnsTsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowsWithColumnsTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype936, _size933, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
	}
	p.Rows = thrift.NewTList(_etype936, _size933)
	for _i937 := 0; _i937 < _size933; _i937++ {
		v939, err940 := iprot.ReadBinary()
		if err940 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem938", "", err940)
		}
		_elem938 := Text(v939)
		p.Rows.Push(_elem938)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) ReadFieldRows(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetRowsWithColumnsTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype946, _size943, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	p.Columns = thrift.NewTList(_etype946, _size943)
	for _i947 := 0; _i947 < _size943; _i947++ {
		v949, err950 := iprot.ReadBinary()
		if err950 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem948", "", err950)
		}
		_elem948 := Text(v949)
		p.Columns.Push(_elem948)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) ReadFieldColumns(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetRowsWithColumnsTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v951, err952 := iprot.ReadI64()
	if err952 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err952)
	}
	p.Timestamp = v951
	return err
}

func (p *GetRowsWithColumnsTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *GetRowsWithColumnsTsArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype956, _vtype957, _size955, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype956, _vtype957, _size955)
	for _i959 := 0; _i959 < _size955; _i959++ {
		v962, err963 := iprot.ReadBinary()
		if err963 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key960", "", err963)
		}
		_key960 := Text(v962)
		v964, err965 := iprot.ReadBinary()
		if err965 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val961", "", err965)
		}
		_val961 := Text(v964)
		p.Attributes.Set(_key960, _val961)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *GetRowsWithColumnsTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsWithColumnsTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowsWithColumnsTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Rows != nil {
		err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BINARY, p.Rows.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter966 := range p.Rows.Iter() {
			Iter967 := Iter966.(Text)
			err = oprot.WriteBinary(Iter967)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter967", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) WriteFieldRows(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetRowsWithColumnsTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BINARY, p.Columns.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter968 := range p.Columns.Iter() {
			Iter969 := Iter968.(Text)
			err = oprot.WriteBinary(Iter969)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter969", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) WriteFieldColumns(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetRowsWithColumnsTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *GetRowsWithColumnsTsArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter970 := range p.Attributes.Iter() {
			Kiter971, Viter972 := Miter970.Key().(Text), Miter970.Value().(Text)
			err = oprot.WriteBinary(Kiter971)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter971", "", err)
			}
			err = oprot.WriteBinary(Viter972)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter972", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *GetRowsWithColumnsTsArgs) TStructName() string {
	return "GetRowsWithColumnsTsArgs"
}

func (p *GetRowsWithColumnsTsArgs) ThriftName() string {
	return "getRowsWithColumnsTs_args"
}

func (p *GetRowsWithColumnsTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowsWithColumnsTsArgs(%+v)", *p)
}

func (p *GetRowsWithColumnsTsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowsWithColumnsTsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowsWithColumnsTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Rows
	case 3:
		return p.Columns
	case 4:
		return p.Timestamp
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *GetRowsWithColumnsTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("rows", thrift.LIST, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowsWithColumnsTsResult struct {
	thrift.TStruct
	Success thrift.TList "success" // 0
	Io      *IOError     "io"      // 1
}

func NewGetRowsWithColumnsTsResult() *GetRowsWithColumnsTsResult {
	output := &GetRowsWithColumnsTsResult{
		TStruct: thrift.NewTStruct("getRowsWithColumnsTs_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetRowsWithColumnsTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype978, _size975, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype978, _size975)
	for _i979 := 0; _i979 < _size975; _i979++ {
		_elem980 := NewTRowResult()
		err983 := _elem980.Read(iprot)
		if err983 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem980TRowResult", err983)
		}
		p.Success.Push(_elem980)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetRowsWithColumnsTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err986 := p.Io.Read(iprot)
	if err986 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err986)
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowsWithColumnsTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsWithColumnsTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter987 := range p.Success.Iter() {
			Iter988 := Iter987.(*TRowResult)
			err = Iter988.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetRowsWithColumnsTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowsWithColumnsTsResult) TStructName() string {
	return "GetRowsWithColumnsTsResult"
}

func (p *GetRowsWithColumnsTsResult) ThriftName() string {
	return "getRowsWithColumnsTs_result"
}

func (p *GetRowsWithColumnsTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowsWithColumnsTsResult(%+v)", *p)
}

func (p *GetRowsWithColumnsTsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowsWithColumnsTsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowsWithColumnsTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowsWithColumnsTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Mutations: list of mutation commands
 *  - Attributes: Mutation attributes
 */
type MutateRowArgs struct {
	thrift.TStruct
	TableName  Text         "tableName"  // 1
	Row        Text         "row"        // 2
	Mutations  thrift.TList "mutations"  // 3
	Attributes thrift.TMap  "attributes" // 4
}

func NewMutateRowArgs() *MutateRowArgs {
	output := &MutateRowArgs{
		TStruct: thrift.NewTStruct("mutateRow_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("row", thrift.BINARY, 2),
			thrift.NewTField("mutations", thrift.LIST, 3),
			thrift.NewTField("attributes", thrift.MAP, 4),
		}),
	}
	{
	}
	return output
}

func (p *MutateRowArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "mutations" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v989, err990 := iprot.ReadBinary()
	if err990 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err990)
	}
	p.TableName = Text(v989)
	return err
}

func (p *MutateRowArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *MutateRowArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v991, err992 := iprot.ReadBinary()
	if err992 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err992)
	}
	p.Row = Text(v991)
	return err
}

func (p *MutateRowArgs) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *MutateRowArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype998, _size995, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Mutations", "", err)
	}
	p.Mutations = thrift.NewTList(_etype998, _size995)
	for _i999 := 0; _i999 < _size995; _i999++ {
		_elem1000 := NewMutation()
		err1003 := _elem1000.Read(iprot)
		if err1003 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1000Mutation", err1003)
		}
		p.Mutations.Push(_elem1000)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *MutateRowArgs) ReadFieldMutations(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *MutateRowArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1007, _vtype1008, _size1006, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype1007, _vtype1008, _size1006)
	for _i1010 := 0; _i1010 < _size1006; _i1010++ {
		v1013, err1014 := iprot.ReadBinary()
		if err1014 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1011", "", err1014)
		}
		_key1011 := Text(v1013)
		v1015, err1016 := iprot.ReadBinary()
		if err1016 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1012", "", err1016)
		}
		_val1012 := Text(v1015)
		p.Attributes.Set(_key1011, _val1012)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *MutateRowArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *MutateRowArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRow_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *MutateRowArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowArgs) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *MutateRowArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Mutations != nil {
		err = oprot.WriteFieldBegin("mutations", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "mutations", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Mutations.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter1017 := range p.Mutations.Iter() {
			Iter1018 := Iter1017.(*Mutation)
			err = Iter1018.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Mutation", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "mutations", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowArgs) WriteFieldMutations(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *MutateRowArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1019 := range p.Attributes.Iter() {
			Kiter1020, Viter1021 := Miter1019.Key().(Text), Miter1019.Value().(Text)
			err = oprot.WriteBinary(Kiter1020)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1020", "", err)
			}
			err = oprot.WriteBinary(Viter1021)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1021", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *MutateRowArgs) TStructName() string {
	return "MutateRowArgs"
}

func (p *MutateRowArgs) ThriftName() string {
	return "mutateRow_args"
}

func (p *MutateRowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MutateRowArgs(%+v)", *p)
}

func (p *MutateRowArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MutateRowArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *MutateRowArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Mutations
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *MutateRowArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("row", thrift.BINARY, 2),
		thrift.NewTField("mutations", thrift.LIST, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type MutateRowResult struct {
	thrift.TStruct
	Io *IOError         "io" // 1
	Ia *IllegalArgument "ia" // 2
}

func NewMutateRowResult() *MutateRowResult {
	output := &MutateRowResult{
		TStruct: thrift.NewTStruct("mutateRow_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
			thrift.NewTField("ia", thrift.STRUCT, 2),
		}),
	}
	{
	}
	return output
}

func (p *MutateRowResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ia" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1024 := p.Io.Read(iprot)
	if err1024 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1024)
	}
	return err
}

func (p *MutateRowResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *MutateRowResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1027 := p.Ia.Read(iprot)
	if err1027 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1027)
	}
	return err
}

func (p *MutateRowResult) ReadFieldIa(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *MutateRowResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRow_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *MutateRowResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowResult) WriteFieldIa(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *MutateRowResult) TStructName() string {
	return "MutateRowResult"
}

func (p *MutateRowResult) ThriftName() string {
	return "mutateRow_result"
}

func (p *MutateRowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MutateRowResult(%+v)", *p)
}

func (p *MutateRowResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MutateRowResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *MutateRowResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *MutateRowResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Mutations: list of mutation commands
 *  - Timestamp: timestamp
 *  - Attributes: Mutation attributes
 */
type MutateRowTsArgs struct {
	thrift.TStruct
	TableName  Text         "tableName"  // 1
	Row        Text         "row"        // 2
	Mutations  thrift.TList "mutations"  // 3
	Timestamp  int64        "timestamp"  // 4
	Attributes thrift.TMap  "attributes" // 5
}

func NewMutateRowTsArgs() *MutateRowTsArgs {
	output := &MutateRowTsArgs{
		TStruct: thrift.NewTStruct("mutateRowTs_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("row", thrift.BINARY, 2),
			thrift.NewTField("mutations", thrift.LIST, 3),
			thrift.NewTField("timestamp", thrift.I64, 4),
			thrift.NewTField("attributes", thrift.MAP, 5),
		}),
	}
	{
	}
	return output
}

func (p *MutateRowTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "mutations" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "timestamp" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1028, err1029 := iprot.ReadBinary()
	if err1029 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1029)
	}
	p.TableName = Text(v1028)
	return err
}

func (p *MutateRowTsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *MutateRowTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1030, err1031 := iprot.ReadBinary()
	if err1031 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1031)
	}
	p.Row = Text(v1030)
	return err
}

func (p *MutateRowTsArgs) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *MutateRowTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1037, _size1034, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Mutations", "", err)
	}
	p.Mutations = thrift.NewTList(_etype1037, _size1034)
	for _i1038 := 0; _i1038 < _size1034; _i1038++ {
		_elem1039 := NewMutation()
		err1042 := _elem1039.Read(iprot)
		if err1042 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1039Mutation", err1042)
		}
		p.Mutations.Push(_elem1039)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *MutateRowTsArgs) ReadFieldMutations(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *MutateRowTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1043, err1044 := iprot.ReadI64()
	if err1044 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err1044)
	}
	p.Timestamp = v1043
	return err
}

func (p *MutateRowTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *MutateRowTsArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1048, _vtype1049, _size1047, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype1048, _vtype1049, _size1047)
	for _i1051 := 0; _i1051 < _size1047; _i1051++ {
		v1054, err1055 := iprot.ReadBinary()
		if err1055 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1052", "", err1055)
		}
		_key1052 := Text(v1054)
		v1056, err1057 := iprot.ReadBinary()
		if err1057 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1053", "", err1057)
		}
		_val1053 := Text(v1056)
		p.Attributes.Set(_key1052, _val1053)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *MutateRowTsArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *MutateRowTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRowTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *MutateRowTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsArgs) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *MutateRowTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Mutations != nil {
		err = oprot.WriteFieldBegin("mutations", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "mutations", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Mutations.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter1058 := range p.Mutations.Iter() {
			Iter1059 := Iter1058.(*Mutation)
			err = Iter1059.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Mutation", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "mutations", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsArgs) WriteFieldMutations(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *MutateRowTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *MutateRowTsArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1060 := range p.Attributes.Iter() {
			Kiter1061, Viter1062 := Miter1060.Key().(Text), Miter1060.Value().(Text)
			err = oprot.WriteBinary(Kiter1061)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1061", "", err)
			}
			err = oprot.WriteBinary(Viter1062)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1062", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *MutateRowTsArgs) TStructName() string {
	return "MutateRowTsArgs"
}

func (p *MutateRowTsArgs) ThriftName() string {
	return "mutateRowTs_args"
}

func (p *MutateRowTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MutateRowTsArgs(%+v)", *p)
}

func (p *MutateRowTsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MutateRowTsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *MutateRowTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Mutations
	case 4:
		return p.Timestamp
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *MutateRowTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("row", thrift.BINARY, 2),
		thrift.NewTField("mutations", thrift.LIST, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type MutateRowTsResult struct {
	thrift.TStruct
	Io *IOError         "io" // 1
	Ia *IllegalArgument "ia" // 2
}

func NewMutateRowTsResult() *MutateRowTsResult {
	output := &MutateRowTsResult{
		TStruct: thrift.NewTStruct("mutateRowTs_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
			thrift.NewTField("ia", thrift.STRUCT, 2),
		}),
	}
	{
	}
	return output
}

func (p *MutateRowTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ia" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1065 := p.Io.Read(iprot)
	if err1065 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1065)
	}
	return err
}

func (p *MutateRowTsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *MutateRowTsResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1068 := p.Ia.Read(iprot)
	if err1068 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1068)
	}
	return err
}

func (p *MutateRowTsResult) ReadFieldIa(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *MutateRowTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRowTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *MutateRowTsResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsResult) WriteFieldIa(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *MutateRowTsResult) TStructName() string {
	return "MutateRowTsResult"
}

func (p *MutateRowTsResult) ThriftName() string {
	return "mutateRowTs_result"
}

func (p *MutateRowTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MutateRowTsResult(%+v)", *p)
}

func (p *MutateRowTsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MutateRowTsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *MutateRowTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *MutateRowTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - RowBatches: list of row batches
 *  - Attributes: Mutation attributes
 */
type MutateRowsArgs struct {
	thrift.TStruct
	TableName  Text         "tableName"  // 1
	RowBatches thrift.TList "rowBatches" // 2
	Attributes thrift.TMap  "attributes" // 3
}

func NewMutateRowsArgs() *MutateRowsArgs {
	output := &MutateRowsArgs{
		TStruct: thrift.NewTStruct("mutateRows_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("rowBatches", thrift.LIST, 2),
			thrift.NewTField("attributes", thrift.MAP, 3),
		}),
	}
	{
	}
	return output
}

func (p *MutateRowsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "rowBatches" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1069, err1070 := iprot.ReadBinary()
	if err1070 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1070)
	}
	p.TableName = Text(v1069)
	return err
}

func (p *MutateRowsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *MutateRowsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1076, _size1073, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.RowBatches", "", err)
	}
	p.RowBatches = thrift.NewTList(_etype1076, _size1073)
	for _i1077 := 0; _i1077 < _size1073; _i1077++ {
		_elem1078 := NewBatchMutation()
		err1081 := _elem1078.Read(iprot)
		if err1081 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1078BatchMutation", err1081)
		}
		p.RowBatches.Push(_elem1078)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *MutateRowsArgs) ReadFieldRowBatches(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *MutateRowsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1085, _vtype1086, _size1084, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype1085, _vtype1086, _size1084)
	for _i1088 := 0; _i1088 < _size1084; _i1088++ {
		v1091, err1092 := iprot.ReadBinary()
		if err1092 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1089", "", err1092)
		}
		_key1089 := Text(v1091)
		v1093, err1094 := iprot.ReadBinary()
		if err1094 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1090", "", err1094)
		}
		_val1090 := Text(v1093)
		p.Attributes.Set(_key1089, _val1090)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *MutateRowsArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *MutateRowsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRows_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *MutateRowsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.RowBatches != nil {
		err = oprot.WriteFieldBegin("rowBatches", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rowBatches", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.RowBatches.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter1095 := range p.RowBatches.Iter() {
			Iter1096 := Iter1095.(*BatchMutation)
			err = Iter1096.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("BatchMutation", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rowBatches", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsArgs) WriteFieldRowBatches(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *MutateRowsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1097 := range p.Attributes.Iter() {
			Kiter1098, Viter1099 := Miter1097.Key().(Text), Miter1097.Value().(Text)
			err = oprot.WriteBinary(Kiter1098)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1098", "", err)
			}
			err = oprot.WriteBinary(Viter1099)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1099", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *MutateRowsArgs) TStructName() string {
	return "MutateRowsArgs"
}

func (p *MutateRowsArgs) ThriftName() string {
	return "mutateRows_args"
}

func (p *MutateRowsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MutateRowsArgs(%+v)", *p)
}

func (p *MutateRowsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MutateRowsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *MutateRowsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.RowBatches
	case 3:
		return p.Attributes
	}
	return nil
}

func (p *MutateRowsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("rowBatches", thrift.LIST, 2),
		thrift.NewTField("attributes", thrift.MAP, 3),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type MutateRowsResult struct {
	thrift.TStruct
	Io *IOError         "io" // 1
	Ia *IllegalArgument "ia" // 2
}

func NewMutateRowsResult() *MutateRowsResult {
	output := &MutateRowsResult{
		TStruct: thrift.NewTStruct("mutateRows_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
			thrift.NewTField("ia", thrift.STRUCT, 2),
		}),
	}
	{
	}
	return output
}

func (p *MutateRowsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ia" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1102 := p.Io.Read(iprot)
	if err1102 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1102)
	}
	return err
}

func (p *MutateRowsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *MutateRowsResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1105 := p.Ia.Read(iprot)
	if err1105 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1105)
	}
	return err
}

func (p *MutateRowsResult) ReadFieldIa(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *MutateRowsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRows_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *MutateRowsResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsResult) WriteFieldIa(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *MutateRowsResult) TStructName() string {
	return "MutateRowsResult"
}

func (p *MutateRowsResult) ThriftName() string {
	return "mutateRows_result"
}

func (p *MutateRowsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MutateRowsResult(%+v)", *p)
}

func (p *MutateRowsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MutateRowsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *MutateRowsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *MutateRowsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - RowBatches: list of row batches
 *  - Timestamp: timestamp
 *  - Attributes: Mutation attributes
 */
type MutateRowsTsArgs struct {
	thrift.TStruct
	TableName  Text         "tableName"  // 1
	RowBatches thrift.TList "rowBatches" // 2
	Timestamp  int64        "timestamp"  // 3
	Attributes thrift.TMap  "attributes" // 4
}

func NewMutateRowsTsArgs() *MutateRowsTsArgs {
	output := &MutateRowsTsArgs{
		TStruct: thrift.NewTStruct("mutateRowsTs_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("rowBatches", thrift.LIST, 2),
			thrift.NewTField("timestamp", thrift.I64, 3),
			thrift.NewTField("attributes", thrift.MAP, 4),
		}),
	}
	{
	}
	return output
}

func (p *MutateRowsTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "rowBatches" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "timestamp" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1106, err1107 := iprot.ReadBinary()
	if err1107 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1107)
	}
	p.TableName = Text(v1106)
	return err
}

func (p *MutateRowsTsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *MutateRowsTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1113, _size1110, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.RowBatches", "", err)
	}
	p.RowBatches = thrift.NewTList(_etype1113, _size1110)
	for _i1114 := 0; _i1114 < _size1110; _i1114++ {
		_elem1115 := NewBatchMutation()
		err1118 := _elem1115.Read(iprot)
		if err1118 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1115BatchMutation", err1118)
		}
		p.RowBatches.Push(_elem1115)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *MutateRowsTsArgs) ReadFieldRowBatches(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *MutateRowsTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1119, err1120 := iprot.ReadI64()
	if err1120 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err1120)
	}
	p.Timestamp = v1119
	return err
}

func (p *MutateRowsTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *MutateRowsTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1124, _vtype1125, _size1123, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype1124, _vtype1125, _size1123)
	for _i1127 := 0; _i1127 < _size1123; _i1127++ {
		v1130, err1131 := iprot.ReadBinary()
		if err1131 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1128", "", err1131)
		}
		_key1128 := Text(v1130)
		v1132, err1133 := iprot.ReadBinary()
		if err1133 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1129", "", err1133)
		}
		_val1129 := Text(v1132)
		p.Attributes.Set(_key1128, _val1129)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *MutateRowsTsArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *MutateRowsTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRowsTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsTsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *MutateRowsTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.RowBatches != nil {
		err = oprot.WriteFieldBegin("rowBatches", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rowBatches", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.RowBatches.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter1134 := range p.RowBatches.Iter() {
			Iter1135 := Iter1134.(*BatchMutation)
			err = Iter1135.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("BatchMutation", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rowBatches", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsTsArgs) WriteFieldRowBatches(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *MutateRowsTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *MutateRowsTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1136 := range p.Attributes.Iter() {
			Kiter1137, Viter1138 := Miter1136.Key().(Text), Miter1136.Value().(Text)
			err = oprot.WriteBinary(Kiter1137)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1137", "", err)
			}
			err = oprot.WriteBinary(Viter1138)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1138", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsTsArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *MutateRowsTsArgs) TStructName() string {
	return "MutateRowsTsArgs"
}

func (p *MutateRowsTsArgs) ThriftName() string {
	return "mutateRowsTs_args"
}

func (p *MutateRowsTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MutateRowsTsArgs(%+v)", *p)
}

func (p *MutateRowsTsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MutateRowsTsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *MutateRowsTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.RowBatches
	case 3:
		return p.Timestamp
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *MutateRowsTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("rowBatches", thrift.LIST, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type MutateRowsTsResult struct {
	thrift.TStruct
	Io *IOError         "io" // 1
	Ia *IllegalArgument "ia" // 2
}

func NewMutateRowsTsResult() *MutateRowsTsResult {
	output := &MutateRowsTsResult{
		TStruct: thrift.NewTStruct("mutateRowsTs_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
			thrift.NewTField("ia", thrift.STRUCT, 2),
		}),
	}
	{
	}
	return output
}

func (p *MutateRowsTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ia" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1141 := p.Io.Read(iprot)
	if err1141 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1141)
	}
	return err
}

func (p *MutateRowsTsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *MutateRowsTsResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1144 := p.Ia.Read(iprot)
	if err1144 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1144)
	}
	return err
}

func (p *MutateRowsTsResult) ReadFieldIa(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *MutateRowsTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRowsTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsTsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *MutateRowsTsResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsTsResult) WriteFieldIa(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *MutateRowsTsResult) TStructName() string {
	return "MutateRowsTsResult"
}

func (p *MutateRowsTsResult) ThriftName() string {
	return "mutateRowsTs_result"
}

func (p *MutateRowsTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MutateRowsTsResult(%+v)", *p)
}

func (p *MutateRowsTsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MutateRowsTsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *MutateRowsTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *MutateRowsTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row to increment
 *  - Column: name of column
 *  - Value: amount to increment by
 */
type AtomicIncrementArgs struct {
	thrift.TStruct
	TableName Text  "tableName" // 1
	Row       Text  "row"       // 2
	Column    Text  "column"    // 3
	Value     int64 "value"     // 4
}

func NewAtomicIncrementArgs() *AtomicIncrementArgs {
	output := &AtomicIncrementArgs{
		TStruct: thrift.NewTStruct("atomicIncrement_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("row", thrift.BINARY, 2),
			thrift.NewTField("column", thrift.BINARY, 3),
			thrift.NewTField("value", thrift.I64, 4),
		}),
	}
	{
	}
	return output
}

func (p *AtomicIncrementArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "column" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "value" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1145, err1146 := iprot.ReadBinary()
	if err1146 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1146)
	}
	p.TableName = Text(v1145)
	return err
}

func (p *AtomicIncrementArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *AtomicIncrementArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1147, err1148 := iprot.ReadBinary()
	if err1148 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1148)
	}
	p.Row = Text(v1147)
	return err
}

func (p *AtomicIncrementArgs) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *AtomicIncrementArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1149, err1150 := iprot.ReadBinary()
	if err1150 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err1150)
	}
	p.Column = Text(v1149)
	return err
}

func (p *AtomicIncrementArgs) ReadFieldColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *AtomicIncrementArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1151, err1152 := iprot.ReadI64()
	if err1152 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "value", p.ThriftName(), err1152)
	}
	p.Value = v1151
	return err
}

func (p *AtomicIncrementArgs) ReadFieldValue(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *AtomicIncrementArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("atomicIncrement_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicIncrementArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *AtomicIncrementArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicIncrementArgs) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *AtomicIncrementArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.BINARY, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicIncrementArgs) WriteFieldColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *AtomicIncrementArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("value", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "value", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Value))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "value", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "value", p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementArgs) WriteFieldValue(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *AtomicIncrementArgs) TStructName() string {
	return "AtomicIncrementArgs"
}

func (p *AtomicIncrementArgs) ThriftName() string {
	return "atomicIncrement_args"
}

func (p *AtomicIncrementArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AtomicIncrementArgs(%+v)", *p)
}

func (p *AtomicIncrementArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*AtomicIncrementArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *AtomicIncrementArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Value
	}
	return nil
}

func (p *AtomicIncrementArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("row", thrift.BINARY, 2),
		thrift.NewTField("column", thrift.BINARY, 3),
		thrift.NewTField("value", thrift.I64, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 *  - Ia
 */
type AtomicIncrementResult struct {
	thrift.TStruct
	Success int64            "success" // 0
	Io      *IOError         "io"      // 1
	Ia      *IllegalArgument "ia"      // 2
}

func NewAtomicIncrementResult() *AtomicIncrementResult {
	output := &AtomicIncrementResult{
		TStruct: thrift.NewTStruct("atomicIncrement_result", []thrift.TField{
			thrift.NewTField("success", thrift.I64, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
			thrift.NewTField("ia", thrift.STRUCT, 2),
		}),
	}
	{
	}
	return output
}

func (p *AtomicIncrementResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ia" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1153, err1154 := iprot.ReadI64()
	if err1154 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1154)
	}
	p.Success = v1153
	return err
}

func (p *AtomicIncrementResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *AtomicIncrementResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1157 := p.Io.Read(iprot)
	if err1157 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1157)
	}
	return err
}

func (p *AtomicIncrementResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *AtomicIncrementResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1160 := p.Ia.Read(iprot)
	if err1160 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1160)
	}
	return err
}

func (p *AtomicIncrementResult) ReadFieldIa(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *AtomicIncrementResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("atomicIncrement_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I64, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *AtomicIncrementResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicIncrementResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *AtomicIncrementResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicIncrementResult) WriteFieldIa(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *AtomicIncrementResult) TStructName() string {
	return "AtomicIncrementResult"
}

func (p *AtomicIncrementResult) ThriftName() string {
	return "atomicIncrement_result"
}

func (p *AtomicIncrementResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AtomicIncrementResult(%+v)", *p)
}

func (p *AtomicIncrementResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*AtomicIncrementResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *AtomicIncrementResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *AtomicIncrementResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I64, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: Row to update
 *  - Column: name of column whose value is to be deleted
 *  - Attributes: Delete attributes
 */
type DeleteAllArgs struct {
	thrift.TStruct
	TableName  Text        "tableName"  // 1
	Row        Text        "row"        // 2
	Column     Text        "column"     // 3
	Attributes thrift.TMap "attributes" // 4
}

func NewDeleteAllArgs() *DeleteAllArgs {
	output := &DeleteAllArgs{
		TStruct: thrift.NewTStruct("deleteAll_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("row", thrift.BINARY, 2),
			thrift.NewTField("column", thrift.BINARY, 3),
			thrift.NewTField("attributes", thrift.MAP, 4),
		}),
	}
	{
	}
	return output
}

func (p *DeleteAllArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "column" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1161, err1162 := iprot.ReadBinary()
	if err1162 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1162)
	}
	p.TableName = Text(v1161)
	return err
}

func (p *DeleteAllArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DeleteAllArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1163, err1164 := iprot.ReadBinary()
	if err1164 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1164)
	}
	p.Row = Text(v1163)
	return err
}

func (p *DeleteAllArgs) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *DeleteAllArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1165, err1166 := iprot.ReadBinary()
	if err1166 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err1166)
	}
	p.Column = Text(v1165)
	return err
}

func (p *DeleteAllArgs) ReadFieldColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *DeleteAllArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1170, _vtype1171, _size1169, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype1170, _vtype1171, _size1169)
	for _i1173 := 0; _i1173 < _size1169; _i1173++ {
		v1176, err1177 := iprot.ReadBinary()
		if err1177 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1174", "", err1177)
		}
		_key1174 := Text(v1176)
		v1178, err1179 := iprot.ReadBinary()
		if err1179 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1175", "", err1179)
		}
		_val1175 := Text(v1178)
		p.Attributes.Set(_key1174, _val1175)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *DeleteAllArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *DeleteAllArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAll_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DeleteAllArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllArgs) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *DeleteAllArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.BINARY, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllArgs) WriteFieldColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *DeleteAllArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1180 := range p.Attributes.Iter() {
			Kiter1181, Viter1182 := Miter1180.Key().(Text), Miter1180.Value().(Text)
			err = oprot.WriteBinary(Kiter1181)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1181", "", err)
			}
			err = oprot.WriteBinary(Viter1182)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1182", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *DeleteAllArgs) TStructName() string {
	return "DeleteAllArgs"
}

func (p *DeleteAllArgs) ThriftName() string {
	return "deleteAll_args"
}

func (p *DeleteAllArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteAllArgs(%+v)", *p)
}

func (p *DeleteAllArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DeleteAllArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *DeleteAllArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *DeleteAllArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("row", thrift.BINARY, 2),
		thrift.NewTField("column", thrift.BINARY, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DeleteAllResult struct {
	thrift.TStruct
	Io *IOError "io" // 1
}

func NewDeleteAllResult() *DeleteAllResult {
	output := &DeleteAllResult{
		TStruct: thrift.NewTStruct("deleteAll_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *DeleteAllResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1185 := p.Io.Read(iprot)
	if err1185 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1185)
	}
	return err
}

func (p *DeleteAllResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DeleteAllResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAll_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DeleteAllResult) TStructName() string {
	return "DeleteAllResult"
}

func (p *DeleteAllResult) ThriftName() string {
	return "deleteAll_result"
}

func (p *DeleteAllResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteAllResult(%+v)", *p)
}

func (p *DeleteAllResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DeleteAllResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *DeleteAllResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DeleteAllResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: Row to update
 *  - Column: name of column whose value is to be deleted
 *  - Timestamp: timestamp
 *  - Attributes: Delete attributes
 */
type DeleteAllTsArgs struct {
	thrift.TStruct
	TableName  Text        "tableName"  // 1
	Row        Text        "row"        // 2
	Column     Text        "column"     // 3
	Timestamp  int64       "timestamp"  // 4
	Attributes thrift.TMap "attributes" // 5
}

func NewDeleteAllTsArgs() *DeleteAllTsArgs {
	output := &DeleteAllTsArgs{
		TStruct: thrift.NewTStruct("deleteAllTs_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("row", thrift.BINARY, 2),
			thrift.NewTField("column", thrift.BINARY, 3),
			thrift.NewTField("timestamp", thrift.I64, 4),
			thrift.NewTField("attributes", thrift.MAP, 5),
		}),
	}
	{
	}
	return output
}

func (p *DeleteAllTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "column" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "timestamp" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1186, err1187 := iprot.ReadBinary()
	if err1187 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1187)
	}
	p.TableName = Text(v1186)
	return err
}

func (p *DeleteAllTsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DeleteAllTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1188, err1189 := iprot.ReadBinary()
	if err1189 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1189)
	}
	p.Row = Text(v1188)
	return err
}

func (p *DeleteAllTsArgs) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *DeleteAllTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1190, err1191 := iprot.ReadBinary()
	if err1191 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err1191)
	}
	p.Column = Text(v1190)
	return err
}

func (p *DeleteAllTsArgs) ReadFieldColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *DeleteAllTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1192, err1193 := iprot.ReadI64()
	if err1193 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err1193)
	}
	p.Timestamp = v1192
	return err
}

func (p *DeleteAllTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *DeleteAllTsArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1197, _vtype1198, _size1196, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype1197, _vtype1198, _size1196)
	for _i1200 := 0; _i1200 < _size1196; _i1200++ {
		v1203, err1204 := iprot.ReadBinary()
		if err1204 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1201", "", err1204)
		}
		_key1201 := Text(v1203)
		v1205, err1206 := iprot.ReadBinary()
		if err1206 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1202", "", err1206)
		}
		_val1202 := Text(v1205)
		p.Attributes.Set(_key1201, _val1202)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *DeleteAllTsArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *DeleteAllTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllTsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DeleteAllTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllTsArgs) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *DeleteAllTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.BINARY, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllTsArgs) WriteFieldColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *DeleteAllTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *DeleteAllTsArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1207 := range p.Attributes.Iter() {
			Kiter1208, Viter1209 := Miter1207.Key().(Text), Miter1207.Value().(Text)
			err = oprot.WriteBinary(Kiter1208)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1208", "", err)
			}
			err = oprot.WriteBinary(Viter1209)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1209", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllTsArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *DeleteAllTsArgs) TStructName() string {
	return "DeleteAllTsArgs"
}

func (p *DeleteAllTsArgs) ThriftName() string {
	return "deleteAllTs_args"
}

func (p *DeleteAllTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteAllTsArgs(%+v)", *p)
}

func (p *DeleteAllTsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DeleteAllTsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *DeleteAllTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Timestamp
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *DeleteAllTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("row", thrift.BINARY, 2),
		thrift.NewTField("column", thrift.BINARY, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DeleteAllTsResult struct {
	thrift.TStruct
	Io *IOError "io" // 1
}

func NewDeleteAllTsResult() *DeleteAllTsResult {
	output := &DeleteAllTsResult{
		TStruct: thrift.NewTStruct("deleteAllTs_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *DeleteAllTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1212 := p.Io.Read(iprot)
	if err1212 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1212)
	}
	return err
}

func (p *DeleteAllTsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DeleteAllTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllTsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DeleteAllTsResult) TStructName() string {
	return "DeleteAllTsResult"
}

func (p *DeleteAllTsResult) ThriftName() string {
	return "deleteAllTs_result"
}

func (p *DeleteAllTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteAllTsResult(%+v)", *p)
}

func (p *DeleteAllTsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DeleteAllTsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *DeleteAllTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DeleteAllTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: key of the row to be completely deleted.
 *  - Attributes: Delete attributes
 */
type DeleteAllRowArgs struct {
	thrift.TStruct
	TableName  Text        "tableName"  // 1
	Row        Text        "row"        // 2
	Attributes thrift.TMap "attributes" // 3
}

func NewDeleteAllRowArgs() *DeleteAllRowArgs {
	output := &DeleteAllRowArgs{
		TStruct: thrift.NewTStruct("deleteAllRow_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("row", thrift.BINARY, 2),
			thrift.NewTField("attributes", thrift.MAP, 3),
		}),
	}
	{
	}
	return output
}

func (p *DeleteAllRowArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1213, err1214 := iprot.ReadBinary()
	if err1214 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1214)
	}
	p.TableName = Text(v1213)
	return err
}

func (p *DeleteAllRowArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DeleteAllRowArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1215, err1216 := iprot.ReadBinary()
	if err1216 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1216)
	}
	p.Row = Text(v1215)
	return err
}

func (p *DeleteAllRowArgs) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *DeleteAllRowArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1220, _vtype1221, _size1219, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype1220, _vtype1221, _size1219)
	for _i1223 := 0; _i1223 < _size1219; _i1223++ {
		v1226, err1227 := iprot.ReadBinary()
		if err1227 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1224", "", err1227)
		}
		_key1224 := Text(v1226)
		v1228, err1229 := iprot.ReadBinary()
		if err1229 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1225", "", err1229)
		}
		_val1225 := Text(v1228)
		p.Attributes.Set(_key1224, _val1225)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *DeleteAllRowArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *DeleteAllRowArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllRow_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DeleteAllRowArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowArgs) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *DeleteAllRowArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1230 := range p.Attributes.Iter() {
			Kiter1231, Viter1232 := Miter1230.Key().(Text), Miter1230.Value().(Text)
			err = oprot.WriteBinary(Kiter1231)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1231", "", err)
			}
			err = oprot.WriteBinary(Viter1232)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1232", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *DeleteAllRowArgs) TStructName() string {
	return "DeleteAllRowArgs"
}

func (p *DeleteAllRowArgs) ThriftName() string {
	return "deleteAllRow_args"
}

func (p *DeleteAllRowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteAllRowArgs(%+v)", *p)
}

func (p *DeleteAllRowArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DeleteAllRowArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *DeleteAllRowArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Attributes
	}
	return nil
}

func (p *DeleteAllRowArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("row", thrift.BINARY, 2),
		thrift.NewTField("attributes", thrift.MAP, 3),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DeleteAllRowResult struct {
	thrift.TStruct
	Io *IOError "io" // 1
}

func NewDeleteAllRowResult() *DeleteAllRowResult {
	output := &DeleteAllRowResult{
		TStruct: thrift.NewTStruct("deleteAllRow_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *DeleteAllRowResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1235 := p.Io.Read(iprot)
	if err1235 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1235)
	}
	return err
}

func (p *DeleteAllRowResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DeleteAllRowResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllRow_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DeleteAllRowResult) TStructName() string {
	return "DeleteAllRowResult"
}

func (p *DeleteAllRowResult) ThriftName() string {
	return "deleteAllRow_result"
}

func (p *DeleteAllRowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteAllRowResult(%+v)", *p)
}

func (p *DeleteAllRowResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DeleteAllRowResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *DeleteAllRowResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DeleteAllRowResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Increment: The single increment to apply
 */
type IncrementArgs struct {
	thrift.TStruct
	Increment *TIncrement "increment" // 1
}

func NewIncrementArgs() *IncrementArgs {
	output := &IncrementArgs{
		TStruct: thrift.NewTStruct("increment_args", []thrift.TField{
			thrift.NewTField("increment", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *IncrementArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "increment" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Increment = NewTIncrement()
	err1238 := p.Increment.Read(iprot)
	if err1238 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IncrementTIncrement", err1238)
	}
	return err
}

func (p *IncrementArgs) ReadFieldIncrement(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *IncrementArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("increment_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Increment != nil {
		err = oprot.WriteFieldBegin("increment", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "increment", p.ThriftName(), err)
		}
		err = p.Increment.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TIncrement", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "increment", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IncrementArgs) WriteFieldIncrement(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *IncrementArgs) TStructName() string {
	return "IncrementArgs"
}

func (p *IncrementArgs) ThriftName() string {
	return "increment_args"
}

func (p *IncrementArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IncrementArgs(%+v)", *p)
}

func (p *IncrementArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*IncrementArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *IncrementArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Increment
	}
	return nil
}

func (p *IncrementArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("increment", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type IncrementResult struct {
	thrift.TStruct
	Io *IOError "io" // 1
}

func NewIncrementResult() *IncrementResult {
	output := &IncrementResult{
		TStruct: thrift.NewTStruct("increment_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *IncrementResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1241 := p.Io.Read(iprot)
	if err1241 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1241)
	}
	return err
}

func (p *IncrementResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *IncrementResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("increment_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IncrementResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *IncrementResult) TStructName() string {
	return "IncrementResult"
}

func (p *IncrementResult) ThriftName() string {
	return "increment_result"
}

func (p *IncrementResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IncrementResult(%+v)", *p)
}

func (p *IncrementResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*IncrementResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *IncrementResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *IncrementResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Increments: The list of increments
 */
type IncrementRowsArgs struct {
	thrift.TStruct
	Increments thrift.TList "increments" // 1
}

func NewIncrementRowsArgs() *IncrementRowsArgs {
	output := &IncrementRowsArgs{
		TStruct: thrift.NewTStruct("incrementRows_args", []thrift.TField{
			thrift.NewTField("increments", thrift.LIST, 1),
		}),
	}
	{
	}
	return output
}

func (p *IncrementRowsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "increments" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementRowsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1247, _size1244, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Increments", "", err)
	}
	p.Increments = thrift.NewTList(_etype1247, _size1244)
	for _i1248 := 0; _i1248 < _size1244; _i1248++ {
		_elem1249 := NewTIncrement()
		err1252 := _elem1249.Read(iprot)
		if err1252 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1249TIncrement", err1252)
		}
		p.Increments.Push(_elem1249)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *IncrementRowsArgs) ReadFieldIncrements(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *IncrementRowsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("incrementRows_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementRowsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Increments != nil {
		err = oprot.WriteFieldBegin("increments", thrift.LIST, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "increments", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Increments.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter1253 := range p.Increments.Iter() {
			Iter1254 := Iter1253.(*TIncrement)
			err = Iter1254.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TIncrement", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "increments", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IncrementRowsArgs) WriteFieldIncrements(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *IncrementRowsArgs) TStructName() string {
	return "IncrementRowsArgs"
}

func (p *IncrementRowsArgs) ThriftName() string {
	return "incrementRows_args"
}

func (p *IncrementRowsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IncrementRowsArgs(%+v)", *p)
}

func (p *IncrementRowsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*IncrementRowsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *IncrementRowsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Increments
	}
	return nil
}

func (p *IncrementRowsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("increments", thrift.LIST, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type IncrementRowsResult struct {
	thrift.TStruct
	Io *IOError "io" // 1
}

func NewIncrementRowsResult() *IncrementRowsResult {
	output := &IncrementRowsResult{
		TStruct: thrift.NewTStruct("incrementRows_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *IncrementRowsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementRowsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1257 := p.Io.Read(iprot)
	if err1257 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1257)
	}
	return err
}

func (p *IncrementRowsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *IncrementRowsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("incrementRows_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementRowsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IncrementRowsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *IncrementRowsResult) TStructName() string {
	return "IncrementRowsResult"
}

func (p *IncrementRowsResult) ThriftName() string {
	return "incrementRows_result"
}

func (p *IncrementRowsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IncrementRowsResult(%+v)", *p)
}

func (p *IncrementRowsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*IncrementRowsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *IncrementRowsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *IncrementRowsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: key of the row to be completely deleted.
 *  - Timestamp: timestamp
 *  - Attributes: Delete attributes
 */
type DeleteAllRowTsArgs struct {
	thrift.TStruct
	TableName  Text        "tableName"  // 1
	Row        Text        "row"        // 2
	Timestamp  int64       "timestamp"  // 3
	Attributes thrift.TMap "attributes" // 4
}

func NewDeleteAllRowTsArgs() *DeleteAllRowTsArgs {
	output := &DeleteAllRowTsArgs{
		TStruct: thrift.NewTStruct("deleteAllRowTs_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("row", thrift.BINARY, 2),
			thrift.NewTField("timestamp", thrift.I64, 3),
			thrift.NewTField("attributes", thrift.MAP, 4),
		}),
	}
	{
	}
	return output
}

func (p *DeleteAllRowTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "timestamp" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1258, err1259 := iprot.ReadBinary()
	if err1259 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1259)
	}
	p.TableName = Text(v1258)
	return err
}

func (p *DeleteAllRowTsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DeleteAllRowTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1260, err1261 := iprot.ReadBinary()
	if err1261 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1261)
	}
	p.Row = Text(v1260)
	return err
}

func (p *DeleteAllRowTsArgs) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *DeleteAllRowTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1262, err1263 := iprot.ReadI64()
	if err1263 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err1263)
	}
	p.Timestamp = v1262
	return err
}

func (p *DeleteAllRowTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *DeleteAllRowTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1267, _vtype1268, _size1266, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype1267, _vtype1268, _size1266)
	for _i1270 := 0; _i1270 < _size1266; _i1270++ {
		v1273, err1274 := iprot.ReadBinary()
		if err1274 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1271", "", err1274)
		}
		_key1271 := Text(v1273)
		v1275, err1276 := iprot.ReadBinary()
		if err1276 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1272", "", err1276)
		}
		_val1272 := Text(v1275)
		p.Attributes.Set(_key1271, _val1272)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *DeleteAllRowTsArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *DeleteAllRowTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllRowTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowTsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DeleteAllRowTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowTsArgs) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *DeleteAllRowTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *DeleteAllRowTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1277 := range p.Attributes.Iter() {
			Kiter1278, Viter1279 := Miter1277.Key().(Text), Miter1277.Value().(Text)
			err = oprot.WriteBinary(Kiter1278)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1278", "", err)
			}
			err = oprot.WriteBinary(Viter1279)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1279", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowTsArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *DeleteAllRowTsArgs) TStructName() string {
	return "DeleteAllRowTsArgs"
}

func (p *DeleteAllRowTsArgs) ThriftName() string {
	return "deleteAllRowTs_args"
}

func (p *DeleteAllRowTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteAllRowTsArgs(%+v)", *p)
}

func (p *DeleteAllRowTsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DeleteAllRowTsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *DeleteAllRowTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Timestamp
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *DeleteAllRowTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("row", thrift.BINARY, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DeleteAllRowTsResult struct {
	thrift.TStruct
	Io *IOError "io" // 1
}

func NewDeleteAllRowTsResult() *DeleteAllRowTsResult {
	output := &DeleteAllRowTsResult{
		TStruct: thrift.NewTStruct("deleteAllRowTs_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *DeleteAllRowTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1282 := p.Io.Read(iprot)
	if err1282 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1282)
	}
	return err
}

func (p *DeleteAllRowTsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DeleteAllRowTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllRowTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowTsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DeleteAllRowTsResult) TStructName() string {
	return "DeleteAllRowTsResult"
}

func (p *DeleteAllRowTsResult) ThriftName() string {
	return "deleteAllRowTs_result"
}

func (p *DeleteAllRowTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteAllRowTsResult(%+v)", *p)
}

func (p *DeleteAllRowTsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DeleteAllRowTsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *DeleteAllRowTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DeleteAllRowTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Scan: Scan instance
 *  - Attributes: Scan attributes
 */
type ScannerOpenWithScanArgs struct {
	thrift.TStruct
	TableName  Text        "tableName"  // 1
	Scan       *TScan      "scan"       // 2
	Attributes thrift.TMap "attributes" // 3
}

func NewScannerOpenWithScanArgs() *ScannerOpenWithScanArgs {
	output := &ScannerOpenWithScanArgs{
		TStruct: thrift.NewTStruct("scannerOpenWithScan_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("scan", thrift.STRUCT, 2),
			thrift.NewTField("attributes", thrift.MAP, 3),
		}),
	}
	{
	}
	return output
}

func (p *ScannerOpenWithScanArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "scan" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithScanArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1283, err1284 := iprot.ReadBinary()
	if err1284 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1284)
	}
	p.TableName = Text(v1283)
	return err
}

func (p *ScannerOpenWithScanArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerOpenWithScanArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Scan = NewTScan()
	err1287 := p.Scan.Read(iprot)
	if err1287 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ScanTScan", err1287)
	}
	return err
}

func (p *ScannerOpenWithScanArgs) ReadFieldScan(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *ScannerOpenWithScanArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1291, _vtype1292, _size1290, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype1291, _vtype1292, _size1290)
	for _i1294 := 0; _i1294 < _size1290; _i1294++ {
		v1297, err1298 := iprot.ReadBinary()
		if err1298 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1295", "", err1298)
		}
		_key1295 := Text(v1297)
		v1299, err1300 := iprot.ReadBinary()
		if err1300 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1296", "", err1300)
		}
		_val1296 := Text(v1299)
		p.Attributes.Set(_key1295, _val1296)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenWithScanArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *ScannerOpenWithScanArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithScan_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithScanArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithScanArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerOpenWithScanArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Scan != nil {
		err = oprot.WriteFieldBegin("scan", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "scan", p.ThriftName(), err)
		}
		err = p.Scan.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TScan", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "scan", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithScanArgs) WriteFieldScan(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *ScannerOpenWithScanArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1301 := range p.Attributes.Iter() {
			Kiter1302, Viter1303 := Miter1301.Key().(Text), Miter1301.Value().(Text)
			err = oprot.WriteBinary(Kiter1302)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1302", "", err)
			}
			err = oprot.WriteBinary(Viter1303)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1303", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithScanArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *ScannerOpenWithScanArgs) TStructName() string {
	return "ScannerOpenWithScanArgs"
}

func (p *ScannerOpenWithScanArgs) ThriftName() string {
	return "scannerOpenWithScan_args"
}

func (p *ScannerOpenWithScanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerOpenWithScanArgs(%+v)", *p)
}

func (p *ScannerOpenWithScanArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerOpenWithScanArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerOpenWithScanArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Scan
	case 3:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenWithScanArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("scan", thrift.STRUCT, 2),
		thrift.NewTField("attributes", thrift.MAP, 3),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenWithScanResult struct {
	thrift.TStruct
	Success ScannerID "success" // 0
	Io      *IOError  "io"      // 1
}

func NewScannerOpenWithScanResult() *ScannerOpenWithScanResult {
	output := &ScannerOpenWithScanResult{
		TStruct: thrift.NewTStruct("scannerOpenWithScan_result", []thrift.TField{
			thrift.NewTField("success", thrift.I32, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *ScannerOpenWithScanResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithScanResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1304, err1305 := iprot.ReadI32()
	if err1305 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1305)
	}
	p.Success = ScannerID(v1304)
	return err
}

func (p *ScannerOpenWithScanResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *ScannerOpenWithScanResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1308 := p.Io.Read(iprot)
	if err1308 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1308)
	}
	return err
}

func (p *ScannerOpenWithScanResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerOpenWithScanResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithScan_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithScanResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithScanResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *ScannerOpenWithScanResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithScanResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerOpenWithScanResult) TStructName() string {
	return "ScannerOpenWithScanResult"
}

func (p *ScannerOpenWithScanResult) ThriftName() string {
	return "scannerOpenWithScan_result"
}

func (p *ScannerOpenWithScanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerOpenWithScanResult(%+v)", *p)
}

func (p *ScannerOpenWithScanResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerOpenWithScanResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerOpenWithScanResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenWithScanResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Attributes: Scan attributes
 */
type ScannerOpenArgs struct {
	thrift.TStruct
	TableName  Text         "tableName"  // 1
	StartRow   Text         "startRow"   // 2
	Columns    thrift.TList "columns"    // 3
	Attributes thrift.TMap  "attributes" // 4
}

func NewScannerOpenArgs() *ScannerOpenArgs {
	output := &ScannerOpenArgs{
		TStruct: thrift.NewTStruct("scannerOpen_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("startRow", thrift.BINARY, 2),
			thrift.NewTField("columns", thrift.LIST, 3),
			thrift.NewTField("attributes", thrift.MAP, 4),
		}),
	}
	{
	}
	return output
}

func (p *ScannerOpenArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "startRow" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "columns" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1309, err1310 := iprot.ReadBinary()
	if err1310 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1310)
	}
	p.TableName = Text(v1309)
	return err
}

func (p *ScannerOpenArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerOpenArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1311, err1312 := iprot.ReadBinary()
	if err1312 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "startRow", p.ThriftName(), err1312)
	}
	p.StartRow = Text(v1311)
	return err
}

func (p *ScannerOpenArgs) ReadFieldStartRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *ScannerOpenArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1318, _size1315, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	p.Columns = thrift.NewTList(_etype1318, _size1315)
	for _i1319 := 0; _i1319 < _size1315; _i1319++ {
		v1321, err1322 := iprot.ReadBinary()
		if err1322 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1320", "", err1322)
		}
		_elem1320 := Text(v1321)
		p.Columns.Push(_elem1320)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerOpenArgs) ReadFieldColumns(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *ScannerOpenArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1326, _vtype1327, _size1325, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype1326, _vtype1327, _size1325)
	for _i1329 := 0; _i1329 < _size1325; _i1329++ {
		v1332, err1333 := iprot.ReadBinary()
		if err1333 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1330", "", err1333)
		}
		_key1330 := Text(v1332)
		v1334, err1335 := iprot.ReadBinary()
		if err1335 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1331", "", err1335)
		}
		_val1331 := Text(v1334)
		p.Attributes.Set(_key1330, _val1331)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *ScannerOpenArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpen_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerOpenArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartRow != nil {
		err = oprot.WriteFieldBegin("startRow", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenArgs) WriteFieldStartRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *ScannerOpenArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BINARY, p.Columns.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter1336 := range p.Columns.Iter() {
			Iter1337 := Iter1336.(Text)
			err = oprot.WriteBinary(Iter1337)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1337", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenArgs) WriteFieldColumns(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *ScannerOpenArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1338 := range p.Attributes.Iter() {
			Kiter1339, Viter1340 := Miter1338.Key().(Text), Miter1338.Value().(Text)
			err = oprot.WriteBinary(Kiter1339)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1339", "", err)
			}
			err = oprot.WriteBinary(Viter1340)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1340", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *ScannerOpenArgs) TStructName() string {
	return "ScannerOpenArgs"
}

func (p *ScannerOpenArgs) ThriftName() string {
	return "scannerOpen_args"
}

func (p *ScannerOpenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerOpenArgs(%+v)", *p)
}

func (p *ScannerOpenArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerOpenArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerOpenArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.StartRow
	case 3:
		return p.Columns
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("startRow", thrift.BINARY, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenResult struct {
	thrift.TStruct
	Success ScannerID "success" // 0
	Io      *IOError  "io"      // 1
}

func NewScannerOpenResult() *ScannerOpenResult {
	output := &ScannerOpenResult{
		TStruct: thrift.NewTStruct("scannerOpen_result", []thrift.TField{
			thrift.NewTField("success", thrift.I32, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *ScannerOpenResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1341, err1342 := iprot.ReadI32()
	if err1342 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1342)
	}
	p.Success = ScannerID(v1341)
	return err
}

func (p *ScannerOpenResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *ScannerOpenResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1345 := p.Io.Read(iprot)
	if err1345 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1345)
	}
	return err
}

func (p *ScannerOpenResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerOpenResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpen_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *ScannerOpenResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerOpenResult) TStructName() string {
	return "ScannerOpenResult"
}

func (p *ScannerOpenResult) ThriftName() string {
	return "scannerOpen_result"
}

func (p *ScannerOpenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerOpenResult(%+v)", *p)
}

func (p *ScannerOpenResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerOpenResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerOpenResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - StopRow: row to stop scanning on. This row is *not* included in the
 * scanner's results
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Attributes: Scan attributes
 */
type ScannerOpenWithStopArgs struct {
	thrift.TStruct
	TableName  Text         "tableName"  // 1
	StartRow   Text         "startRow"   // 2
	StopRow    Text         "stopRow"    // 3
	Columns    thrift.TList "columns"    // 4
	Attributes thrift.TMap  "attributes" // 5
}

func NewScannerOpenWithStopArgs() *ScannerOpenWithStopArgs {
	output := &ScannerOpenWithStopArgs{
		TStruct: thrift.NewTStruct("scannerOpenWithStop_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("startRow", thrift.BINARY, 2),
			thrift.NewTField("stopRow", thrift.BINARY, 3),
			thrift.NewTField("columns", thrift.LIST, 4),
			thrift.NewTField("attributes", thrift.MAP, 5),
		}),
	}
	{
	}
	return output
}

func (p *ScannerOpenWithStopArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "startRow" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "stopRow" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "columns" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1346, err1347 := iprot.ReadBinary()
	if err1347 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1347)
	}
	p.TableName = Text(v1346)
	return err
}

func (p *ScannerOpenWithStopArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerOpenWithStopArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1348, err1349 := iprot.ReadBinary()
	if err1349 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "startRow", p.ThriftName(), err1349)
	}
	p.StartRow = Text(v1348)
	return err
}

func (p *ScannerOpenWithStopArgs) ReadFieldStartRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *ScannerOpenWithStopArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1350, err1351 := iprot.ReadBinary()
	if err1351 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "stopRow", p.ThriftName(), err1351)
	}
	p.StopRow = Text(v1350)
	return err
}

func (p *ScannerOpenWithStopArgs) ReadFieldStopRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *ScannerOpenWithStopArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1357, _size1354, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	p.Columns = thrift.NewTList(_etype1357, _size1354)
	for _i1358 := 0; _i1358 < _size1354; _i1358++ {
		v1360, err1361 := iprot.ReadBinary()
		if err1361 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1359", "", err1361)
		}
		_elem1359 := Text(v1360)
		p.Columns.Push(_elem1359)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerOpenWithStopArgs) ReadFieldColumns(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *ScannerOpenWithStopArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1365, _vtype1366, _size1364, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype1365, _vtype1366, _size1364)
	for _i1368 := 0; _i1368 < _size1364; _i1368++ {
		v1371, err1372 := iprot.ReadBinary()
		if err1372 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1369", "", err1372)
		}
		_key1369 := Text(v1371)
		v1373, err1374 := iprot.ReadBinary()
		if err1374 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1370", "", err1374)
		}
		_val1370 := Text(v1373)
		p.Attributes.Set(_key1369, _val1370)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenWithStopArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *ScannerOpenWithStopArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithStop_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerOpenWithStopArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartRow != nil {
		err = oprot.WriteFieldBegin("startRow", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopArgs) WriteFieldStartRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *ScannerOpenWithStopArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StopRow != nil {
		err = oprot.WriteFieldBegin("stopRow", thrift.BINARY, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StopRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopArgs) WriteFieldStopRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *ScannerOpenWithStopArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BINARY, p.Columns.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter1375 := range p.Columns.Iter() {
			Iter1376 := Iter1375.(Text)
			err = oprot.WriteBinary(Iter1376)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1376", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopArgs) WriteFieldColumns(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *ScannerOpenWithStopArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1377 := range p.Attributes.Iter() {
			Kiter1378, Viter1379 := Miter1377.Key().(Text), Miter1377.Value().(Text)
			err = oprot.WriteBinary(Kiter1378)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1378", "", err)
			}
			err = oprot.WriteBinary(Viter1379)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1379", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *ScannerOpenWithStopArgs) TStructName() string {
	return "ScannerOpenWithStopArgs"
}

func (p *ScannerOpenWithStopArgs) ThriftName() string {
	return "scannerOpenWithStop_args"
}

func (p *ScannerOpenWithStopArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerOpenWithStopArgs(%+v)", *p)
}

func (p *ScannerOpenWithStopArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerOpenWithStopArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerOpenWithStopArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.StartRow
	case 3:
		return p.StopRow
	case 4:
		return p.Columns
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenWithStopArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("startRow", thrift.BINARY, 2),
		thrift.NewTField("stopRow", thrift.BINARY, 3),
		thrift.NewTField("columns", thrift.LIST, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenWithStopResult struct {
	thrift.TStruct
	Success ScannerID "success" // 0
	Io      *IOError  "io"      // 1
}

func NewScannerOpenWithStopResult() *ScannerOpenWithStopResult {
	output := &ScannerOpenWithStopResult{
		TStruct: thrift.NewTStruct("scannerOpenWithStop_result", []thrift.TField{
			thrift.NewTField("success", thrift.I32, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *ScannerOpenWithStopResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1380, err1381 := iprot.ReadI32()
	if err1381 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1381)
	}
	p.Success = ScannerID(v1380)
	return err
}

func (p *ScannerOpenWithStopResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *ScannerOpenWithStopResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1384 := p.Io.Read(iprot)
	if err1384 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1384)
	}
	return err
}

func (p *ScannerOpenWithStopResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerOpenWithStopResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithStop_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *ScannerOpenWithStopResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerOpenWithStopResult) TStructName() string {
	return "ScannerOpenWithStopResult"
}

func (p *ScannerOpenWithStopResult) ThriftName() string {
	return "scannerOpenWithStop_result"
}

func (p *ScannerOpenWithStopResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerOpenWithStopResult(%+v)", *p)
}

func (p *ScannerOpenWithStopResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerOpenWithStopResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerOpenWithStopResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenWithStopResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartAndPrefix: the prefix (and thus start row) of the keys you want
 *  - Columns: the columns you want returned
 *  - Attributes: Scan attributes
 */
type ScannerOpenWithPrefixArgs struct {
	thrift.TStruct
	TableName      Text         "tableName"      // 1
	StartAndPrefix Text         "startAndPrefix" // 2
	Columns        thrift.TList "columns"        // 3
	Attributes     thrift.TMap  "attributes"     // 4
}

func NewScannerOpenWithPrefixArgs() *ScannerOpenWithPrefixArgs {
	output := &ScannerOpenWithPrefixArgs{
		TStruct: thrift.NewTStruct("scannerOpenWithPrefix_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("startAndPrefix", thrift.BINARY, 2),
			thrift.NewTField("columns", thrift.LIST, 3),
			thrift.NewTField("attributes", thrift.MAP, 4),
		}),
	}
	{
	}
	return output
}

func (p *ScannerOpenWithPrefixArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "startAndPrefix" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "columns" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1385, err1386 := iprot.ReadBinary()
	if err1386 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1386)
	}
	p.TableName = Text(v1385)
	return err
}

func (p *ScannerOpenWithPrefixArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerOpenWithPrefixArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1387, err1388 := iprot.ReadBinary()
	if err1388 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "startAndPrefix", p.ThriftName(), err1388)
	}
	p.StartAndPrefix = Text(v1387)
	return err
}

func (p *ScannerOpenWithPrefixArgs) ReadFieldStartAndPrefix(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *ScannerOpenWithPrefixArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1394, _size1391, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	p.Columns = thrift.NewTList(_etype1394, _size1391)
	for _i1395 := 0; _i1395 < _size1391; _i1395++ {
		v1397, err1398 := iprot.ReadBinary()
		if err1398 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1396", "", err1398)
		}
		_elem1396 := Text(v1397)
		p.Columns.Push(_elem1396)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) ReadFieldColumns(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *ScannerOpenWithPrefixArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1402, _vtype1403, _size1401, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype1402, _vtype1403, _size1401)
	for _i1405 := 0; _i1405 < _size1401; _i1405++ {
		v1408, err1409 := iprot.ReadBinary()
		if err1409 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1406", "", err1409)
		}
		_key1406 := Text(v1408)
		v1410, err1411 := iprot.ReadBinary()
		if err1411 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1407", "", err1411)
		}
		_val1407 := Text(v1410)
		p.Attributes.Set(_key1406, _val1407)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *ScannerOpenWithPrefixArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithPrefix_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerOpenWithPrefixArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartAndPrefix != nil {
		err = oprot.WriteFieldBegin("startAndPrefix", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startAndPrefix", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartAndPrefix)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startAndPrefix", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startAndPrefix", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) WriteFieldStartAndPrefix(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *ScannerOpenWithPrefixArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BINARY, p.Columns.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter1412 := range p.Columns.Iter() {
			Iter1413 := Iter1412.(Text)
			err = oprot.WriteBinary(Iter1413)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1413", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) WriteFieldColumns(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *ScannerOpenWithPrefixArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1414 := range p.Attributes.Iter() {
			Kiter1415, Viter1416 := Miter1414.Key().(Text), Miter1414.Value().(Text)
			err = oprot.WriteBinary(Kiter1415)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1415", "", err)
			}
			err = oprot.WriteBinary(Viter1416)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1416", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *ScannerOpenWithPrefixArgs) TStructName() string {
	return "ScannerOpenWithPrefixArgs"
}

func (p *ScannerOpenWithPrefixArgs) ThriftName() string {
	return "scannerOpenWithPrefix_args"
}

func (p *ScannerOpenWithPrefixArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerOpenWithPrefixArgs(%+v)", *p)
}

func (p *ScannerOpenWithPrefixArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerOpenWithPrefixArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerOpenWithPrefixArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.StartAndPrefix
	case 3:
		return p.Columns
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenWithPrefixArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("startAndPrefix", thrift.BINARY, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenWithPrefixResult struct {
	thrift.TStruct
	Success ScannerID "success" // 0
	Io      *IOError  "io"      // 1
}

func NewScannerOpenWithPrefixResult() *ScannerOpenWithPrefixResult {
	output := &ScannerOpenWithPrefixResult{
		TStruct: thrift.NewTStruct("scannerOpenWithPrefix_result", []thrift.TField{
			thrift.NewTField("success", thrift.I32, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *ScannerOpenWithPrefixResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithPrefixResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1417, err1418 := iprot.ReadI32()
	if err1418 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1418)
	}
	p.Success = ScannerID(v1417)
	return err
}

func (p *ScannerOpenWithPrefixResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *ScannerOpenWithPrefixResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1421 := p.Io.Read(iprot)
	if err1421 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1421)
	}
	return err
}

func (p *ScannerOpenWithPrefixResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerOpenWithPrefixResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithPrefix_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithPrefixResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithPrefixResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *ScannerOpenWithPrefixResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithPrefixResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerOpenWithPrefixResult) TStructName() string {
	return "ScannerOpenWithPrefixResult"
}

func (p *ScannerOpenWithPrefixResult) ThriftName() string {
	return "scannerOpenWithPrefix_result"
}

func (p *ScannerOpenWithPrefixResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerOpenWithPrefixResult(%+v)", *p)
}

func (p *ScannerOpenWithPrefixResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerOpenWithPrefixResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerOpenWithPrefixResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenWithPrefixResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Timestamp: timestamp
 *  - Attributes: Scan attributes
 */
type ScannerOpenTsArgs struct {
	thrift.TStruct
	TableName  Text         "tableName"  // 1
	StartRow   Text         "startRow"   // 2
	Columns    thrift.TList "columns"    // 3
	Timestamp  int64        "timestamp"  // 4
	Attributes thrift.TMap  "attributes" // 5
}

func NewScannerOpenTsArgs() *ScannerOpenTsArgs {
	output := &ScannerOpenTsArgs{
		TStruct: thrift.NewTStruct("scannerOpenTs_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("startRow", thrift.BINARY, 2),
			thrift.NewTField("columns", thrift.LIST, 3),
			thrift.NewTField("timestamp", thrift.I64, 4),
			thrift.NewTField("attributes", thrift.MAP, 5),
		}),
	}
	{
	}
	return output
}

func (p *ScannerOpenTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "startRow" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "columns" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "timestamp" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1422, err1423 := iprot.ReadBinary()
	if err1423 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1423)
	}
	p.TableName = Text(v1422)
	return err
}

func (p *ScannerOpenTsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerOpenTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1424, err1425 := iprot.ReadBinary()
	if err1425 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "startRow", p.ThriftName(), err1425)
	}
	p.StartRow = Text(v1424)
	return err
}

func (p *ScannerOpenTsArgs) ReadFieldStartRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *ScannerOpenTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1431, _size1428, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	p.Columns = thrift.NewTList(_etype1431, _size1428)
	for _i1432 := 0; _i1432 < _size1428; _i1432++ {
		v1434, err1435 := iprot.ReadBinary()
		if err1435 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1433", "", err1435)
		}
		_elem1433 := Text(v1434)
		p.Columns.Push(_elem1433)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerOpenTsArgs) ReadFieldColumns(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *ScannerOpenTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1436, err1437 := iprot.ReadI64()
	if err1437 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err1437)
	}
	p.Timestamp = v1436
	return err
}

func (p *ScannerOpenTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *ScannerOpenTsArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1441, _vtype1442, _size1440, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype1441, _vtype1442, _size1440)
	for _i1444 := 0; _i1444 < _size1440; _i1444++ {
		v1447, err1448 := iprot.ReadBinary()
		if err1448 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1445", "", err1448)
		}
		_key1445 := Text(v1447)
		v1449, err1450 := iprot.ReadBinary()
		if err1450 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1446", "", err1450)
		}
		_val1446 := Text(v1449)
		p.Attributes.Set(_key1445, _val1446)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenTsArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *ScannerOpenTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenTsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerOpenTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartRow != nil {
		err = oprot.WriteFieldBegin("startRow", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenTsArgs) WriteFieldStartRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *ScannerOpenTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BINARY, p.Columns.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter1451 := range p.Columns.Iter() {
			Iter1452 := Iter1451.(Text)
			err = oprot.WriteBinary(Iter1452)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1452", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenTsArgs) WriteFieldColumns(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *ScannerOpenTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *ScannerOpenTsArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1453 := range p.Attributes.Iter() {
			Kiter1454, Viter1455 := Miter1453.Key().(Text), Miter1453.Value().(Text)
			err = oprot.WriteBinary(Kiter1454)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1454", "", err)
			}
			err = oprot.WriteBinary(Viter1455)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1455", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenTsArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *ScannerOpenTsArgs) TStructName() string {
	return "ScannerOpenTsArgs"
}

func (p *ScannerOpenTsArgs) ThriftName() string {
	return "scannerOpenTs_args"
}

func (p *ScannerOpenTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerOpenTsArgs(%+v)", *p)
}

func (p *ScannerOpenTsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerOpenTsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerOpenTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.StartRow
	case 3:
		return p.Columns
	case 4:
		return p.Timestamp
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("startRow", thrift.BINARY, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenTsResult struct {
	thrift.TStruct
	Success ScannerID "success" // 0
	Io      *IOError  "io"      // 1
}

func NewScannerOpenTsResult() *ScannerOpenTsResult {
	output := &ScannerOpenTsResult{
		TStruct: thrift.NewTStruct("scannerOpenTs_result", []thrift.TField{
			thrift.NewTField("success", thrift.I32, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *ScannerOpenTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1456, err1457 := iprot.ReadI32()
	if err1457 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1457)
	}
	p.Success = ScannerID(v1456)
	return err
}

func (p *ScannerOpenTsResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *ScannerOpenTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1460 := p.Io.Read(iprot)
	if err1460 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1460)
	}
	return err
}

func (p *ScannerOpenTsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerOpenTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *ScannerOpenTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenTsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerOpenTsResult) TStructName() string {
	return "ScannerOpenTsResult"
}

func (p *ScannerOpenTsResult) ThriftName() string {
	return "scannerOpenTs_result"
}

func (p *ScannerOpenTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerOpenTsResult(%+v)", *p)
}

func (p *ScannerOpenTsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerOpenTsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerOpenTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - StopRow: row to stop scanning on. This row is *not* included in the
 * scanner's results
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Timestamp: timestamp
 *  - Attributes: Scan attributes
 */
type ScannerOpenWithStopTsArgs struct {
	thrift.TStruct
	TableName  Text         "tableName"  // 1
	StartRow   Text         "startRow"   // 2
	StopRow    Text         "stopRow"    // 3
	Columns    thrift.TList "columns"    // 4
	Timestamp  int64        "timestamp"  // 5
	Attributes thrift.TMap  "attributes" // 6
}

func NewScannerOpenWithStopTsArgs() *ScannerOpenWithStopTsArgs {
	output := &ScannerOpenWithStopTsArgs{
		TStruct: thrift.NewTStruct("scannerOpenWithStopTs_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("startRow", thrift.BINARY, 2),
			thrift.NewTField("stopRow", thrift.BINARY, 3),
			thrift.NewTField("columns", thrift.LIST, 4),
			thrift.NewTField("timestamp", thrift.I64, 5),
			thrift.NewTField("attributes", thrift.MAP, 6),
		}),
	}
	{
	}
	return output
}

func (p *ScannerOpenWithStopTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "startRow" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "stopRow" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "columns" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "timestamp" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 6 || fieldName == "attributes" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1461, err1462 := iprot.ReadBinary()
	if err1462 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1462)
	}
	p.TableName = Text(v1461)
	return err
}

func (p *ScannerOpenWithStopTsArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerOpenWithStopTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1463, err1464 := iprot.ReadBinary()
	if err1464 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "startRow", p.ThriftName(), err1464)
	}
	p.StartRow = Text(v1463)
	return err
}

func (p *ScannerOpenWithStopTsArgs) ReadFieldStartRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *ScannerOpenWithStopTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1465, err1466 := iprot.ReadBinary()
	if err1466 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "stopRow", p.ThriftName(), err1466)
	}
	p.StopRow = Text(v1465)
	return err
}

func (p *ScannerOpenWithStopTsArgs) ReadFieldStopRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *ScannerOpenWithStopTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1472, _size1469, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	p.Columns = thrift.NewTList(_etype1472, _size1469)
	for _i1473 := 0; _i1473 < _size1469; _i1473++ {
		v1475, err1476 := iprot.ReadBinary()
		if err1476 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1474", "", err1476)
		}
		_elem1474 := Text(v1475)
		p.Columns.Push(_elem1474)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) ReadFieldColumns(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *ScannerOpenWithStopTsArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1477, err1478 := iprot.ReadI64()
	if err1478 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "timestamp", p.ThriftName(), err1478)
	}
	p.Timestamp = v1477
	return err
}

func (p *ScannerOpenWithStopTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *ScannerOpenWithStopTsArgs) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1482, _vtype1483, _size1481, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	p.Attributes = thrift.NewTMap(_ktype1482, _vtype1483, _size1481)
	for _i1485 := 0; _i1485 < _size1481; _i1485++ {
		v1488, err1489 := iprot.ReadBinary()
		if err1489 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1486", "", err1489)
		}
		_key1486 := Text(v1488)
		v1490, err1491 := iprot.ReadBinary()
		if err1491 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1487", "", err1491)
		}
		_val1487 := Text(v1490)
		p.Attributes.Set(_key1486, _val1487)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) ReadFieldAttributes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField6(iprot)
}

func (p *ScannerOpenWithStopTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithStopTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField6(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerOpenWithStopTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartRow != nil {
		err = oprot.WriteFieldBegin("startRow", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) WriteFieldStartRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *ScannerOpenWithStopTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StopRow != nil {
		err = oprot.WriteFieldBegin("stopRow", thrift.BINARY, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StopRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) WriteFieldStopRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *ScannerOpenWithStopTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BINARY, p.Columns.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter1492 := range p.Columns.Iter() {
			Iter1493 := Iter1492.(Text)
			err = oprot.WriteBinary(Iter1493)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1493", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) WriteFieldColumns(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *ScannerOpenWithStopTsArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *ScannerOpenWithStopTsArgs) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BINARY, p.Attributes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1494 := range p.Attributes.Iter() {
			Kiter1495, Viter1496 := Miter1494.Key().(Text), Miter1494.Value().(Text)
			err = oprot.WriteBinary(Kiter1495)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1495", "", err)
			}
			err = oprot.WriteBinary(Viter1496)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1496", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) WriteFieldAttributes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField6(oprot)
}

func (p *ScannerOpenWithStopTsArgs) TStructName() string {
	return "ScannerOpenWithStopTsArgs"
}

func (p *ScannerOpenWithStopTsArgs) ThriftName() string {
	return "scannerOpenWithStopTs_args"
}

func (p *ScannerOpenWithStopTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerOpenWithStopTsArgs(%+v)", *p)
}

func (p *ScannerOpenWithStopTsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerOpenWithStopTsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerOpenWithStopTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.StartRow
	case 3:
		return p.StopRow
	case 4:
		return p.Columns
	case 5:
		return p.Timestamp
	case 6:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenWithStopTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("startRow", thrift.BINARY, 2),
		thrift.NewTField("stopRow", thrift.BINARY, 3),
		thrift.NewTField("columns", thrift.LIST, 4),
		thrift.NewTField("timestamp", thrift.I64, 5),
		thrift.NewTField("attributes", thrift.MAP, 6),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenWithStopTsResult struct {
	thrift.TStruct
	Success ScannerID "success" // 0
	Io      *IOError  "io"      // 1
}

func NewScannerOpenWithStopTsResult() *ScannerOpenWithStopTsResult {
	output := &ScannerOpenWithStopTsResult{
		TStruct: thrift.NewTStruct("scannerOpenWithStopTs_result", []thrift.TField{
			thrift.NewTField("success", thrift.I32, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *ScannerOpenWithStopTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1497, err1498 := iprot.ReadI32()
	if err1498 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1498)
	}
	p.Success = ScannerID(v1497)
	return err
}

func (p *ScannerOpenWithStopTsResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *ScannerOpenWithStopTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1501 := p.Io.Read(iprot)
	if err1501 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1501)
	}
	return err
}

func (p *ScannerOpenWithStopTsResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerOpenWithStopTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithStopTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *ScannerOpenWithStopTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerOpenWithStopTsResult) TStructName() string {
	return "ScannerOpenWithStopTsResult"
}

func (p *ScannerOpenWithStopTsResult) ThriftName() string {
	return "scannerOpenWithStopTs_result"
}

func (p *ScannerOpenWithStopTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerOpenWithStopTsResult(%+v)", *p)
}

func (p *ScannerOpenWithStopTsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerOpenWithStopTsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerOpenWithStopTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenWithStopTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Id: id of a scanner returned by scannerOpen
 */
type ScannerGetArgs struct {
	thrift.TStruct
	Id ScannerID "id" // 1
}

func NewScannerGetArgs() *ScannerGetArgs {
	output := &ScannerGetArgs{
		TStruct: thrift.NewTStruct("scannerGet_args", []thrift.TField{
			thrift.NewTField("id", thrift.I32, 1),
		}),
	}
	{
	}
	return output
}

func (p *ScannerGetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "id" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1502, err1503 := iprot.ReadI32()
	if err1503 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err1503)
	}
	p.Id = ScannerID(v1502)
	return err
}

func (p *ScannerGetArgs) ReadFieldId(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerGetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerGet_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("id", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Id))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetArgs) WriteFieldId(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerGetArgs) TStructName() string {
	return "ScannerGetArgs"
}

func (p *ScannerGetArgs) ThriftName() string {
	return "scannerGet_args"
}

func (p *ScannerGetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerGetArgs(%+v)", *p)
}

func (p *ScannerGetArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerGetArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerGetArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Id
	}
	return nil
}

func (p *ScannerGetArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("id", thrift.I32, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 *  - Ia
 */
type ScannerGetResult struct {
	thrift.TStruct
	Success thrift.TList     "success" // 0
	Io      *IOError         "io"      // 1
	Ia      *IllegalArgument "ia"      // 2
}

func NewScannerGetResult() *ScannerGetResult {
	output := &ScannerGetResult{
		TStruct: thrift.NewTStruct("scannerGet_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
			thrift.NewTField("ia", thrift.STRUCT, 2),
		}),
	}
	{
	}
	return output
}

func (p *ScannerGetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ia" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1509, _size1506, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype1509, _size1506)
	for _i1510 := 0; _i1510 < _size1506; _i1510++ {
		_elem1511 := NewTRowResult()
		err1514 := _elem1511.Read(iprot)
		if err1514 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1511TRowResult", err1514)
		}
		p.Success.Push(_elem1511)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerGetResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *ScannerGetResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1517 := p.Io.Read(iprot)
	if err1517 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1517)
	}
	return err
}

func (p *ScannerGetResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerGetResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1520 := p.Ia.Read(iprot)
	if err1520 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1520)
	}
	return err
}

func (p *ScannerGetResult) ReadFieldIa(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *ScannerGetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerGet_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter1521 := range p.Success.Iter() {
			Iter1522 := Iter1521.(*TRowResult)
			err = Iter1522.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *ScannerGetResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerGetResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetResult) WriteFieldIa(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *ScannerGetResult) TStructName() string {
	return "ScannerGetResult"
}

func (p *ScannerGetResult) ThriftName() string {
	return "scannerGet_result"
}

func (p *ScannerGetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerGetResult(%+v)", *p)
}

func (p *ScannerGetResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerGetResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerGetResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *ScannerGetResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - Id: id of a scanner returned by scannerOpen
 *  - NbRows: number of results to return
 */
type ScannerGetListArgs struct {
	thrift.TStruct
	Id     ScannerID "id"     // 1
	NbRows int32     "nbRows" // 2
}

func NewScannerGetListArgs() *ScannerGetListArgs {
	output := &ScannerGetListArgs{
		TStruct: thrift.NewTStruct("scannerGetList_args", []thrift.TField{
			thrift.NewTField("id", thrift.I32, 1),
			thrift.NewTField("nbRows", thrift.I32, 2),
		}),
	}
	{
	}
	return output
}

func (p *ScannerGetListArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "id" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "nbRows" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1523, err1524 := iprot.ReadI32()
	if err1524 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err1524)
	}
	p.Id = ScannerID(v1523)
	return err
}

func (p *ScannerGetListArgs) ReadFieldId(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerGetListArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1525, err1526 := iprot.ReadI32()
	if err1526 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "nbRows", p.ThriftName(), err1526)
	}
	p.NbRows = v1525
	return err
}

func (p *ScannerGetListArgs) ReadFieldNbRows(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *ScannerGetListArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerGetList_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("id", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Id))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListArgs) WriteFieldId(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerGetListArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("nbRows", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "nbRows", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.NbRows))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "nbRows", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "nbRows", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListArgs) WriteFieldNbRows(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *ScannerGetListArgs) TStructName() string {
	return "ScannerGetListArgs"
}

func (p *ScannerGetListArgs) ThriftName() string {
	return "scannerGetList_args"
}

func (p *ScannerGetListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerGetListArgs(%+v)", *p)
}

func (p *ScannerGetListArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerGetListArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerGetListArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Id
	case 2:
		return p.NbRows
	}
	return nil
}

func (p *ScannerGetListArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("id", thrift.I32, 1),
		thrift.NewTField("nbRows", thrift.I32, 2),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 *  - Ia
 */
type ScannerGetListResult struct {
	thrift.TStruct
	Success thrift.TList     "success" // 0
	Io      *IOError         "io"      // 1
	Ia      *IllegalArgument "ia"      // 2
}

func NewScannerGetListResult() *ScannerGetListResult {
	output := &ScannerGetListResult{
		TStruct: thrift.NewTStruct("scannerGetList_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
			thrift.NewTField("ia", thrift.STRUCT, 2),
		}),
	}
	{
	}
	return output
}

func (p *ScannerGetListResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ia" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1532, _size1529, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype1532, _size1529)
	for _i1533 := 0; _i1533 < _size1529; _i1533++ {
		_elem1534 := NewTRowResult()
		err1537 := _elem1534.Read(iprot)
		if err1537 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1534TRowResult", err1537)
		}
		p.Success.Push(_elem1534)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerGetListResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *ScannerGetListResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1540 := p.Io.Read(iprot)
	if err1540 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1540)
	}
	return err
}

func (p *ScannerGetListResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerGetListResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1543 := p.Ia.Read(iprot)
	if err1543 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1543)
	}
	return err
}

func (p *ScannerGetListResult) ReadFieldIa(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *ScannerGetListResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerGetList_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter1544 := range p.Success.Iter() {
			Iter1545 := Iter1544.(*TRowResult)
			err = Iter1545.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetListResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *ScannerGetListResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetListResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerGetListResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetListResult) WriteFieldIa(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *ScannerGetListResult) TStructName() string {
	return "ScannerGetListResult"
}

func (p *ScannerGetListResult) ThriftName() string {
	return "scannerGetList_result"
}

func (p *ScannerGetListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerGetListResult(%+v)", *p)
}

func (p *ScannerGetListResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerGetListResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerGetListResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *ScannerGetListResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - Id: id of a scanner returned by scannerOpen
 */
type ScannerCloseArgs struct {
	thrift.TStruct
	Id ScannerID "id" // 1
}

func NewScannerCloseArgs() *ScannerCloseArgs {
	output := &ScannerCloseArgs{
		TStruct: thrift.NewTStruct("scannerClose_args", []thrift.TField{
			thrift.NewTField("id", thrift.I32, 1),
		}),
	}
	{
	}
	return output
}

func (p *ScannerCloseArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "id" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerCloseArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1546, err1547 := iprot.ReadI32()
	if err1547 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err1547)
	}
	p.Id = ScannerID(v1546)
	return err
}

func (p *ScannerCloseArgs) ReadFieldId(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerCloseArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerClose_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerCloseArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("id", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Id))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerCloseArgs) WriteFieldId(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerCloseArgs) TStructName() string {
	return "ScannerCloseArgs"
}

func (p *ScannerCloseArgs) ThriftName() string {
	return "scannerClose_args"
}

func (p *ScannerCloseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerCloseArgs(%+v)", *p)
}

func (p *ScannerCloseArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerCloseArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerCloseArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Id
	}
	return nil
}

func (p *ScannerCloseArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("id", thrift.I32, 1),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type ScannerCloseResult struct {
	thrift.TStruct
	Io *IOError         "io" // 1
	Ia *IllegalArgument "ia" // 2
}

func NewScannerCloseResult() *ScannerCloseResult {
	output := &ScannerCloseResult{
		TStruct: thrift.NewTStruct("scannerClose_result", []thrift.TField{
			thrift.NewTField("io", thrift.STRUCT, 1),
			thrift.NewTField("ia", thrift.STRUCT, 2),
		}),
	}
	{
	}
	return output
}

func (p *ScannerCloseResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ia" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerCloseResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1550 := p.Io.Read(iprot)
	if err1550 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1550)
	}
	return err
}

func (p *ScannerCloseResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ScannerCloseResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1553 := p.Ia.Read(iprot)
	if err1553 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1553)
	}
	return err
}

func (p *ScannerCloseResult) ReadFieldIa(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *ScannerCloseResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerClose_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerCloseResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerCloseResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ScannerCloseResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerCloseResult) WriteFieldIa(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *ScannerCloseResult) TStructName() string {
	return "ScannerCloseResult"
}

func (p *ScannerCloseResult) ThriftName() string {
	return "scannerClose_result"
}

func (p *ScannerCloseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScannerCloseResult(%+v)", *p)
}

func (p *ScannerCloseResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ScannerCloseResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ScannerCloseResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *ScannerCloseResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Family: column name
 */
type GetRowOrBeforeArgs struct {
	thrift.TStruct
	TableName Text "tableName" // 1
	Row       Text "row"       // 2
	Family    Text "family"    // 3
}

func NewGetRowOrBeforeArgs() *GetRowOrBeforeArgs {
	output := &GetRowOrBeforeArgs{
		TStruct: thrift.NewTStruct("getRowOrBefore_args", []thrift.TField{
			thrift.NewTField("tableName", thrift.BINARY, 1),
			thrift.NewTField("row", thrift.BINARY, 2),
			thrift.NewTField("family", thrift.BINARY, 3),
		}),
	}
	{
	}
	return output
}

func (p *GetRowOrBeforeArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "tableName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "family" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowOrBeforeArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1554, err1555 := iprot.ReadBinary()
	if err1555 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1555)
	}
	p.TableName = Text(v1554)
	return err
}

func (p *GetRowOrBeforeArgs) ReadFieldTableName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowOrBeforeArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1556, err1557 := iprot.ReadBinary()
	if err1557 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1557)
	}
	p.Row = Text(v1556)
	return err
}

func (p *GetRowOrBeforeArgs) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetRowOrBeforeArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1558, err1559 := iprot.ReadBinary()
	if err1559 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "family", p.ThriftName(), err1559)
	}
	p.Family = Text(v1558)
	return err
}

func (p *GetRowOrBeforeArgs) ReadFieldFamily(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetRowOrBeforeArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowOrBefore_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowOrBeforeArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowOrBeforeArgs) WriteFieldTableName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowOrBeforeArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowOrBeforeArgs) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetRowOrBeforeArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Family != nil {
		err = oprot.WriteFieldBegin("family", thrift.BINARY, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "family", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Family)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "family", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "family", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowOrBeforeArgs) WriteFieldFamily(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetRowOrBeforeArgs) TStructName() string {
	return "GetRowOrBeforeArgs"
}

func (p *GetRowOrBeforeArgs) ThriftName() string {
	return "getRowOrBefore_args"
}

func (p *GetRowOrBeforeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowOrBeforeArgs(%+v)", *p)
}

func (p *GetRowOrBeforeArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowOrBeforeArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowOrBeforeArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Family
	}
	return nil
}

func (p *GetRowOrBeforeArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.BINARY, 1),
		thrift.NewTField("row", thrift.BINARY, 2),
		thrift.NewTField("family", thrift.BINARY, 3),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowOrBeforeResult struct {
	thrift.TStruct
	Success thrift.TList "success" // 0
	Io      *IOError     "io"      // 1
}

func NewGetRowOrBeforeResult() *GetRowOrBeforeResult {
	output := &GetRowOrBeforeResult{
		TStruct: thrift.NewTStruct("getRowOrBefore_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetRowOrBeforeResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowOrBeforeResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1565, _size1562, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype1565, _size1562)
	for _i1566 := 0; _i1566 < _size1562; _i1566++ {
		_elem1567 := NewTCell()
		err1570 := _elem1567.Read(iprot)
		if err1570 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1567TCell", err1570)
		}
		p.Success.Push(_elem1567)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowOrBeforeResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetRowOrBeforeResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1573 := p.Io.Read(iprot)
	if err1573 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1573)
	}
	return err
}

func (p *GetRowOrBeforeResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRowOrBeforeResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowOrBefore_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowOrBeforeResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter1574 := range p.Success.Iter() {
			Iter1575 := Iter1574.(*TCell)
			err = Iter1575.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TCell", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowOrBeforeResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetRowOrBeforeResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowOrBeforeResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRowOrBeforeResult) TStructName() string {
	return "GetRowOrBeforeResult"
}

func (p *GetRowOrBeforeResult) ThriftName() string {
	return "getRowOrBefore_result"
}

func (p *GetRowOrBeforeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRowOrBeforeResult(%+v)", *p)
}

func (p *GetRowOrBeforeResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRowOrBeforeResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRowOrBeforeResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowOrBeforeResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Row: row key
 */
type GetRegionInfoArgs struct {
	thrift.TStruct
	Row Text "row" // 1
}

func NewGetRegionInfoArgs() *GetRegionInfoArgs {
	output := &GetRegionInfoArgs{
		TStruct: thrift.NewTStruct("getRegionInfo_args", []thrift.TField{
			thrift.NewTField("row", thrift.BINARY, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetRegionInfoArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "row" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRegionInfoArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1576, err1577 := iprot.ReadBinary()
	if err1577 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "row", p.ThriftName(), err1577)
	}
	p.Row = Text(v1576)
	return err
}

func (p *GetRegionInfoArgs) ReadFieldRow(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRegionInfoArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRegionInfo_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRegionInfoArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRegionInfoArgs) WriteFieldRow(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRegionInfoArgs) TStructName() string {
	return "GetRegionInfoArgs"
}

func (p *GetRegionInfoArgs) ThriftName() string {
	return "getRegionInfo_args"
}

func (p *GetRegionInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRegionInfoArgs(%+v)", *p)
}

func (p *GetRegionInfoArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRegionInfoArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRegionInfoArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Row
	}
	return nil
}

func (p *GetRegionInfoArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("row", thrift.BINARY, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRegionInfoResult struct {
	thrift.TStruct
	Success *TRegionInfo "success" // 0
	Io      *IOError     "io"      // 1
}

func NewGetRegionInfoResult() *GetRegionInfoResult {
	output := &GetRegionInfoResult{
		TStruct: thrift.NewTStruct("getRegionInfo_result", []thrift.TField{
			thrift.NewTField("success", thrift.STRUCT, 0),
			thrift.NewTField("io", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *GetRegionInfoResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "io" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRegionInfoResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Success = NewTRegionInfo()
	err1580 := p.Success.Read(iprot)
	if err1580 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SuccessTRegionInfo", err1580)
	}
	return err
}

func (p *GetRegionInfoResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetRegionInfoResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1583 := p.Io.Read(iprot)
	if err1583 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1583)
	}
	return err
}

func (p *GetRegionInfoResult) ReadFieldIo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRegionInfoResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRegionInfo_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRegionInfoResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = p.Success.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TRegionInfo", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRegionInfoResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetRegionInfoResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRegionInfoResult) WriteFieldIo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRegionInfoResult) TStructName() string {
	return "GetRegionInfoResult"
}

func (p *GetRegionInfoResult) ThriftName() string {
	return "getRegionInfo_result"
}

func (p *GetRegionInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRegionInfoResult(%+v)", *p)
}

func (p *GetRegionInfoResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRegionInfoResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetRegionInfoResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRegionInfoResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRUCT, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}
