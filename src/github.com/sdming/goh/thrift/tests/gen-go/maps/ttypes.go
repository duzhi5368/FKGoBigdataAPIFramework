/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package maps

import (
	"fmt"
	"github.com/apesternikov/thrift4go/lib/go/src/thrift"
	"math"
)

// This is a temporary safety measure to ensure that the `math'
// import does not trip up any generated output that may not
// happen to use the math import due to not having emited enums.
//
// Future clean-ups will deprecate the need for this.
var _ = fmt.Print
var _ = math.MinInt32

/**
 * Attributes:
 *  - Ifield
 */
type Intstruct struct {
	Ifield int32 "ifield" // 1
}

var tstructIntstruct = thrift.NewTStruct("intstruct", []thrift.TField{
	thrift.NewTField("ifield", thrift.I32, 1),
})

func (*Intstruct) GetTStruct() thrift.TStruct { return tstructIntstruct }
func NewIntstruct() *Intstruct {
	output := &Intstruct{}
	{
	}
	return output
}

func (p *Intstruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIntstruct.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIntstruct.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Intstruct) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v0, err1 := iprot.ReadI32()
	if err1 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "ifield", p.ThriftName(), err1)
	}
	p.Ifield = v0
	return err
}

func (p *Intstruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("intstruct")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Intstruct) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("ifield", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "ifield", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Ifield))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "ifield", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "ifield", p.ThriftName(), err)
	}
	return err
}

func (p *Intstruct) TStructName() string {
	return "Intstruct"
}

func (p *Intstruct) ThriftName() string {
	return "intstruct"
}

func (p *Intstruct) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Ifield
	}
	return nil
}

func (p *Intstruct) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ifield", thrift.I32, 1),
	})
}

/**
 * Attributes:
 *  - Bytemap
 *  - I16map
 *  - I32map
 *  - Stringmap
 *  - Binarymap
 *  - Binarstructymap
 */
type Manymaps struct {
	Bytemap         map[int8]string       "bytemap"         // 1
	I16map          map[int16]string      "i16map"          // 2
	I32map          map[int32]string      "i32map"          // 3
	Stringmap       map[string]string     "stringmap"       // 4
	Binarymap       map[string]string     "binarymap"       // 5
	Binarstructymap map[string]*Intstruct "binarstructymap" // 6
}

var tstructManymaps = thrift.NewTStruct("manymaps", []thrift.TField{
	thrift.NewTField("bytemap", thrift.MAP, 1),
	thrift.NewTField("i16map", thrift.MAP, 2),
	thrift.NewTField("i32map", thrift.MAP, 3),
	thrift.NewTField("stringmap", thrift.MAP, 4),
	thrift.NewTField("binarymap", thrift.MAP, 5),
	thrift.NewTField("binarstructymap", thrift.MAP, 6),
})

func (*Manymaps) GetTStruct() thrift.TStruct { return tstructManymaps }
func NewManymaps() *Manymaps {
	output := &Manymaps{}
	{
	}
	return output
}

func (p *Manymaps) IsSetI16map() bool {
	return p.I16map != nil && len(p.I16map) > 0
}

func (p *Manymaps) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructManymaps.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructManymaps.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //
			if fieldTypeId == thrift.MAP {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.MAP {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.MAP {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //
			if fieldTypeId == thrift.MAP {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Manymaps) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype5, _vtype6, _size4, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Bytemap", "", err)
	}
	_, _ = _ktype5, _vtype6
	p.Bytemap = make(map[int8]string, _size4)
	for i := 0; i < _size4; i++ {
		v11, err12 := iprot.ReadByte()
		if err12 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key9", "", err12)
		}
		_key9 := v11
		v13, err14 := iprot.ReadString()
		if err14 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val10", "", err14)
		}
		_val10 := v13
		p.Bytemap[_key9] = _val10
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *Manymaps) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype18, _vtype19, _size17, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I16map", "", err)
	}
	_, _ = _ktype18, _vtype19
	p.I16map = make(map[int16]string, _size17)
	for i := 0; i < _size17; i++ {
		v24, err25 := iprot.ReadI16()
		if err25 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key22", "", err25)
		}
		_key22 := v24
		v26, err27 := iprot.ReadString()
		if err27 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val23", "", err27)
		}
		_val23 := v26
		p.I16map[_key22] = _val23
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *Manymaps) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype31, _vtype32, _size30, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32map", "", err)
	}
	_, _ = _ktype31, _vtype32
	p.I32map = make(map[int32]string, _size30)
	for i := 0; i < _size30; i++ {
		v37, err38 := iprot.ReadI32()
		if err38 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key35", "", err38)
		}
		_key35 := v37
		v39, err40 := iprot.ReadString()
		if err40 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val36", "", err40)
		}
		_val36 := v39
		p.I32map[_key35] = _val36
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *Manymaps) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype44, _vtype45, _size43, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Stringmap", "", err)
	}
	_, _ = _ktype44, _vtype45
	p.Stringmap = make(map[string]string, _size43)
	for i := 0; i < _size43; i++ {
		v50, err51 := iprot.ReadString()
		if err51 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key48", "", err51)
		}
		_key48 := v50
		v52, err53 := iprot.ReadString()
		if err53 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val49", "", err53)
		}
		_val49 := v52
		p.Stringmap[_key48] = _val49
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *Manymaps) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype57, _vtype58, _size56, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Binarymap", "", err)
	}
	_, _ = _ktype57, _vtype58
	p.Binarymap = make(map[string]string, _size56)
	for i := 0; i < _size56; i++ {
		v63, err64 := iprot.ReadString()
		if err64 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key61", "", err64)
		}
		_key61 := v63
		v65, err66 := iprot.ReadString()
		if err66 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val62", "", err66)
		}
		_val62 := v65
		p.Binarymap[_key61] = _val62
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *Manymaps) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype70, _vtype71, _size69, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Binarstructymap", "", err)
	}
	_, _ = _ktype70, _vtype71
	p.Binarstructymap = make(map[string]*Intstruct, _size69)
	for i := 0; i < _size69; i++ {
		v76, err77 := iprot.ReadString()
		if err77 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key74", "", err77)
		}
		_key74 := v76
		_val75 := NewIntstruct()
		err80 := _val75.Read(iprot)
		if err80 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_val75intstruct", err80)
		}
		p.Binarstructymap[_key74] = _val75
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *Manymaps) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("manymaps")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Manymaps) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Bytemap != nil {
		err = oprot.WriteFieldBegin("bytemap", thrift.MAP, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "bytemap", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.STRING, len(p.Bytemap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter81, Viter82 := range p.Bytemap {
			err = oprot.WriteByte(int8(Kiter81))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter81", "", err)
			}
			err = oprot.WriteString(Viter82)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter82", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "bytemap", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Manymaps) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I16map != nil {
		if p.IsSetI16map() {
			err = oprot.WriteFieldBegin("i16map", thrift.MAP, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "i16map", p.ThriftName(), err)
			}
			err = oprot.WriteMapBegin(thrift.I16, thrift.STRING, len(p.I16map))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			for Kiter83, Viter84 := range p.I16map {
				err = oprot.WriteI16(int16(Kiter83))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Kiter83", "", err)
				}
				err = oprot.WriteString(Viter84)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Viter84", "", err)
				}
			}
			err = oprot.WriteMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "i16map", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *Manymaps) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32map != nil {
		err = oprot.WriteFieldBegin("i32map", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "i32map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.I32map))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter85, Viter86 := range p.I32map {
			err = oprot.WriteI32(int32(Kiter85))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter85", "", err)
			}
			err = oprot.WriteString(Viter86)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter86", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "i32map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Manymaps) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Stringmap != nil {
		err = oprot.WriteFieldBegin("stringmap", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "stringmap", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Stringmap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter87, Viter88 := range p.Stringmap {
			err = oprot.WriteString(Kiter87)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter87", "", err)
			}
			err = oprot.WriteString(Viter88)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter88", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "stringmap", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Manymaps) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Binarymap != nil {
		err = oprot.WriteFieldBegin("binarymap", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "binarymap", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Binarymap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter89, Viter90 := range p.Binarymap {
			err = oprot.WriteString(Kiter89)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter89", "", err)
			}
			err = oprot.WriteString(Viter90)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter90", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "binarymap", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Manymaps) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Binarstructymap != nil {
		err = oprot.WriteFieldBegin("binarstructymap", thrift.MAP, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "binarstructymap", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Binarstructymap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter91, Viter92 := range p.Binarstructymap {
			err = oprot.WriteString(Kiter91)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter91", "", err)
			}
			err = Viter92.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("intstruct", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "binarstructymap", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Manymaps) TStructName() string {
	return "Manymaps"
}

func (p *Manymaps) ThriftName() string {
	return "manymaps"
}

func (p *Manymaps) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Bytemap
	case 2:
		return p.I16map
	case 3:
		return p.I32map
	case 4:
		return p.Stringmap
	case 5:
		return p.Binarymap
	case 6:
		return p.Binarstructymap
	}
	return nil
}

func (p *Manymaps) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("bytemap", thrift.MAP, 1),
		thrift.NewTField("i16map", thrift.MAP, 2),
		thrift.NewTField("i32map", thrift.MAP, 3),
		thrift.NewTField("stringmap", thrift.MAP, 4),
		thrift.NewTField("binarymap", thrift.MAP, 5),
		thrift.NewTField("binarstructymap", thrift.MAP, 6),
	})
}

var _MAPCONSTANT map[string]string

func init() {
	_MAPCONSTANT = make(map[string]string, 2)
	{
		var k93 string = "hello"
		var v94 string = "world"
		_MAPCONSTANT[k93] = v94
		var k95 string = "goodnight"
		var v96 string = "moon"
		_MAPCONSTANT[k95] = v96
	}

}
