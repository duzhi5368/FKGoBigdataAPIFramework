/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package tutorial

import (
	"fmt"
	"github.com/apesternikov/thrift4go/lib/go/src/thrift"
	"math"
)

// This is a temporary safety measure to ensure that the `math'
// import does not trip up any generated output that may not
// happen to use the math import due to not having emited enums.
//
// Future clean-ups will deprecate the need for this.
var _ = fmt.Print
var _ = math.MinInt32

/**
 *You can define enums, which are just 32 bit integers. Values are optional
 *and start at 1 if not supplied, C style again.
 */
type Operation int64

const (
	Operation_ADD      Operation = 1
	Operation_SUBTRACT Operation = 2
	Operation_MULTIPLY Operation = 3
	Operation_DIVIDE   Operation = 4
)

func (p Operation) String() string {
	switch p {
	case Operation_ADD:
		return "Operation_ADD"
	case Operation_SUBTRACT:
		return "Operation_SUBTRACT"
	case Operation_MULTIPLY:
		return "Operation_MULTIPLY"
	case Operation_DIVIDE:
		return "Operation_DIVIDE"
	}
	return "<UNSET>"
}

func FromOperationString(s string) Operation {
	switch s {
	case "Operation_ADD":
		return Operation_ADD
	case "Operation_SUBTRACT":
		return Operation_SUBTRACT
	case "Operation_MULTIPLY":
		return Operation_MULTIPLY
	case "Operation_DIVIDE":
		return Operation_DIVIDE
	}
	return Operation(-10000)
}

func (p Operation) Value() int {
	return int(p)
}

func (p Operation) IsEnum() bool {
	return true
}

/**
 *Thrift lets you do typedefs to get pretty names for your types. Standard
 *C style here.
 */
type MyInteger int32

/**
 * Structs are the basic complex data structures. They are comprised of fields
 * which each have an integer identifier, a type, a symbolic name, and an
 * optional default value.
 * 
 * Fields can be declared "optional", which ensures they will not be included
 * in the serialized output if they aren't set.  Note that this requires some
 * manual management in some languages.
 * 
 * Attributes:
 *  - Num1
 *  - Num2
 *  - Op
 *  - Comment
 */
type Work struct {
	Num1    int32     "num1"    // 1
	Num2    int32     "num2"    // 2
	Op      Operation "op"      // 3
	Comment string    "comment" // 4
}

var tstructWork = thrift.NewTStruct("Work", []thrift.TField{
	thrift.NewTField("num1", thrift.I32, 1),
	thrift.NewTField("num2", thrift.I32, 2),
	thrift.NewTField("op", thrift.I32, 3),
	thrift.NewTField("comment", thrift.STRING, 4),
})

func (*Work) GetTStruct() thrift.TStruct { return tstructWork }
func NewWork() *Work {
	output := &Work{}
	{
		output.Num1 = 0
		output.Op = math.MinInt32 - 1
	}
	return output
}

func (p *Work) IsSetOp() bool {
	return int64(p.Op) != math.MinInt32-1
}

func (p *Work) IsSetComment() bool {
	return p.Comment != ""
}

func (p *Work) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructWork.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructWork.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Operation
			if fieldTypeId == thrift.I32 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Work) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v0, err1 := iprot.ReadI32()
	if err1 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "num1", p.ThriftName(), err1)
	}
	p.Num1 = v0
	return err
}

func (p *Work) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v2, err3 := iprot.ReadI32()
	if err3 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "num2", p.ThriftName(), err3)
	}
	p.Num2 = v2
	return err
}

func (p *Work) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v4, err5 := iprot.ReadI32()
	if err5 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "op", p.ThriftName(), err5)
	}
	p.Op = Operation(v4)
	return err
}

func (p *Work) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v6, err7 := iprot.ReadString()
	if err7 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "comment", p.ThriftName(), err7)
	}
	p.Comment = v6
	return err
}

func (p *Work) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Work")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Work) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("num1", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "num1", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Num1))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "num1", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "num1", p.ThriftName(), err)
	}
	return err
}

func (p *Work) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("num2", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "num2", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Num2))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "num2", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "num2", p.ThriftName(), err)
	}
	return err
}

func (p *Work) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetOp() {
		err = oprot.WriteFieldBegin("op", thrift.I32, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "op", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Op))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "op", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "op", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Work) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetComment() {
		err = oprot.WriteFieldBegin("comment", thrift.STRING, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "comment", p.ThriftName(), err)
		}
		err = oprot.WriteString(p.Comment)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "comment", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "comment", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Work) TStructName() string {
	return "Work"
}

func (p *Work) ThriftName() string {
	return "Work"
}

func (p *Work) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Num1
	case 2:
		return p.Num2
	case 3:
		return p.Op
	case 4:
		return p.Comment
	}
	return nil
}

func (p *Work) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("num1", thrift.I32, 1),
		thrift.NewTField("num2", thrift.I32, 2),
		thrift.NewTField("op", thrift.I32, 3),
		thrift.NewTField("comment", thrift.STRING, 4),
	})
}

/**
 * Structs can also be exceptions, if they are nasty.
 * 
 * Attributes:
 *  - What
 *  - Why
 */
type InvalidOperation struct {
	What int32  "what" // 1
	Why  string "why"  // 2
}

var tstructInvalidOperation = thrift.NewTStruct("InvalidOperation", []thrift.TField{
	thrift.NewTField("what", thrift.I32, 1),
	thrift.NewTField("why", thrift.STRING, 2),
})

func (*InvalidOperation) GetTStruct() thrift.TStruct { return tstructInvalidOperation }
func NewInvalidOperation() *InvalidOperation {
	output := &InvalidOperation{}
	{
	}
	return output
}

func (p *InvalidOperation) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructInvalidOperation.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructInvalidOperation.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *InvalidOperation) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v8, err9 := iprot.ReadI32()
	if err9 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "what", p.ThriftName(), err9)
	}
	p.What = v8
	return err
}

func (p *InvalidOperation) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v10, err11 := iprot.ReadString()
	if err11 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "why", p.ThriftName(), err11)
	}
	p.Why = v10
	return err
}

func (p *InvalidOperation) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("InvalidOperation")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *InvalidOperation) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("what", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "what", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.What))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "what", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "what", p.ThriftName(), err)
	}
	return err
}

func (p *InvalidOperation) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("why", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "why", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Why)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "why", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "why", p.ThriftName(), err)
	}
	return err
}

func (p *InvalidOperation) TStructName() string {
	return "InvalidOperation"
}

func (p *InvalidOperation) ThriftName() string {
	return "InvalidOperation"
}

func (p *InvalidOperation) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.What
	case 2:
		return p.Why
	}
	return nil
}

func (p *InvalidOperation) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("what", thrift.I32, 1),
		thrift.NewTField("why", thrift.STRING, 2),
	})
}

const I32_INT32CONSTANT = 9853

var _MAPCONSTANT map[string]string

func init() {
	_MAPCONSTANT = make(map[string]string, 2)
	{
		var k12 string = "hello"
		var v13 string = "world"
		_MAPCONSTANT[k12] = v13
		var k14 string = "goodnight"
		var v15 string = "moon"
		_MAPCONSTANT[k14] = v15
	}

}
