/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package librarytest

import (
	"fmt"
	"github.com/apesternikov/thrift4go/lib/go/src/thrift"
	"math"
)

// This is a temporary safety measure to ensure that the `math'
// import does not trip up any generated output that may not
// happen to use the math import due to not having emited enums.
//
// Future clean-ups will deprecate the need for this.
var _ = fmt.Print
var _ = math.MinInt32

type IServiceForExceptionWithAMap interface {
	MethodThatThrowsAnException() (xwamap *ExceptionWithAMap, err error)
}

type ServiceForExceptionWithAMapClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewServiceForExceptionWithAMapClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ServiceForExceptionWithAMapClient {
	return &ServiceForExceptionWithAMapClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewServiceForExceptionWithAMapClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ServiceForExceptionWithAMapClient {
	return &ServiceForExceptionWithAMapClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

func (p *ServiceForExceptionWithAMapClient) MethodThatThrowsAnException() (xwamap *ExceptionWithAMap, err error) {
	err = p.SendMethodThatThrowsAnException()
	if err != nil {
		return
	}
	return p.RecvMethodThatThrowsAnException()
}

func (p *ServiceForExceptionWithAMapClient) SendMethodThatThrowsAnException() (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("methodThatThrowsAnException", thrift.CALL, p.SeqId)
	args1042 := NewMethodThatThrowsAnExceptionArgs()
	err = args1042.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *ServiceForExceptionWithAMapClient) RecvMethodThatThrowsAnException() (xwamap *ExceptionWithAMap, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1044 := thrift.NewTApplicationExceptionDefault()
		var error1045 error
		error1045, err = error1044.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1045
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result1043 := NewMethodThatThrowsAnExceptionResult()
	err = result1043.Read(iprot)
	iprot.ReadMessageEnd()
	if result1043.Xwamap != nil {
		xwamap = result1043.Xwamap
	}
	return
}

type ServiceForExceptionWithAMapProcessor struct {
	handler      IServiceForExceptionWithAMap
	processorMap map[string]thrift.TProcessorFunction
}

func (p *ServiceForExceptionWithAMapProcessor) Handler() IServiceForExceptionWithAMap {
	return p.handler
}

func (p *ServiceForExceptionWithAMapProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ServiceForExceptionWithAMapProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
	processor, exists = p.processorMap[key]
	return processor, exists
}

func (p *ServiceForExceptionWithAMapProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewServiceForExceptionWithAMapProcessor(handler IServiceForExceptionWithAMap) *ServiceForExceptionWithAMapProcessor {

	self1046 := &ServiceForExceptionWithAMapProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self1046.processorMap["methodThatThrowsAnException"] = &serviceForExceptionWithAMapProcessorMethodThatThrowsAnException{handler: handler}
	return self1046
}

func (p *ServiceForExceptionWithAMapProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	process, nameFound := p.GetProcessorFunction(name)
	if !nameFound || process == nil {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x1047 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
		x1047.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return false, x1047
	}
	return process.Process(seqId, iprot, oprot)
}

type serviceForExceptionWithAMapProcessorMethodThatThrowsAnException struct {
	handler IServiceForExceptionWithAMap
}

func (p *serviceForExceptionWithAMapProcessorMethodThatThrowsAnException) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMethodThatThrowsAnExceptionArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("methodThatThrowsAnException", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMethodThatThrowsAnExceptionResult()
	if result.Xwamap, err = p.handler.MethodThatThrowsAnException(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing methodThatThrowsAnException: "+err.Error())
		oprot.WriteMessageBegin("methodThatThrowsAnException", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("methodThatThrowsAnException", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type MethodThatThrowsAnExceptionArgs struct {
}

var tstructMethodThatThrowsAnExceptionArgs = thrift.NewTStruct("methodThatThrowsAnException_args", []thrift.TField{})

func (*MethodThatThrowsAnExceptionArgs) GetTStruct() thrift.TStruct {
	return tstructMethodThatThrowsAnExceptionArgs
}
func NewMethodThatThrowsAnExceptionArgs() *MethodThatThrowsAnExceptionArgs {
	output := &MethodThatThrowsAnExceptionArgs{}
	{
	}
	return output
}

func (p *MethodThatThrowsAnExceptionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMethodThatThrowsAnExceptionArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMethodThatThrowsAnExceptionArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MethodThatThrowsAnExceptionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("methodThatThrowsAnException_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MethodThatThrowsAnExceptionArgs) TStructName() string {
	return "MethodThatThrowsAnExceptionArgs"
}

func (p *MethodThatThrowsAnExceptionArgs) ThriftName() string {
	return "methodThatThrowsAnException_args"
}

func (p *MethodThatThrowsAnExceptionArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *MethodThatThrowsAnExceptionArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Xwamap
 */
type MethodThatThrowsAnExceptionResult struct {
	Xwamap *ExceptionWithAMap "xwamap" // 1
}

var tstructMethodThatThrowsAnExceptionResult = thrift.NewTStruct("methodThatThrowsAnException_result", []thrift.TField{
	thrift.NewTField("xwamap", thrift.STRUCT, 1),
})

func (*MethodThatThrowsAnExceptionResult) GetTStruct() thrift.TStruct {
	return tstructMethodThatThrowsAnExceptionResult
}
func NewMethodThatThrowsAnExceptionResult() *MethodThatThrowsAnExceptionResult {
	output := &MethodThatThrowsAnExceptionResult{}
	{
	}
	return output
}

func (p *MethodThatThrowsAnExceptionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMethodThatThrowsAnExceptionResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMethodThatThrowsAnExceptionResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //ExceptionWithAMap
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MethodThatThrowsAnExceptionResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Xwamap = NewExceptionWithAMap()
	err1050 := p.Xwamap.Read(iprot)
	if err1050 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.XwamapExceptionWithAMap", err1050)
	}
	return err
}

func (p *MethodThatThrowsAnExceptionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("methodThatThrowsAnException_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Xwamap != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MethodThatThrowsAnExceptionResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Xwamap != nil {
		err = oprot.WriteFieldBegin("xwamap", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "xwamap", p.ThriftName(), err)
		}
		err = p.Xwamap.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ExceptionWithAMap", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "xwamap", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MethodThatThrowsAnExceptionResult) TStructName() string {
	return "MethodThatThrowsAnExceptionResult"
}

func (p *MethodThatThrowsAnExceptionResult) ThriftName() string {
	return "methodThatThrowsAnException_result"
}

func (p *MethodThatThrowsAnExceptionResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Xwamap
	}
	return nil
}

func (p *MethodThatThrowsAnExceptionResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("xwamap", thrift.STRUCT, 1),
	})
}
