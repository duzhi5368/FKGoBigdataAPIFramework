/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package librarytest

import (
	"fmt"
	"github.com/apesternikov/thrift4go/lib/go/src/thrift"
	"math"
)

// This is a temporary safety measure to ensure that the `math'
// import does not trip up any generated output that may not
// happen to use the math import due to not having emited enums.
//
// Future clean-ups will deprecate the need for this.
var _ = fmt.Print
var _ = math.MinInt32

type SomeEnum int64

const (
	SomeEnum_ONE SomeEnum = 1
	SomeEnum_TWO SomeEnum = 2
)

func (p SomeEnum) String() string {
	switch p {
	case SomeEnum_ONE:
		return "SomeEnum_ONE"
	case SomeEnum_TWO:
		return "SomeEnum_TWO"
	}
	return "<UNSET>"
}

func FromSomeEnumString(s string) SomeEnum {
	switch s {
	case "SomeEnum_ONE":
		return SomeEnum_ONE
	case "SomeEnum_TWO":
		return SomeEnum_TWO
	}
	return SomeEnum(-10000)
}

func (p SomeEnum) Value() int {
	return int(p)
}

func (p SomeEnum) IsEnum() bool {
	return true
}

type SomeMap map[int32]int32

/**
 * Attributes:
 *  - Nan
 *  - Inf
 *  - Neginf
 *  - Repeating
 *  - Big
 *  - Small
 *  - Zero
 *  - Negzero
 */
type Doubles struct {
	Nan       float64 "nan"       // 1
	Inf       float64 "inf"       // 2
	Neginf    float64 "neginf"    // 3
	Repeating float64 "repeating" // 4
	Big       float64 "big"       // 5
	Small     float64 "small"     // 6
	Zero      float64 "zero"      // 7
	Negzero   float64 "negzero"   // 8
}

var tstructDoubles = thrift.NewTStruct("Doubles", []thrift.TField{
	thrift.NewTField("nan", thrift.DOUBLE, 1),
	thrift.NewTField("inf", thrift.DOUBLE, 2),
	thrift.NewTField("neginf", thrift.DOUBLE, 3),
	thrift.NewTField("repeating", thrift.DOUBLE, 4),
	thrift.NewTField("big", thrift.DOUBLE, 5),
	thrift.NewTField("small", thrift.DOUBLE, 6),
	thrift.NewTField("zero", thrift.DOUBLE, 7),
	thrift.NewTField("negzero", thrift.DOUBLE, 8),
})

func (*Doubles) GetTStruct() thrift.TStruct { return tstructDoubles }
func NewDoubles() *Doubles {
	output := &Doubles{}
	{
	}
	return output
}

func (p *Doubles) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDoubles.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDoubles.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 7: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 8: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v0, err1 := iprot.ReadDouble()
	if err1 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "nan", p.ThriftName(), err1)
	}
	p.Nan = v0
	return err
}

func (p *Doubles) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v2, err3 := iprot.ReadDouble()
	if err3 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "inf", p.ThriftName(), err3)
	}
	p.Inf = v2
	return err
}

func (p *Doubles) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v4, err5 := iprot.ReadDouble()
	if err5 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "neginf", p.ThriftName(), err5)
	}
	p.Neginf = v4
	return err
}

func (p *Doubles) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v6, err7 := iprot.ReadDouble()
	if err7 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "repeating", p.ThriftName(), err7)
	}
	p.Repeating = v6
	return err
}

func (p *Doubles) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v8, err9 := iprot.ReadDouble()
	if err9 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "big", p.ThriftName(), err9)
	}
	p.Big = v8
	return err
}

func (p *Doubles) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v10, err11 := iprot.ReadDouble()
	if err11 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "small", p.ThriftName(), err11)
	}
	p.Small = v10
	return err
}

func (p *Doubles) readField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v12, err13 := iprot.ReadDouble()
	if err13 != nil {
		return thrift.NewTProtocolExceptionReadField(7, "zero", p.ThriftName(), err13)
	}
	p.Zero = v12
	return err
}

func (p *Doubles) readField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v14, err15 := iprot.ReadDouble()
	if err15 != nil {
		return thrift.NewTProtocolExceptionReadField(8, "negzero", p.ThriftName(), err15)
	}
	p.Negzero = v14
	return err
}

func (p *Doubles) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Doubles")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = p.writeField7(oprot)
	if err != nil {
		return err
	}
	err = p.writeField8(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("nan", thrift.DOUBLE, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "nan", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Nan))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "nan", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "nan", p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("inf", thrift.DOUBLE, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "inf", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Inf))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "inf", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "inf", p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("neginf", thrift.DOUBLE, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "neginf", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Neginf))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "neginf", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "neginf", p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("repeating", thrift.DOUBLE, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "repeating", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Repeating))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "repeating", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "repeating", p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("big", thrift.DOUBLE, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "big", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Big))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "big", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "big", p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("small", thrift.DOUBLE, 6)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "small", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Small))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "small", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "small", p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) writeField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("zero", thrift.DOUBLE, 7)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "zero", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Zero))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "zero", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "zero", p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) writeField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("negzero", thrift.DOUBLE, 8)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "negzero", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Negzero))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "negzero", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "negzero", p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) TStructName() string {
	return "Doubles"
}

func (p *Doubles) ThriftName() string {
	return "Doubles"
}

func (p *Doubles) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Nan
	case 2:
		return p.Inf
	case 3:
		return p.Neginf
	case 4:
		return p.Repeating
	case 5:
		return p.Big
	case 6:
		return p.Small
	case 7:
		return p.Zero
	case 8:
		return p.Negzero
	}
	return nil
}

func (p *Doubles) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("nan", thrift.DOUBLE, 1),
		thrift.NewTField("inf", thrift.DOUBLE, 2),
		thrift.NewTField("neginf", thrift.DOUBLE, 3),
		thrift.NewTField("repeating", thrift.DOUBLE, 4),
		thrift.NewTField("big", thrift.DOUBLE, 5),
		thrift.NewTField("small", thrift.DOUBLE, 6),
		thrift.NewTField("zero", thrift.DOUBLE, 7),
		thrift.NewTField("negzero", thrift.DOUBLE, 8),
	})
}

/**
 * Attributes:
 *  - ImTrue
 *  - ImFalse
 *  - ABite
 *  - Integer16
 *  - Integer32
 *  - Integer64
 *  - DoublePrecision
 *  - SomeCharacters
 *  - ZomgUnicode
 *  - WhatWho
 *  - Base64
 *  - ByteList
 *  - I16List
 *  - I64List
 */
type OneOfEach struct {
	ImTrue          bool    "im_true"          // 1
	ImFalse         bool    "im_false"         // 2
	ABite           int8    "a_bite"           // 3
	Integer16       int16   "integer16"        // 4
	Integer32       int32   "integer32"        // 5
	Integer64       int64   "integer64"        // 6
	DoublePrecision float64 "double_precision" // 7
	SomeCharacters  string  "some_characters"  // 8
	ZomgUnicode     string  "zomg_unicode"     // 9
	WhatWho         bool    "what_who"         // 10
	Base64          []byte  "base64"           // 11
	ByteList        []int8  "byte_list"        // 12
	I16List         []int16 "i16_list"         // 13
	I64List         []int64 "i64_list"         // 14
}

var tstructOneOfEach = thrift.NewTStruct("OneOfEach", []thrift.TField{
	thrift.NewTField("im_true", thrift.BOOL, 1),
	thrift.NewTField("im_false", thrift.BOOL, 2),
	thrift.NewTField("a_bite", thrift.BYTE, 3),
	thrift.NewTField("integer16", thrift.I16, 4),
	thrift.NewTField("integer32", thrift.I32, 5),
	thrift.NewTField("integer64", thrift.I64, 6),
	thrift.NewTField("double_precision", thrift.DOUBLE, 7),
	thrift.NewTField("some_characters", thrift.STRING, 8),
	thrift.NewTField("zomg_unicode", thrift.STRING, 9),
	thrift.NewTField("what_who", thrift.BOOL, 10),
	thrift.NewTField("base64", thrift.STRING, 11),
	thrift.NewTField("byte_list", thrift.LIST, 12),
	thrift.NewTField("i16_list", thrift.LIST, 13),
	thrift.NewTField("i64_list", thrift.LIST, 14),
})

func (*OneOfEach) GetTStruct() thrift.TStruct { return tstructOneOfEach }
func NewOneOfEach() *OneOfEach {
	output := &OneOfEach{}
	{
		output.ABite = 127
		output.Integer16 = 32767
		output.Integer64 = 10000000000
		output.ByteList = make([]int8, 3, 3)
		{
			var v16 int8
			v16 = 1
			output.ByteList[0] = v16
			v16 = 2
			output.ByteList[1] = v16
			v16 = 3
			output.ByteList[2] = v16
		}

		output.I16List = make([]int16, 3, 3)
		{
			var v17 int16
			v17 = 1
			output.I16List[0] = v17
			v17 = 2
			output.I16List[1] = v17
			v17 = 3
			output.I16List[2] = v17
		}

		output.I64List = make([]int64, 3, 3)
		{
			var v18 int64
			v18 = 1
			output.I64List[0] = v18
			v18 = 2
			output.I64List[1] = v18
			v18 = 3
			output.I64List[2] = v18
		}

	}
	return output
}

func (p *OneOfEach) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructOneOfEach.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructOneOfEach.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //bool
			if fieldTypeId == thrift.BOOL {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //bool
			if fieldTypeId == thrift.BOOL {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //byte
			if fieldTypeId == thrift.BYTE {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i16
			if fieldTypeId == thrift.I16 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 7: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 8: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 9: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField9(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 10: //bool
			if fieldTypeId == thrift.BOOL {
				err = p.readField10(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 11: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField11(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 12: //
			if fieldTypeId == thrift.LIST {
				err = p.readField12(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 13: //
			if fieldTypeId == thrift.LIST {
				err = p.readField13(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 14: //
			if fieldTypeId == thrift.LIST {
				err = p.readField14(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v19, err20 := iprot.ReadBool()
	if err20 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "im_true", p.ThriftName(), err20)
	}
	p.ImTrue = v19
	return err
}

func (p *OneOfEach) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v21, err22 := iprot.ReadBool()
	if err22 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "im_false", p.ThriftName(), err22)
	}
	p.ImFalse = v21
	return err
}

func (p *OneOfEach) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v23, err24 := iprot.ReadByte()
	if err24 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "a_bite", p.ThriftName(), err24)
	}
	p.ABite = v23
	return err
}

func (p *OneOfEach) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v25, err26 := iprot.ReadI16()
	if err26 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "integer16", p.ThriftName(), err26)
	}
	p.Integer16 = v25
	return err
}

func (p *OneOfEach) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v27, err28 := iprot.ReadI32()
	if err28 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "integer32", p.ThriftName(), err28)
	}
	p.Integer32 = v27
	return err
}

func (p *OneOfEach) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v29, err30 := iprot.ReadI64()
	if err30 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "integer64", p.ThriftName(), err30)
	}
	p.Integer64 = v29
	return err
}

func (p *OneOfEach) readField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v31, err32 := iprot.ReadDouble()
	if err32 != nil {
		return thrift.NewTProtocolExceptionReadField(7, "double_precision", p.ThriftName(), err32)
	}
	p.DoublePrecision = v31
	return err
}

func (p *OneOfEach) readField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v33, err34 := iprot.ReadString()
	if err34 != nil {
		return thrift.NewTProtocolExceptionReadField(8, "some_characters", p.ThriftName(), err34)
	}
	p.SomeCharacters = v33
	return err
}

func (p *OneOfEach) readField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v35, err36 := iprot.ReadString()
	if err36 != nil {
		return thrift.NewTProtocolExceptionReadField(9, "zomg_unicode", p.ThriftName(), err36)
	}
	p.ZomgUnicode = v35
	return err
}

func (p *OneOfEach) readField10(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v37, err38 := iprot.ReadBool()
	if err38 != nil {
		return thrift.NewTProtocolExceptionReadField(10, "what_who", p.ThriftName(), err38)
	}
	p.WhatWho = v37
	return err
}

func (p *OneOfEach) readField11(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v39, err40 := iprot.ReadBinary()
	if err40 != nil {
		return thrift.NewTProtocolExceptionReadField(11, "base64", p.ThriftName(), err40)
	}
	p.Base64 = v39
	return err
}

func (p *OneOfEach) readField12(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype46, _size43, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteList", "", err)
	}
	_ = _etype46
	p.ByteList = make([]int8, _size43, _size43)
	for i := 0; i < _size43; i++ {
		v49, err50 := iprot.ReadByte()
		if err50 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem48", "", err50)
		}
		_elem48 := v49
		p.ByteList[i] = _elem48
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *OneOfEach) readField13(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype56, _size53, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I16List", "", err)
	}
	_ = _etype56
	p.I16List = make([]int16, _size53, _size53)
	for i := 0; i < _size53; i++ {
		v59, err60 := iprot.ReadI16()
		if err60 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem58", "", err60)
		}
		_elem58 := v59
		p.I16List[i] = _elem58
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *OneOfEach) readField14(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype66, _size63, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I64List", "", err)
	}
	_ = _etype66
	p.I64List = make([]int64, _size63, _size63)
	for i := 0; i < _size63; i++ {
		v69, err70 := iprot.ReadI64()
		if err70 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem68", "", err70)
		}
		_elem68 := v69
		p.I64List[i] = _elem68
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *OneOfEach) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("OneOfEach")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = p.writeField7(oprot)
	if err != nil {
		return err
	}
	err = p.writeField8(oprot)
	if err != nil {
		return err
	}
	err = p.writeField9(oprot)
	if err != nil {
		return err
	}
	err = p.writeField10(oprot)
	if err != nil {
		return err
	}
	err = p.writeField11(oprot)
	if err != nil {
		return err
	}
	err = p.writeField12(oprot)
	if err != nil {
		return err
	}
	err = p.writeField13(oprot)
	if err != nil {
		return err
	}
	err = p.writeField14(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("im_true", thrift.BOOL, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "im_true", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.ImTrue))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "im_true", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "im_true", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("im_false", thrift.BOOL, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "im_false", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.ImFalse))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "im_false", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "im_false", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a_bite", thrift.BYTE, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "a_bite", p.ThriftName(), err)
	}
	err = oprot.WriteByte(int8(p.ABite))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "a_bite", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "a_bite", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("integer16", thrift.I16, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "integer16", p.ThriftName(), err)
	}
	err = oprot.WriteI16(int16(p.Integer16))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "integer16", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "integer16", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("integer32", thrift.I32, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "integer32", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Integer32))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "integer32", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "integer32", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("integer64", thrift.I64, 6)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "integer64", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Integer64))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "integer64", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "integer64", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) writeField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("double_precision", thrift.DOUBLE, 7)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "double_precision", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.DoublePrecision))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "double_precision", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "double_precision", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) writeField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("some_characters", thrift.STRING, 8)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "some_characters", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.SomeCharacters)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "some_characters", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "some_characters", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) writeField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("zomg_unicode", thrift.STRING, 9)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "zomg_unicode", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.ZomgUnicode)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "zomg_unicode", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "zomg_unicode", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) writeField10(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("what_who", thrift.BOOL, 10)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(10, "what_who", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.WhatWho))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(10, "what_who", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(10, "what_who", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) writeField11(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Base64 != nil {
		err = oprot.WriteFieldBegin("base64", thrift.STRING, 11)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(11, "base64", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Base64)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(11, "base64", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(11, "base64", p.ThriftName(), err)
		}
	}
	return err
}

func (p *OneOfEach) writeField12(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteList != nil {
		err = oprot.WriteFieldBegin("byte_list", thrift.LIST, 12)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(12, "byte_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BYTE, len(p.ByteList))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter71 := range p.ByteList {
			err = oprot.WriteByte(int8(Iter71))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter71", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(12, "byte_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *OneOfEach) writeField13(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I16List != nil {
		err = oprot.WriteFieldBegin("i16_list", thrift.LIST, 13)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(13, "i16_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.I16, len(p.I16List))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter72 := range p.I16List {
			err = oprot.WriteI16(int16(Iter72))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter72", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(13, "i16_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *OneOfEach) writeField14(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I64List != nil {
		err = oprot.WriteFieldBegin("i64_list", thrift.LIST, 14)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(14, "i64_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.I64, len(p.I64List))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter73 := range p.I64List {
			err = oprot.WriteI64(int64(Iter73))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter73", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(14, "i64_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *OneOfEach) TStructName() string {
	return "OneOfEach"
}

func (p *OneOfEach) ThriftName() string {
	return "OneOfEach"
}

func (p *OneOfEach) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ImTrue
	case 2:
		return p.ImFalse
	case 3:
		return p.ABite
	case 4:
		return p.Integer16
	case 5:
		return p.Integer32
	case 6:
		return p.Integer64
	case 7:
		return p.DoublePrecision
	case 8:
		return p.SomeCharacters
	case 9:
		return p.ZomgUnicode
	case 10:
		return p.WhatWho
	case 11:
		return p.Base64
	case 12:
		return p.ByteList
	case 13:
		return p.I16List
	case 14:
		return p.I64List
	}
	return nil
}

func (p *OneOfEach) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("im_true", thrift.BOOL, 1),
		thrift.NewTField("im_false", thrift.BOOL, 2),
		thrift.NewTField("a_bite", thrift.BYTE, 3),
		thrift.NewTField("integer16", thrift.I16, 4),
		thrift.NewTField("integer32", thrift.I32, 5),
		thrift.NewTField("integer64", thrift.I64, 6),
		thrift.NewTField("double_precision", thrift.DOUBLE, 7),
		thrift.NewTField("some_characters", thrift.STRING, 8),
		thrift.NewTField("zomg_unicode", thrift.STRING, 9),
		thrift.NewTField("what_who", thrift.BOOL, 10),
		thrift.NewTField("base64", thrift.STRING, 11),
		thrift.NewTField("byte_list", thrift.LIST, 12),
		thrift.NewTField("i16_list", thrift.LIST, 13),
		thrift.NewTField("i64_list", thrift.LIST, 14),
	})
}

/**
 * Attributes:
 *  - TypeA1
 *  - Message
 */
type Bonk struct {
	TypeA1  int32  "type"    // 1
	Message string "message" // 2
}

var tstructBonk = thrift.NewTStruct("Bonk", []thrift.TField{
	thrift.NewTField("type", thrift.I32, 1),
	thrift.NewTField("message", thrift.STRING, 2),
})

func (*Bonk) GetTStruct() thrift.TStruct { return tstructBonk }
func NewBonk() *Bonk {
	output := &Bonk{}
	{
	}
	return output
}

func (p *Bonk) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructBonk.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructBonk.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Bonk) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v74, err75 := iprot.ReadI32()
	if err75 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "type", p.ThriftName(), err75)
	}
	p.TypeA1 = v74
	return err
}

func (p *Bonk) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v76, err77 := iprot.ReadString()
	if err77 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "message", p.ThriftName(), err77)
	}
	p.Message = v76
	return err
}

func (p *Bonk) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Bonk")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Bonk) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("type", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.TypeA1))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err)
	}
	return err
}

func (p *Bonk) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("message", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "message", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Message)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "message", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "message", p.ThriftName(), err)
	}
	return err
}

func (p *Bonk) TStructName() string {
	return "Bonk"
}

func (p *Bonk) ThriftName() string {
	return "Bonk"
}

func (p *Bonk) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TypeA1
	case 2:
		return p.Message
	}
	return nil
}

func (p *Bonk) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("type", thrift.I32, 1),
		thrift.NewTField("message", thrift.STRING, 2),
	})
}

/**
 * Attributes:
 *  - MyBonk
 *  - MyOoe
 */
type Nesting struct {
	MyBonk *Bonk      "my_bonk" // 1
	MyOoe  *OneOfEach "my_ooe"  // 2
}

var tstructNesting = thrift.NewTStruct("Nesting", []thrift.TField{
	thrift.NewTField("my_bonk", thrift.STRUCT, 1),
	thrift.NewTField("my_ooe", thrift.STRUCT, 2),
})

func (*Nesting) GetTStruct() thrift.TStruct { return tstructNesting }
func NewNesting() *Nesting {
	output := &Nesting{}
	{
	}
	return output
}

func (p *Nesting) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructNesting.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructNesting.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Bonk
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //OneOfEach
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Nesting) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.MyBonk = NewBonk()
	err80 := p.MyBonk.Read(iprot)
	if err80 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.MyBonkBonk", err80)
	}
	return err
}

func (p *Nesting) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.MyOoe = NewOneOfEach()
	err83 := p.MyOoe.Read(iprot)
	if err83 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.MyOoeOneOfEach", err83)
	}
	return err
}

func (p *Nesting) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Nesting")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Nesting) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.MyBonk != nil {
		err = oprot.WriteFieldBegin("my_bonk", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "my_bonk", p.ThriftName(), err)
		}
		err = p.MyBonk.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("Bonk", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "my_bonk", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Nesting) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.MyOoe != nil {
		err = oprot.WriteFieldBegin("my_ooe", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "my_ooe", p.ThriftName(), err)
		}
		err = p.MyOoe.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("OneOfEach", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "my_ooe", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Nesting) TStructName() string {
	return "Nesting"
}

func (p *Nesting) ThriftName() string {
	return "Nesting"
}

func (p *Nesting) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.MyBonk
	case 2:
		return p.MyOoe
	}
	return nil
}

func (p *Nesting) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("my_bonk", thrift.STRUCT, 1),
		thrift.NewTField("my_ooe", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - FirstTag2
 *  - SecondTag1
 */
type Backwards struct {
	SecondTag1 int32 "second_tag1" // 1
	FirstTag2  int32 "first_tag2"  // 2
}

var tstructBackwards = thrift.NewTStruct("Backwards", []thrift.TField{
	thrift.NewTField("first_tag2", thrift.I32, 2),
	thrift.NewTField("second_tag1", thrift.I32, 1),
})

func (*Backwards) GetTStruct() thrift.TStruct { return tstructBackwards }
func NewBackwards() *Backwards {
	output := &Backwards{}
	{
	}
	return output
}

func (p *Backwards) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructBackwards.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructBackwards.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Backwards) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v84, err85 := iprot.ReadI32()
	if err85 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "first_tag2", p.ThriftName(), err85)
	}
	p.FirstTag2 = v84
	return err
}

func (p *Backwards) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v86, err87 := iprot.ReadI32()
	if err87 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "second_tag1", p.ThriftName(), err87)
	}
	p.SecondTag1 = v86
	return err
}

func (p *Backwards) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Backwards")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Backwards) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("second_tag1", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "second_tag1", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.SecondTag1))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "second_tag1", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "second_tag1", p.ThriftName(), err)
	}
	return err
}

func (p *Backwards) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("first_tag2", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "first_tag2", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.FirstTag2))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "first_tag2", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "first_tag2", p.ThriftName(), err)
	}
	return err
}

func (p *Backwards) TStructName() string {
	return "Backwards"
}

func (p *Backwards) ThriftName() string {
	return "Backwards"
}

func (p *Backwards) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 2:
		return p.FirstTag2
	case 1:
		return p.SecondTag1
	}
	return nil
}

func (p *Backwards) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("first_tag2", thrift.I32, 2),
		thrift.NewTField("second_tag1", thrift.I32, 1),
	})
}

type Empty struct {
}

var tstructEmpty = thrift.NewTStruct("Empty", []thrift.TField{})

func (*Empty) GetTStruct() thrift.TStruct { return tstructEmpty }
func NewEmpty() *Empty {
	output := &Empty{}
	{
	}
	return output
}

func (p *Empty) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructEmpty.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructEmpty.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Empty) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Empty")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Empty) TStructName() string {
	return "Empty"
}

func (p *Empty) ThriftName() string {
	return "Empty"
}

func (p *Empty) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *Empty) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Foo
 */
type Wrapper struct {
	Foo *Empty "foo" // 1
}

var tstructWrapper = thrift.NewTStruct("Wrapper", []thrift.TField{
	thrift.NewTField("foo", thrift.STRUCT, 1),
})

func (*Wrapper) GetTStruct() thrift.TStruct { return tstructWrapper }
func NewWrapper() *Wrapper {
	output := &Wrapper{}
	{
	}
	return output
}

func (p *Wrapper) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructWrapper.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructWrapper.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Empty
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Wrapper) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Foo = NewEmpty()
	err90 := p.Foo.Read(iprot)
	if err90 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.FooEmpty", err90)
	}
	return err
}

func (p *Wrapper) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Wrapper")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Wrapper) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Foo != nil {
		err = oprot.WriteFieldBegin("foo", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "foo", p.ThriftName(), err)
		}
		err = p.Foo.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("Empty", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "foo", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Wrapper) TStructName() string {
	return "Wrapper"
}

func (p *Wrapper) ThriftName() string {
	return "Wrapper"
}

func (p *Wrapper) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Foo
	}
	return nil
}

func (p *Wrapper) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("foo", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - A
 *  - B
 *  - C
 *  - D
 *  - Myintlist
 *  - Maps
 *  - Bigint
 *  - Triple
 */
type RandomStuff struct {
	A         int32              "a"         // 1
	B         int32              "b"         // 2
	C         int32              "c"         // 3
	D         int32              "d"         // 4
	Myintlist []int32            "myintlist" // 5
	Maps      map[int32]*Wrapper "maps"      // 6
	Bigint    int64              "bigint"    // 7
	Triple    float64            "triple"    // 8
}

var tstructRandomStuff = thrift.NewTStruct("RandomStuff", []thrift.TField{
	thrift.NewTField("a", thrift.I32, 1),
	thrift.NewTField("b", thrift.I32, 2),
	thrift.NewTField("c", thrift.I32, 3),
	thrift.NewTField("d", thrift.I32, 4),
	thrift.NewTField("myintlist", thrift.LIST, 5),
	thrift.NewTField("maps", thrift.MAP, 6),
	thrift.NewTField("bigint", thrift.I64, 7),
	thrift.NewTField("triple", thrift.DOUBLE, 8),
})

func (*RandomStuff) GetTStruct() thrift.TStruct { return tstructRandomStuff }
func NewRandomStuff() *RandomStuff {
	output := &RandomStuff{}
	{
	}
	return output
}

func (p *RandomStuff) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructRandomStuff.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructRandomStuff.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.LIST {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //
			if fieldTypeId == thrift.MAP {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 7: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 8: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *RandomStuff) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v91, err92 := iprot.ReadI32()
	if err92 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "a", p.ThriftName(), err92)
	}
	p.A = v91
	return err
}

func (p *RandomStuff) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v93, err94 := iprot.ReadI32()
	if err94 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "b", p.ThriftName(), err94)
	}
	p.B = v93
	return err
}

func (p *RandomStuff) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v95, err96 := iprot.ReadI32()
	if err96 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "c", p.ThriftName(), err96)
	}
	p.C = v95
	return err
}

func (p *RandomStuff) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v97, err98 := iprot.ReadI32()
	if err98 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "d", p.ThriftName(), err98)
	}
	p.D = v97
	return err
}

func (p *RandomStuff) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype104, _size101, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Myintlist", "", err)
	}
	_ = _etype104
	p.Myintlist = make([]int32, _size101, _size101)
	for i := 0; i < _size101; i++ {
		v107, err108 := iprot.ReadI32()
		if err108 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem106", "", err108)
		}
		_elem106 := v107
		p.Myintlist[i] = _elem106
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *RandomStuff) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype112, _vtype113, _size111, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Maps", "", err)
	}
	_, _ = _ktype112, _vtype113
	p.Maps = make(map[int32]*Wrapper, _size111)
	for i := 0; i < _size111; i++ {
		v118, err119 := iprot.ReadI32()
		if err119 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key116", "", err119)
		}
		_key116 := v118
		_val117 := NewWrapper()
		err122 := _val117.Read(iprot)
		if err122 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_val117Wrapper", err122)
		}
		p.Maps[_key116] = _val117
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *RandomStuff) readField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v123, err124 := iprot.ReadI64()
	if err124 != nil {
		return thrift.NewTProtocolExceptionReadField(7, "bigint", p.ThriftName(), err124)
	}
	p.Bigint = v123
	return err
}

func (p *RandomStuff) readField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v125, err126 := iprot.ReadDouble()
	if err126 != nil {
		return thrift.NewTProtocolExceptionReadField(8, "triple", p.ThriftName(), err126)
	}
	p.Triple = v125
	return err
}

func (p *RandomStuff) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("RandomStuff")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = p.writeField7(oprot)
	if err != nil {
		return err
	}
	err = p.writeField8(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *RandomStuff) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.A))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a", p.ThriftName(), err)
	}
	return err
}

func (p *RandomStuff) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("b", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "b", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.B))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "b", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "b", p.ThriftName(), err)
	}
	return err
}

func (p *RandomStuff) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("c", thrift.I32, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "c", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.C))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "c", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "c", p.ThriftName(), err)
	}
	return err
}

func (p *RandomStuff) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("d", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "d", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.D))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "d", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "d", p.ThriftName(), err)
	}
	return err
}

func (p *RandomStuff) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Myintlist != nil {
		err = oprot.WriteFieldBegin("myintlist", thrift.LIST, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "myintlist", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.I32, len(p.Myintlist))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter127 := range p.Myintlist {
			err = oprot.WriteI32(int32(Iter127))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter127", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "myintlist", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RandomStuff) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Maps != nil {
		err = oprot.WriteFieldBegin("maps", thrift.MAP, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "maps", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Maps))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter128, Viter129 := range p.Maps {
			err = oprot.WriteI32(int32(Kiter128))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter128", "", err)
			}
			err = Viter129.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Wrapper", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "maps", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RandomStuff) writeField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("bigint", thrift.I64, 7)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "bigint", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Bigint))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "bigint", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "bigint", p.ThriftName(), err)
	}
	return err
}

func (p *RandomStuff) writeField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("triple", thrift.DOUBLE, 8)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "triple", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Triple))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "triple", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "triple", p.ThriftName(), err)
	}
	return err
}

func (p *RandomStuff) TStructName() string {
	return "RandomStuff"
}

func (p *RandomStuff) ThriftName() string {
	return "RandomStuff"
}

func (p *RandomStuff) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.A
	case 2:
		return p.B
	case 3:
		return p.C
	case 4:
		return p.D
	case 5:
		return p.Myintlist
	case 6:
		return p.Maps
	case 7:
		return p.Bigint
	case 8:
		return p.Triple
	}
	return nil
}

func (p *RandomStuff) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("a", thrift.I32, 1),
		thrift.NewTField("b", thrift.I32, 2),
		thrift.NewTField("c", thrift.I32, 3),
		thrift.NewTField("d", thrift.I32, 4),
		thrift.NewTField("myintlist", thrift.LIST, 5),
		thrift.NewTField("maps", thrift.MAP, 6),
		thrift.NewTField("bigint", thrift.I64, 7),
		thrift.NewTField("triple", thrift.DOUBLE, 8),
	})
}

/**
 * Attributes:
 *  - A
 *  - B1
 *  - B2
 *  - B3
 *  - B4
 *  - B5
 *  - B6
 */
type Base64 struct {
	A  int32  "a"  // 1
	B1 []byte "b1" // 2
	B2 []byte "b2" // 3
	B3 []byte "b3" // 4
	B4 []byte "b4" // 5
	B5 []byte "b5" // 6
	B6 []byte "b6" // 7
}

var tstructBase64 = thrift.NewTStruct("Base64", []thrift.TField{
	thrift.NewTField("a", thrift.I32, 1),
	thrift.NewTField("b1", thrift.STRING, 2),
	thrift.NewTField("b2", thrift.STRING, 3),
	thrift.NewTField("b3", thrift.STRING, 4),
	thrift.NewTField("b4", thrift.STRING, 5),
	thrift.NewTField("b5", thrift.STRING, 6),
	thrift.NewTField("b6", thrift.STRING, 7),
})

func (*Base64) GetTStruct() thrift.TStruct { return tstructBase64 }
func NewBase64() *Base64 {
	output := &Base64{}
	{
	}
	return output
}

func (p *Base64) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructBase64.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructBase64.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 7: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Base64) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v130, err131 := iprot.ReadI32()
	if err131 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "a", p.ThriftName(), err131)
	}
	p.A = v130
	return err
}

func (p *Base64) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v132, err133 := iprot.ReadBinary()
	if err133 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "b1", p.ThriftName(), err133)
	}
	p.B1 = v132
	return err
}

func (p *Base64) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v134, err135 := iprot.ReadBinary()
	if err135 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "b2", p.ThriftName(), err135)
	}
	p.B2 = v134
	return err
}

func (p *Base64) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v136, err137 := iprot.ReadBinary()
	if err137 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "b3", p.ThriftName(), err137)
	}
	p.B3 = v136
	return err
}

func (p *Base64) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v138, err139 := iprot.ReadBinary()
	if err139 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "b4", p.ThriftName(), err139)
	}
	p.B4 = v138
	return err
}

func (p *Base64) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v140, err141 := iprot.ReadBinary()
	if err141 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "b5", p.ThriftName(), err141)
	}
	p.B5 = v140
	return err
}

func (p *Base64) readField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v142, err143 := iprot.ReadBinary()
	if err143 != nil {
		return thrift.NewTProtocolExceptionReadField(7, "b6", p.ThriftName(), err143)
	}
	p.B6 = v142
	return err
}

func (p *Base64) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Base64")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = p.writeField7(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Base64) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.A))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a", p.ThriftName(), err)
	}
	return err
}

func (p *Base64) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.B1 != nil {
		err = oprot.WriteFieldBegin("b1", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "b1", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.B1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "b1", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "b1", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Base64) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.B2 != nil {
		err = oprot.WriteFieldBegin("b2", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "b2", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.B2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "b2", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "b2", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Base64) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.B3 != nil {
		err = oprot.WriteFieldBegin("b3", thrift.STRING, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "b3", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.B3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "b3", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "b3", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Base64) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.B4 != nil {
		err = oprot.WriteFieldBegin("b4", thrift.STRING, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "b4", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.B4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "b4", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "b4", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Base64) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.B5 != nil {
		err = oprot.WriteFieldBegin("b5", thrift.STRING, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "b5", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.B5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "b5", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "b5", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Base64) writeField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.B6 != nil {
		err = oprot.WriteFieldBegin("b6", thrift.STRING, 7)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "b6", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.B6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "b6", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "b6", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Base64) TStructName() string {
	return "Base64"
}

func (p *Base64) ThriftName() string {
	return "Base64"
}

func (p *Base64) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.A
	case 2:
		return p.B1
	case 3:
		return p.B2
	case 4:
		return p.B3
	case 5:
		return p.B4
	case 6:
		return p.B5
	case 7:
		return p.B6
	}
	return nil
}

func (p *Base64) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("a", thrift.I32, 1),
		thrift.NewTField("b1", thrift.STRING, 2),
		thrift.NewTField("b2", thrift.STRING, 3),
		thrift.NewTField("b3", thrift.STRING, 4),
		thrift.NewTField("b4", thrift.STRING, 5),
		thrift.NewTField("b5", thrift.STRING, 6),
		thrift.NewTField("b6", thrift.STRING, 7),
	})
}

/**
 * Attributes:
 *  - AByte
 *  - AI16
 *  - AI32
 *  - AI64
 *  - ADouble
 *  - AString
 *  - ABinary
 *  - TrueField
 *  - FalseField
 *  - EmptyStructField
 *  - ByteList
 *  - I16List
 *  - I32List
 *  - I64List
 *  - DoubleList
 *  - StringList
 *  - BinaryList
 *  - BooleanList
 *  - StructList
 *  - ByteSet
 *  - I16Set
 *  - I32Set
 *  - I64Set
 *  - DoubleSet
 *  - StringSet
 *  - BinarySet
 *  - BooleanSet
 *  - ByteByteMap
 *  - I16ByteMap
 *  - I32ByteMap
 *  - I64ByteMap
 *  - DoubleByteMap
 *  - StringByteMap
 *  - BinaryByteMap
 *  - BooleanByteMap
 *  - ByteI16Map
 *  - ByteI32Map
 *  - ByteI64Map
 *  - ByteDoubleMap
 *  - ByteStringMap
 *  - ByteBinaryMap
 *  - ByteBooleanMap
 *  - ByteMapMap
 *  - ByteSetMap
 *  - ByteListMap
 */
type CompactProtoTestStruct struct {
	AByte            int8                   "a_byte"             // 1
	AI16             int16                  "a_i16"              // 2
	AI32             int32                  "a_i32"              // 3
	AI64             int64                  "a_i64"              // 4
	ADouble          float64                "a_double"           // 5
	AString          string                 "a_string"           // 6
	ABinary          []byte                 "a_binary"           // 7
	TrueField        bool                   "true_field"         // 8
	FalseField       bool                   "false_field"        // 9
	EmptyStructField *Empty                 "empty_struct_field" // 10
	ByteList         []int8                 "byte_list"          // 11
	I16List          []int16                "i16_list"           // 12
	I32List          []int32                "i32_list"           // 13
	I64List          []int64                "i64_list"           // 14
	DoubleList       []float64              "double_list"        // 15
	StringList       []string               "string_list"        // 16
	BinaryList       [][]byte               "binary_list"        // 17
	BooleanList      []bool                 "boolean_list"       // 18
	StructList       []*Empty               "struct_list"        // 19
	ByteSet          map[int8]bool          "byte_set"           // 20
	I16Set           map[int16]bool         "i16_set"            // 21
	I32Set           map[int32]bool         "i32_set"            // 22
	I64Set           map[int64]bool         "i64_set"            // 23
	DoubleSet        map[float64]bool       "double_set"         // 24
	StringSet        map[string]bool        "string_set"         // 25
	BinarySet        map[string]bool        "binary_set"         // 26
	BooleanSet       map[bool]bool          "boolean_set"        // 27
	_                interface{}            // nil # 28
	ByteByteMap      map[int8]int8          "byte_byte_map"    // 29
	I16ByteMap       map[int16]int8         "i16_byte_map"     // 30
	I32ByteMap       map[int32]int8         "i32_byte_map"     // 31
	I64ByteMap       map[int64]int8         "i64_byte_map"     // 32
	DoubleByteMap    map[float64]int8       "double_byte_map"  // 33
	StringByteMap    map[string]int8        "string_byte_map"  // 34
	BinaryByteMap    map[string]int8        "binary_byte_map"  // 35
	BooleanByteMap   map[bool]int8          "boolean_byte_map" // 36
	ByteI16Map       map[int8]int16         "byte_i16_map"     // 37
	ByteI32Map       map[int8]int32         "byte_i32_map"     // 38
	ByteI64Map       map[int8]int64         "byte_i64_map"     // 39
	ByteDoubleMap    map[int8]float64       "byte_double_map"  // 40
	ByteStringMap    map[int8]string        "byte_string_map"  // 41
	ByteBinaryMap    map[int8][]byte        "byte_binary_map"  // 42
	ByteBooleanMap   map[int8]bool          "byte_boolean_map" // 43
	_                interface{}            // nil # 44
	_                interface{}            // nil # 45
	_                interface{}            // nil # 46
	ByteMapMap       map[int8]map[int8]int8 "byte_map_map"  // 47
	ByteSetMap       map[int8]map[int8]bool "byte_set_map"  // 48
	ByteListMap      map[int8][]int8        "byte_list_map" // 49
}

var tstructCompactProtoTestStruct = thrift.NewTStruct("CompactProtoTestStruct", []thrift.TField{
	thrift.NewTField("a_byte", thrift.BYTE, 1),
	thrift.NewTField("a_i16", thrift.I16, 2),
	thrift.NewTField("a_i32", thrift.I32, 3),
	thrift.NewTField("a_i64", thrift.I64, 4),
	thrift.NewTField("a_double", thrift.DOUBLE, 5),
	thrift.NewTField("a_string", thrift.STRING, 6),
	thrift.NewTField("a_binary", thrift.STRING, 7),
	thrift.NewTField("true_field", thrift.BOOL, 8),
	thrift.NewTField("false_field", thrift.BOOL, 9),
	thrift.NewTField("empty_struct_field", thrift.STRUCT, 10),
	thrift.NewTField("byte_list", thrift.LIST, 11),
	thrift.NewTField("i16_list", thrift.LIST, 12),
	thrift.NewTField("i32_list", thrift.LIST, 13),
	thrift.NewTField("i64_list", thrift.LIST, 14),
	thrift.NewTField("double_list", thrift.LIST, 15),
	thrift.NewTField("string_list", thrift.LIST, 16),
	thrift.NewTField("binary_list", thrift.LIST, 17),
	thrift.NewTField("boolean_list", thrift.LIST, 18),
	thrift.NewTField("struct_list", thrift.LIST, 19),
	thrift.NewTField("byte_set", thrift.SET, 20),
	thrift.NewTField("i16_set", thrift.SET, 21),
	thrift.NewTField("i32_set", thrift.SET, 22),
	thrift.NewTField("i64_set", thrift.SET, 23),
	thrift.NewTField("double_set", thrift.SET, 24),
	thrift.NewTField("string_set", thrift.SET, 25),
	thrift.NewTField("binary_set", thrift.SET, 26),
	thrift.NewTField("boolean_set", thrift.SET, 27),
	thrift.NewTField("byte_byte_map", thrift.MAP, 29),
	thrift.NewTField("i16_byte_map", thrift.MAP, 30),
	thrift.NewTField("i32_byte_map", thrift.MAP, 31),
	thrift.NewTField("i64_byte_map", thrift.MAP, 32),
	thrift.NewTField("double_byte_map", thrift.MAP, 33),
	thrift.NewTField("string_byte_map", thrift.MAP, 34),
	thrift.NewTField("binary_byte_map", thrift.MAP, 35),
	thrift.NewTField("boolean_byte_map", thrift.MAP, 36),
	thrift.NewTField("byte_i16_map", thrift.MAP, 37),
	thrift.NewTField("byte_i32_map", thrift.MAP, 38),
	thrift.NewTField("byte_i64_map", thrift.MAP, 39),
	thrift.NewTField("byte_double_map", thrift.MAP, 40),
	thrift.NewTField("byte_string_map", thrift.MAP, 41),
	thrift.NewTField("byte_binary_map", thrift.MAP, 42),
	thrift.NewTField("byte_boolean_map", thrift.MAP, 43),
	thrift.NewTField("byte_map_map", thrift.MAP, 47),
	thrift.NewTField("byte_set_map", thrift.MAP, 48),
	thrift.NewTField("byte_list_map", thrift.MAP, 49),
})

func (*CompactProtoTestStruct) GetTStruct() thrift.TStruct { return tstructCompactProtoTestStruct }
func NewCompactProtoTestStruct() *CompactProtoTestStruct {
	output := &CompactProtoTestStruct{}
	{
	}
	return output
}

func (p *CompactProtoTestStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCompactProtoTestStruct.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCompactProtoTestStruct.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //byte
			if fieldTypeId == thrift.BYTE {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //i16
			if fieldTypeId == thrift.I16 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //double
			if fieldTypeId == thrift.DOUBLE {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 7: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 8: //bool
			if fieldTypeId == thrift.BOOL {
				err = p.readField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 9: //bool
			if fieldTypeId == thrift.BOOL {
				err = p.readField9(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 10: //Empty
			if fieldTypeId == thrift.STRUCT {
				err = p.readField10(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 11: //
			if fieldTypeId == thrift.LIST {
				err = p.readField11(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 12: //
			if fieldTypeId == thrift.LIST {
				err = p.readField12(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 13: //
			if fieldTypeId == thrift.LIST {
				err = p.readField13(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 14: //
			if fieldTypeId == thrift.LIST {
				err = p.readField14(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 15: //
			if fieldTypeId == thrift.LIST {
				err = p.readField15(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 16: //
			if fieldTypeId == thrift.LIST {
				err = p.readField16(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 17: //
			if fieldTypeId == thrift.LIST {
				err = p.readField17(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 18: //
			if fieldTypeId == thrift.LIST {
				err = p.readField18(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 19: //
			if fieldTypeId == thrift.LIST {
				err = p.readField19(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 20: //
			if fieldTypeId == thrift.SET {
				err = p.readField20(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 21: //
			if fieldTypeId == thrift.SET {
				err = p.readField21(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 22: //
			if fieldTypeId == thrift.SET {
				err = p.readField22(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 23: //
			if fieldTypeId == thrift.SET {
				err = p.readField23(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 24: //
			if fieldTypeId == thrift.SET {
				err = p.readField24(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 25: //
			if fieldTypeId == thrift.SET {
				err = p.readField25(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 26: //
			if fieldTypeId == thrift.SET {
				err = p.readField26(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 27: //
			if fieldTypeId == thrift.SET {
				err = p.readField27(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 29: //
			if fieldTypeId == thrift.MAP {
				err = p.readField29(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 30: //
			if fieldTypeId == thrift.MAP {
				err = p.readField30(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 31: //
			if fieldTypeId == thrift.MAP {
				err = p.readField31(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 32: //
			if fieldTypeId == thrift.MAP {
				err = p.readField32(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 33: //
			if fieldTypeId == thrift.MAP {
				err = p.readField33(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 34: //
			if fieldTypeId == thrift.MAP {
				err = p.readField34(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 35: //
			if fieldTypeId == thrift.MAP {
				err = p.readField35(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 36: //
			if fieldTypeId == thrift.MAP {
				err = p.readField36(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 37: //
			if fieldTypeId == thrift.MAP {
				err = p.readField37(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 38: //
			if fieldTypeId == thrift.MAP {
				err = p.readField38(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 39: //
			if fieldTypeId == thrift.MAP {
				err = p.readField39(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 40: //
			if fieldTypeId == thrift.MAP {
				err = p.readField40(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 41: //
			if fieldTypeId == thrift.MAP {
				err = p.readField41(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 42: //
			if fieldTypeId == thrift.MAP {
				err = p.readField42(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 43: //
			if fieldTypeId == thrift.MAP {
				err = p.readField43(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 47: //
			if fieldTypeId == thrift.MAP {
				err = p.readField47(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 48: //
			if fieldTypeId == thrift.MAP {
				err = p.readField48(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 49: //
			if fieldTypeId == thrift.MAP {
				err = p.readField49(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v144, err145 := iprot.ReadByte()
	if err145 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "a_byte", p.ThriftName(), err145)
	}
	p.AByte = v144
	return err
}

func (p *CompactProtoTestStruct) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v146, err147 := iprot.ReadI16()
	if err147 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "a_i16", p.ThriftName(), err147)
	}
	p.AI16 = v146
	return err
}

func (p *CompactProtoTestStruct) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v148, err149 := iprot.ReadI32()
	if err149 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "a_i32", p.ThriftName(), err149)
	}
	p.AI32 = v148
	return err
}

func (p *CompactProtoTestStruct) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v150, err151 := iprot.ReadI64()
	if err151 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "a_i64", p.ThriftName(), err151)
	}
	p.AI64 = v150
	return err
}

func (p *CompactProtoTestStruct) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v152, err153 := iprot.ReadDouble()
	if err153 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "a_double", p.ThriftName(), err153)
	}
	p.ADouble = v152
	return err
}

func (p *CompactProtoTestStruct) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v154, err155 := iprot.ReadString()
	if err155 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "a_string", p.ThriftName(), err155)
	}
	p.AString = v154
	return err
}

func (p *CompactProtoTestStruct) readField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v156, err157 := iprot.ReadBinary()
	if err157 != nil {
		return thrift.NewTProtocolExceptionReadField(7, "a_binary", p.ThriftName(), err157)
	}
	p.ABinary = v156
	return err
}

func (p *CompactProtoTestStruct) readField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v158, err159 := iprot.ReadBool()
	if err159 != nil {
		return thrift.NewTProtocolExceptionReadField(8, "true_field", p.ThriftName(), err159)
	}
	p.TrueField = v158
	return err
}

func (p *CompactProtoTestStruct) readField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v160, err161 := iprot.ReadBool()
	if err161 != nil {
		return thrift.NewTProtocolExceptionReadField(9, "false_field", p.ThriftName(), err161)
	}
	p.FalseField = v160
	return err
}

func (p *CompactProtoTestStruct) readField10(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.EmptyStructField = NewEmpty()
	err164 := p.EmptyStructField.Read(iprot)
	if err164 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.EmptyStructFieldEmpty", err164)
	}
	return err
}

func (p *CompactProtoTestStruct) readField11(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype170, _size167, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteList", "", err)
	}
	_ = _etype170
	p.ByteList = make([]int8, _size167, _size167)
	for i := 0; i < _size167; i++ {
		v173, err174 := iprot.ReadByte()
		if err174 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem172", "", err174)
		}
		_elem172 := v173
		p.ByteList[i] = _elem172
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField12(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype180, _size177, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I16List", "", err)
	}
	_ = _etype180
	p.I16List = make([]int16, _size177, _size177)
	for i := 0; i < _size177; i++ {
		v183, err184 := iprot.ReadI16()
		if err184 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem182", "", err184)
		}
		_elem182 := v183
		p.I16List[i] = _elem182
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField13(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype190, _size187, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32List", "", err)
	}
	_ = _etype190
	p.I32List = make([]int32, _size187, _size187)
	for i := 0; i < _size187; i++ {
		v193, err194 := iprot.ReadI32()
		if err194 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem192", "", err194)
		}
		_elem192 := v193
		p.I32List[i] = _elem192
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField14(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype200, _size197, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I64List", "", err)
	}
	_ = _etype200
	p.I64List = make([]int64, _size197, _size197)
	for i := 0; i < _size197; i++ {
		v203, err204 := iprot.ReadI64()
		if err204 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem202", "", err204)
		}
		_elem202 := v203
		p.I64List[i] = _elem202
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField15(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype210, _size207, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.DoubleList", "", err)
	}
	_ = _etype210
	p.DoubleList = make([]float64, _size207, _size207)
	for i := 0; i < _size207; i++ {
		v213, err214 := iprot.ReadDouble()
		if err214 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem212", "", err214)
		}
		_elem212 := v213
		p.DoubleList[i] = _elem212
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField16(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype220, _size217, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.StringList", "", err)
	}
	_ = _etype220
	p.StringList = make([]string, _size217, _size217)
	for i := 0; i < _size217; i++ {
		v223, err224 := iprot.ReadString()
		if err224 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem222", "", err224)
		}
		_elem222 := v223
		p.StringList[i] = _elem222
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField17(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype230, _size227, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.BinaryList", "", err)
	}
	_ = _etype230
	p.BinaryList = make([][]byte, _size227, _size227)
	for i := 0; i < _size227; i++ {
		v233, err234 := iprot.ReadBinary()
		if err234 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem232", "", err234)
		}
		_elem232 := v233
		p.BinaryList[i] = _elem232
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField18(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype240, _size237, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.BooleanList", "", err)
	}
	_ = _etype240
	p.BooleanList = make([]bool, _size237, _size237)
	for i := 0; i < _size237; i++ {
		v243, err244 := iprot.ReadBool()
		if err244 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem242", "", err244)
		}
		_elem242 := v243
		p.BooleanList[i] = _elem242
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField19(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype250, _size247, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.StructList", "", err)
	}
	_ = _etype250
	p.StructList = make([]*Empty, _size247, _size247)
	for i := 0; i < _size247; i++ {
		_elem252 := NewEmpty()
		err255 := _elem252.Read(iprot)
		if err255 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem252Empty", err255)
		}
		p.StructList[i] = _elem252
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField20(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype261, _size258, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteSet", "", err)
	}
	_ = _etype261
	p.ByteSet = make(map[int8]bool, _size258)
	for i := 0; i < _size258; i++ {
		v264, err265 := iprot.ReadByte()
		if err265 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem263", "", err265)
		}
		_elem263 := v264
		p.ByteSet[_elem263] = true
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField21(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype271, _size268, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I16Set", "", err)
	}
	_ = _etype271
	p.I16Set = make(map[int16]bool, _size268)
	for i := 0; i < _size268; i++ {
		v274, err275 := iprot.ReadI16()
		if err275 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem273", "", err275)
		}
		_elem273 := v274
		p.I16Set[_elem273] = true
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField22(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype281, _size278, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32Set", "", err)
	}
	_ = _etype281
	p.I32Set = make(map[int32]bool, _size278)
	for i := 0; i < _size278; i++ {
		v284, err285 := iprot.ReadI32()
		if err285 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem283", "", err285)
		}
		_elem283 := v284
		p.I32Set[_elem283] = true
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField23(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype291, _size288, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I64Set", "", err)
	}
	_ = _etype291
	p.I64Set = make(map[int64]bool, _size288)
	for i := 0; i < _size288; i++ {
		v294, err295 := iprot.ReadI64()
		if err295 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem293", "", err295)
		}
		_elem293 := v294
		p.I64Set[_elem293] = true
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField24(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype301, _size298, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.DoubleSet", "", err)
	}
	_ = _etype301
	p.DoubleSet = make(map[float64]bool, _size298)
	for i := 0; i < _size298; i++ {
		v304, err305 := iprot.ReadDouble()
		if err305 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem303", "", err305)
		}
		_elem303 := v304
		p.DoubleSet[_elem303] = true
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField25(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype311, _size308, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.StringSet", "", err)
	}
	_ = _etype311
	p.StringSet = make(map[string]bool, _size308)
	for i := 0; i < _size308; i++ {
		v314, err315 := iprot.ReadString()
		if err315 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem313", "", err315)
		}
		_elem313 := v314
		p.StringSet[_elem313] = true
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField26(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype321, _size318, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.BinarySet", "", err)
	}
	_ = _etype321
	p.BinarySet = make(map[string]bool, _size318)
	for i := 0; i < _size318; i++ {
		v324, err325 := iprot.ReadString()
		if err325 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem323", "", err325)
		}
		_elem323 := v324
		p.BinarySet[_elem323] = true
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField27(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype331, _size328, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.BooleanSet", "", err)
	}
	_ = _etype331
	p.BooleanSet = make(map[bool]bool, _size328)
	for i := 0; i < _size328; i++ {
		v334, err335 := iprot.ReadBool()
		if err335 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem333", "", err335)
		}
		_elem333 := v334
		p.BooleanSet[_elem333] = true
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField29(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype339, _vtype340, _size338, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteByteMap", "", err)
	}
	_, _ = _ktype339, _vtype340
	p.ByteByteMap = make(map[int8]int8, _size338)
	for i := 0; i < _size338; i++ {
		v345, err346 := iprot.ReadByte()
		if err346 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key343", "", err346)
		}
		_key343 := v345
		v347, err348 := iprot.ReadByte()
		if err348 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val344", "", err348)
		}
		_val344 := v347
		p.ByteByteMap[_key343] = _val344
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField30(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype352, _vtype353, _size351, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I16ByteMap", "", err)
	}
	_, _ = _ktype352, _vtype353
	p.I16ByteMap = make(map[int16]int8, _size351)
	for i := 0; i < _size351; i++ {
		v358, err359 := iprot.ReadI16()
		if err359 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key356", "", err359)
		}
		_key356 := v358
		v360, err361 := iprot.ReadByte()
		if err361 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val357", "", err361)
		}
		_val357 := v360
		p.I16ByteMap[_key356] = _val357
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField31(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype365, _vtype366, _size364, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32ByteMap", "", err)
	}
	_, _ = _ktype365, _vtype366
	p.I32ByteMap = make(map[int32]int8, _size364)
	for i := 0; i < _size364; i++ {
		v371, err372 := iprot.ReadI32()
		if err372 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key369", "", err372)
		}
		_key369 := v371
		v373, err374 := iprot.ReadByte()
		if err374 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val370", "", err374)
		}
		_val370 := v373
		p.I32ByteMap[_key369] = _val370
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField32(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype378, _vtype379, _size377, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I64ByteMap", "", err)
	}
	_, _ = _ktype378, _vtype379
	p.I64ByteMap = make(map[int64]int8, _size377)
	for i := 0; i < _size377; i++ {
		v384, err385 := iprot.ReadI64()
		if err385 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key382", "", err385)
		}
		_key382 := v384
		v386, err387 := iprot.ReadByte()
		if err387 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val383", "", err387)
		}
		_val383 := v386
		p.I64ByteMap[_key382] = _val383
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField33(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype391, _vtype392, _size390, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.DoubleByteMap", "", err)
	}
	_, _ = _ktype391, _vtype392
	p.DoubleByteMap = make(map[float64]int8, _size390)
	for i := 0; i < _size390; i++ {
		v397, err398 := iprot.ReadDouble()
		if err398 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key395", "", err398)
		}
		_key395 := v397
		v399, err400 := iprot.ReadByte()
		if err400 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val396", "", err400)
		}
		_val396 := v399
		p.DoubleByteMap[_key395] = _val396
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField34(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype404, _vtype405, _size403, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.StringByteMap", "", err)
	}
	_, _ = _ktype404, _vtype405
	p.StringByteMap = make(map[string]int8, _size403)
	for i := 0; i < _size403; i++ {
		v410, err411 := iprot.ReadString()
		if err411 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key408", "", err411)
		}
		_key408 := v410
		v412, err413 := iprot.ReadByte()
		if err413 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val409", "", err413)
		}
		_val409 := v412
		p.StringByteMap[_key408] = _val409
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField35(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype417, _vtype418, _size416, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.BinaryByteMap", "", err)
	}
	_, _ = _ktype417, _vtype418
	p.BinaryByteMap = make(map[string]int8, _size416)
	for i := 0; i < _size416; i++ {
		v423, err424 := iprot.ReadString()
		if err424 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key421", "", err424)
		}
		_key421 := v423
		v425, err426 := iprot.ReadByte()
		if err426 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val422", "", err426)
		}
		_val422 := v425
		p.BinaryByteMap[_key421] = _val422
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField36(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype430, _vtype431, _size429, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.BooleanByteMap", "", err)
	}
	_, _ = _ktype430, _vtype431
	p.BooleanByteMap = make(map[bool]int8, _size429)
	for i := 0; i < _size429; i++ {
		v436, err437 := iprot.ReadBool()
		if err437 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key434", "", err437)
		}
		_key434 := v436
		v438, err439 := iprot.ReadByte()
		if err439 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val435", "", err439)
		}
		_val435 := v438
		p.BooleanByteMap[_key434] = _val435
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField37(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype443, _vtype444, _size442, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteI16Map", "", err)
	}
	_, _ = _ktype443, _vtype444
	p.ByteI16Map = make(map[int8]int16, _size442)
	for i := 0; i < _size442; i++ {
		v449, err450 := iprot.ReadByte()
		if err450 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key447", "", err450)
		}
		_key447 := v449
		v451, err452 := iprot.ReadI16()
		if err452 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val448", "", err452)
		}
		_val448 := v451
		p.ByteI16Map[_key447] = _val448
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField38(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype456, _vtype457, _size455, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteI32Map", "", err)
	}
	_, _ = _ktype456, _vtype457
	p.ByteI32Map = make(map[int8]int32, _size455)
	for i := 0; i < _size455; i++ {
		v462, err463 := iprot.ReadByte()
		if err463 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key460", "", err463)
		}
		_key460 := v462
		v464, err465 := iprot.ReadI32()
		if err465 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val461", "", err465)
		}
		_val461 := v464
		p.ByteI32Map[_key460] = _val461
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField39(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype469, _vtype470, _size468, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteI64Map", "", err)
	}
	_, _ = _ktype469, _vtype470
	p.ByteI64Map = make(map[int8]int64, _size468)
	for i := 0; i < _size468; i++ {
		v475, err476 := iprot.ReadByte()
		if err476 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key473", "", err476)
		}
		_key473 := v475
		v477, err478 := iprot.ReadI64()
		if err478 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val474", "", err478)
		}
		_val474 := v477
		p.ByteI64Map[_key473] = _val474
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField40(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype482, _vtype483, _size481, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteDoubleMap", "", err)
	}
	_, _ = _ktype482, _vtype483
	p.ByteDoubleMap = make(map[int8]float64, _size481)
	for i := 0; i < _size481; i++ {
		v488, err489 := iprot.ReadByte()
		if err489 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key486", "", err489)
		}
		_key486 := v488
		v490, err491 := iprot.ReadDouble()
		if err491 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val487", "", err491)
		}
		_val487 := v490
		p.ByteDoubleMap[_key486] = _val487
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField41(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype495, _vtype496, _size494, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteStringMap", "", err)
	}
	_, _ = _ktype495, _vtype496
	p.ByteStringMap = make(map[int8]string, _size494)
	for i := 0; i < _size494; i++ {
		v501, err502 := iprot.ReadByte()
		if err502 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key499", "", err502)
		}
		_key499 := v501
		v503, err504 := iprot.ReadString()
		if err504 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val500", "", err504)
		}
		_val500 := v503
		p.ByteStringMap[_key499] = _val500
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField42(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype508, _vtype509, _size507, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteBinaryMap", "", err)
	}
	_, _ = _ktype508, _vtype509
	p.ByteBinaryMap = make(map[int8][]byte, _size507)
	for i := 0; i < _size507; i++ {
		v514, err515 := iprot.ReadByte()
		if err515 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key512", "", err515)
		}
		_key512 := v514
		v516, err517 := iprot.ReadBinary()
		if err517 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val513", "", err517)
		}
		_val513 := v516
		p.ByteBinaryMap[_key512] = _val513
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField43(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype521, _vtype522, _size520, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteBooleanMap", "", err)
	}
	_, _ = _ktype521, _vtype522
	p.ByteBooleanMap = make(map[int8]bool, _size520)
	for i := 0; i < _size520; i++ {
		v527, err528 := iprot.ReadByte()
		if err528 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key525", "", err528)
		}
		_key525 := v527
		v529, err530 := iprot.ReadBool()
		if err530 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val526", "", err530)
		}
		_val526 := v529
		p.ByteBooleanMap[_key525] = _val526
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField47(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype534, _vtype535, _size533, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteMapMap", "", err)
	}
	_, _ = _ktype534, _vtype535
	p.ByteMapMap = make(map[int8]map[int8]int8, _size533)
	for i := 0; i < _size533; i++ {
		v540, err541 := iprot.ReadByte()
		if err541 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key538", "", err541)
		}
		_key538 := v540
		_ktype545, _vtype546, _size544, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val539", "", err)
		}
		_, _ = _ktype545, _vtype546
		_val539 := make(map[int8]int8, _size544)
		for i := 0; i < _size544; i++ {
			v551, err552 := iprot.ReadByte()
			if err552 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_key549", "", err552)
			}
			_key549 := v551
			v553, err554 := iprot.ReadByte()
			if err554 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_val550", "", err554)
			}
			_val550 := v553
			_val539[_key549] = _val550
		}
		err = iprot.ReadMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
		}
		p.ByteMapMap[_key538] = _val539
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField48(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype558, _vtype559, _size557, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteSetMap", "", err)
	}
	_, _ = _ktype558, _vtype559
	p.ByteSetMap = make(map[int8]map[int8]bool, _size557)
	for i := 0; i < _size557; i++ {
		v564, err565 := iprot.ReadByte()
		if err565 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key562", "", err565)
		}
		_key562 := v564
		_etype571, _size568, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val563", "", err)
		}
		_ = _etype571
		_val563 := make(map[int8]bool, _size568)
		for i := 0; i < _size568; i++ {
			v574, err575 := iprot.ReadByte()
			if err575 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_elem573", "", err575)
			}
			_elem573 := v574
			_val563[_elem573] = true
		}
		err = iprot.ReadSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
		}
		p.ByteSetMap[_key562] = _val563
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) readField49(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype579, _vtype580, _size578, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteListMap", "", err)
	}
	_, _ = _ktype579, _vtype580
	p.ByteListMap = make(map[int8][]int8, _size578)
	for i := 0; i < _size578; i++ {
		v585, err586 := iprot.ReadByte()
		if err586 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key583", "", err586)
		}
		_key583 := v585
		_etype592, _size589, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val584", "", err)
		}
		_ = _etype592
		_val584 := make([]int8, _size589, _size589)
		for i := 0; i < _size589; i++ {
			v595, err596 := iprot.ReadByte()
			if err596 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_elem594", "", err596)
			}
			_elem594 := v595
			_val584[i] = _elem594
		}
		err = iprot.ReadListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
		}
		p.ByteListMap[_key583] = _val584
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CompactProtoTestStruct")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = p.writeField7(oprot)
	if err != nil {
		return err
	}
	err = p.writeField8(oprot)
	if err != nil {
		return err
	}
	err = p.writeField9(oprot)
	if err != nil {
		return err
	}
	err = p.writeField10(oprot)
	if err != nil {
		return err
	}
	err = p.writeField11(oprot)
	if err != nil {
		return err
	}
	err = p.writeField12(oprot)
	if err != nil {
		return err
	}
	err = p.writeField13(oprot)
	if err != nil {
		return err
	}
	err = p.writeField14(oprot)
	if err != nil {
		return err
	}
	err = p.writeField15(oprot)
	if err != nil {
		return err
	}
	err = p.writeField16(oprot)
	if err != nil {
		return err
	}
	err = p.writeField17(oprot)
	if err != nil {
		return err
	}
	err = p.writeField18(oprot)
	if err != nil {
		return err
	}
	err = p.writeField19(oprot)
	if err != nil {
		return err
	}
	err = p.writeField20(oprot)
	if err != nil {
		return err
	}
	err = p.writeField21(oprot)
	if err != nil {
		return err
	}
	err = p.writeField22(oprot)
	if err != nil {
		return err
	}
	err = p.writeField23(oprot)
	if err != nil {
		return err
	}
	err = p.writeField24(oprot)
	if err != nil {
		return err
	}
	err = p.writeField25(oprot)
	if err != nil {
		return err
	}
	err = p.writeField26(oprot)
	if err != nil {
		return err
	}
	err = p.writeField27(oprot)
	if err != nil {
		return err
	}
	err = p.writeField29(oprot)
	if err != nil {
		return err
	}
	err = p.writeField30(oprot)
	if err != nil {
		return err
	}
	err = p.writeField31(oprot)
	if err != nil {
		return err
	}
	err = p.writeField32(oprot)
	if err != nil {
		return err
	}
	err = p.writeField33(oprot)
	if err != nil {
		return err
	}
	err = p.writeField34(oprot)
	if err != nil {
		return err
	}
	err = p.writeField35(oprot)
	if err != nil {
		return err
	}
	err = p.writeField36(oprot)
	if err != nil {
		return err
	}
	err = p.writeField37(oprot)
	if err != nil {
		return err
	}
	err = p.writeField38(oprot)
	if err != nil {
		return err
	}
	err = p.writeField39(oprot)
	if err != nil {
		return err
	}
	err = p.writeField40(oprot)
	if err != nil {
		return err
	}
	err = p.writeField41(oprot)
	if err != nil {
		return err
	}
	err = p.writeField42(oprot)
	if err != nil {
		return err
	}
	err = p.writeField43(oprot)
	if err != nil {
		return err
	}
	err = p.writeField47(oprot)
	if err != nil {
		return err
	}
	err = p.writeField48(oprot)
	if err != nil {
		return err
	}
	err = p.writeField49(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a_byte", thrift.BYTE, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a_byte", p.ThriftName(), err)
	}
	err = oprot.WriteByte(int8(p.AByte))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a_byte", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a_byte", p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a_i16", thrift.I16, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "a_i16", p.ThriftName(), err)
	}
	err = oprot.WriteI16(int16(p.AI16))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "a_i16", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "a_i16", p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a_i32", thrift.I32, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "a_i32", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.AI32))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "a_i32", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "a_i32", p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a_i64", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "a_i64", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.AI64))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "a_i64", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "a_i64", p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a_double", thrift.DOUBLE, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "a_double", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.ADouble))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "a_double", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "a_double", p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a_string", thrift.STRING, 6)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "a_string", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.AString)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "a_string", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "a_string", p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) writeField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ABinary != nil {
		err = oprot.WriteFieldBegin("a_binary", thrift.STRING, 7)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "a_binary", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.ABinary)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "a_binary", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "a_binary", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("true_field", thrift.BOOL, 8)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "true_field", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.TrueField))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "true_field", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "true_field", p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) writeField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("false_field", thrift.BOOL, 9)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "false_field", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.FalseField))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "false_field", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "false_field", p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) writeField10(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.EmptyStructField != nil {
		err = oprot.WriteFieldBegin("empty_struct_field", thrift.STRUCT, 10)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(10, "empty_struct_field", p.ThriftName(), err)
		}
		err = p.EmptyStructField.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("Empty", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(10, "empty_struct_field", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField11(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteList != nil {
		err = oprot.WriteFieldBegin("byte_list", thrift.LIST, 11)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(11, "byte_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BYTE, len(p.ByteList))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter597 := range p.ByteList {
			err = oprot.WriteByte(int8(Iter597))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter597", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(11, "byte_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField12(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I16List != nil {
		err = oprot.WriteFieldBegin("i16_list", thrift.LIST, 12)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(12, "i16_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.I16, len(p.I16List))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter598 := range p.I16List {
			err = oprot.WriteI16(int16(Iter598))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter598", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(12, "i16_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField13(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32List != nil {
		err = oprot.WriteFieldBegin("i32_list", thrift.LIST, 13)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(13, "i32_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.I32, len(p.I32List))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter599 := range p.I32List {
			err = oprot.WriteI32(int32(Iter599))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter599", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(13, "i32_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField14(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I64List != nil {
		err = oprot.WriteFieldBegin("i64_list", thrift.LIST, 14)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(14, "i64_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.I64, len(p.I64List))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter600 := range p.I64List {
			err = oprot.WriteI64(int64(Iter600))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter600", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(14, "i64_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField15(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.DoubleList != nil {
		err = oprot.WriteFieldBegin("double_list", thrift.LIST, 15)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(15, "double_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.DOUBLE, len(p.DoubleList))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter601 := range p.DoubleList {
			err = oprot.WriteDouble(float64(Iter601))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter601", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(15, "double_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField16(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StringList != nil {
		err = oprot.WriteFieldBegin("string_list", thrift.LIST, 16)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(16, "string_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.StringList))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter602 := range p.StringList {
			err = oprot.WriteString(Iter602)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter602", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(16, "string_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField17(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.BinaryList != nil {
		err = oprot.WriteFieldBegin("binary_list", thrift.LIST, 17)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(17, "binary_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.BinaryList))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter603 := range p.BinaryList {
			err = oprot.WriteBinary(Iter603)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter603", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(17, "binary_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField18(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.BooleanList != nil {
		err = oprot.WriteFieldBegin("boolean_list", thrift.LIST, 18)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(18, "boolean_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BOOL, len(p.BooleanList))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter604 := range p.BooleanList {
			err = oprot.WriteBool(bool(Iter604))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter604", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(18, "boolean_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField19(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StructList != nil {
		err = oprot.WriteFieldBegin("struct_list", thrift.LIST, 19)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(19, "struct_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.StructList))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter605 := range p.StructList {
			err = Iter605.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Empty", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(19, "struct_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField20(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteSet != nil {
		err = oprot.WriteFieldBegin("byte_set", thrift.SET, 20)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(20, "byte_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.BYTE, len(p.ByteSet))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter606, _ := range p.ByteSet {
			err = oprot.WriteByte(int8(Iter606))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter606", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(20, "byte_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField21(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I16Set != nil {
		err = oprot.WriteFieldBegin("i16_set", thrift.SET, 21)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(21, "i16_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.I16, len(p.I16Set))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter607, _ := range p.I16Set {
			err = oprot.WriteI16(int16(Iter607))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter607", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(21, "i16_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField22(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32Set != nil {
		err = oprot.WriteFieldBegin("i32_set", thrift.SET, 22)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(22, "i32_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.I32, len(p.I32Set))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter608, _ := range p.I32Set {
			err = oprot.WriteI32(int32(Iter608))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter608", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(22, "i32_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField23(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I64Set != nil {
		err = oprot.WriteFieldBegin("i64_set", thrift.SET, 23)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(23, "i64_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.I64, len(p.I64Set))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter609, _ := range p.I64Set {
			err = oprot.WriteI64(int64(Iter609))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter609", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(23, "i64_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField24(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.DoubleSet != nil {
		err = oprot.WriteFieldBegin("double_set", thrift.SET, 24)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(24, "double_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.DOUBLE, len(p.DoubleSet))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter610, _ := range p.DoubleSet {
			err = oprot.WriteDouble(float64(Iter610))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter610", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(24, "double_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField25(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StringSet != nil {
		err = oprot.WriteFieldBegin("string_set", thrift.SET, 25)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(25, "string_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.STRING, len(p.StringSet))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter611, _ := range p.StringSet {
			err = oprot.WriteString(Iter611)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter611", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(25, "string_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField26(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.BinarySet != nil {
		err = oprot.WriteFieldBegin("binary_set", thrift.SET, 26)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(26, "binary_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.STRING, len(p.BinarySet))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter612, _ := range p.BinarySet {
			err = oprot.WriteString(Iter612)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter612", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(26, "binary_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField27(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.BooleanSet != nil {
		err = oprot.WriteFieldBegin("boolean_set", thrift.SET, 27)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(27, "boolean_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.BOOL, len(p.BooleanSet))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter613, _ := range p.BooleanSet {
			err = oprot.WriteBool(bool(Iter613))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter613", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(27, "boolean_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField29(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteByteMap != nil {
		err = oprot.WriteFieldBegin("byte_byte_map", thrift.MAP, 29)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(29, "byte_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.BYTE, len(p.ByteByteMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter614, Viter615 := range p.ByteByteMap {
			err = oprot.WriteByte(int8(Kiter614))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter614", "", err)
			}
			err = oprot.WriteByte(int8(Viter615))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter615", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(29, "byte_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField30(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I16ByteMap != nil {
		err = oprot.WriteFieldBegin("i16_byte_map", thrift.MAP, 30)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(30, "i16_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I16, thrift.BYTE, len(p.I16ByteMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter616, Viter617 := range p.I16ByteMap {
			err = oprot.WriteI16(int16(Kiter616))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter616", "", err)
			}
			err = oprot.WriteByte(int8(Viter617))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter617", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(30, "i16_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField31(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32ByteMap != nil {
		err = oprot.WriteFieldBegin("i32_byte_map", thrift.MAP, 31)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(31, "i32_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I32, thrift.BYTE, len(p.I32ByteMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter618, Viter619 := range p.I32ByteMap {
			err = oprot.WriteI32(int32(Kiter618))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter618", "", err)
			}
			err = oprot.WriteByte(int8(Viter619))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter619", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(31, "i32_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField32(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I64ByteMap != nil {
		err = oprot.WriteFieldBegin("i64_byte_map", thrift.MAP, 32)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(32, "i64_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I64, thrift.BYTE, len(p.I64ByteMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter620, Viter621 := range p.I64ByteMap {
			err = oprot.WriteI64(int64(Kiter620))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter620", "", err)
			}
			err = oprot.WriteByte(int8(Viter621))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter621", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(32, "i64_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField33(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.DoubleByteMap != nil {
		err = oprot.WriteFieldBegin("double_byte_map", thrift.MAP, 33)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(33, "double_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.DOUBLE, thrift.BYTE, len(p.DoubleByteMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter622, Viter623 := range p.DoubleByteMap {
			err = oprot.WriteDouble(float64(Kiter622))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter622", "", err)
			}
			err = oprot.WriteByte(int8(Viter623))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter623", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(33, "double_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField34(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StringByteMap != nil {
		err = oprot.WriteFieldBegin("string_byte_map", thrift.MAP, 34)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(34, "string_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.BYTE, len(p.StringByteMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter624, Viter625 := range p.StringByteMap {
			err = oprot.WriteString(Kiter624)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter624", "", err)
			}
			err = oprot.WriteByte(int8(Viter625))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter625", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(34, "string_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField35(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.BinaryByteMap != nil {
		err = oprot.WriteFieldBegin("binary_byte_map", thrift.MAP, 35)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(35, "binary_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.BYTE, len(p.BinaryByteMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter626, Viter627 := range p.BinaryByteMap {
			err = oprot.WriteString(Kiter626)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter626", "", err)
			}
			err = oprot.WriteByte(int8(Viter627))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter627", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(35, "binary_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField36(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.BooleanByteMap != nil {
		err = oprot.WriteFieldBegin("boolean_byte_map", thrift.MAP, 36)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(36, "boolean_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BOOL, thrift.BYTE, len(p.BooleanByteMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter628, Viter629 := range p.BooleanByteMap {
			err = oprot.WriteBool(bool(Kiter628))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter628", "", err)
			}
			err = oprot.WriteByte(int8(Viter629))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter629", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(36, "boolean_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField37(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteI16Map != nil {
		err = oprot.WriteFieldBegin("byte_i16_map", thrift.MAP, 37)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(37, "byte_i16_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.I16, len(p.ByteI16Map))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter630, Viter631 := range p.ByteI16Map {
			err = oprot.WriteByte(int8(Kiter630))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter630", "", err)
			}
			err = oprot.WriteI16(int16(Viter631))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter631", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(37, "byte_i16_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField38(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteI32Map != nil {
		err = oprot.WriteFieldBegin("byte_i32_map", thrift.MAP, 38)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(38, "byte_i32_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.I32, len(p.ByteI32Map))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter632, Viter633 := range p.ByteI32Map {
			err = oprot.WriteByte(int8(Kiter632))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter632", "", err)
			}
			err = oprot.WriteI32(int32(Viter633))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter633", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(38, "byte_i32_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField39(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteI64Map != nil {
		err = oprot.WriteFieldBegin("byte_i64_map", thrift.MAP, 39)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(39, "byte_i64_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.I64, len(p.ByteI64Map))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter634, Viter635 := range p.ByteI64Map {
			err = oprot.WriteByte(int8(Kiter634))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter634", "", err)
			}
			err = oprot.WriteI64(int64(Viter635))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter635", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(39, "byte_i64_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField40(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteDoubleMap != nil {
		err = oprot.WriteFieldBegin("byte_double_map", thrift.MAP, 40)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(40, "byte_double_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.DOUBLE, len(p.ByteDoubleMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter636, Viter637 := range p.ByteDoubleMap {
			err = oprot.WriteByte(int8(Kiter636))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter636", "", err)
			}
			err = oprot.WriteDouble(float64(Viter637))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter637", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(40, "byte_double_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField41(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteStringMap != nil {
		err = oprot.WriteFieldBegin("byte_string_map", thrift.MAP, 41)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(41, "byte_string_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.STRING, len(p.ByteStringMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter638, Viter639 := range p.ByteStringMap {
			err = oprot.WriteByte(int8(Kiter638))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter638", "", err)
			}
			err = oprot.WriteString(Viter639)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter639", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(41, "byte_string_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField42(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteBinaryMap != nil {
		err = oprot.WriteFieldBegin("byte_binary_map", thrift.MAP, 42)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(42, "byte_binary_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.STRING, len(p.ByteBinaryMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter640, Viter641 := range p.ByteBinaryMap {
			err = oprot.WriteByte(int8(Kiter640))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter640", "", err)
			}
			err = oprot.WriteBinary(Viter641)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter641", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(42, "byte_binary_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField43(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteBooleanMap != nil {
		err = oprot.WriteFieldBegin("byte_boolean_map", thrift.MAP, 43)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(43, "byte_boolean_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.BOOL, len(p.ByteBooleanMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter642, Viter643 := range p.ByteBooleanMap {
			err = oprot.WriteByte(int8(Kiter642))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter642", "", err)
			}
			err = oprot.WriteBool(bool(Viter643))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter643", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(43, "byte_boolean_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField47(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteMapMap != nil {
		err = oprot.WriteFieldBegin("byte_map_map", thrift.MAP, 47)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(47, "byte_map_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.MAP, len(p.ByteMapMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter644, Viter645 := range p.ByteMapMap {
			err = oprot.WriteByte(int8(Kiter644))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter644", "", err)
			}
			err = oprot.WriteMapBegin(thrift.BYTE, thrift.BYTE, len(Viter645))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			for Kiter646, Viter647 := range Viter645 {
				err = oprot.WriteByte(int8(Kiter646))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Kiter646", "", err)
				}
				err = oprot.WriteByte(int8(Viter647))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Viter647", "", err)
				}
			}
			err = oprot.WriteMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(47, "byte_map_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField48(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteSetMap != nil {
		err = oprot.WriteFieldBegin("byte_set_map", thrift.MAP, 48)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(48, "byte_set_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.SET, len(p.ByteSetMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter648, Viter649 := range p.ByteSetMap {
			err = oprot.WriteByte(int8(Kiter648))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter648", "", err)
			}
			err = oprot.WriteSetBegin(thrift.BYTE, len(Viter649))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
			}
			for Iter650, _ := range Viter649 {
				err = oprot.WriteByte(int8(Iter650))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter650", "", err)
				}
			}
			err = oprot.WriteSetEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(48, "byte_set_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) writeField49(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteListMap != nil {
		err = oprot.WriteFieldBegin("byte_list_map", thrift.MAP, 49)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(49, "byte_list_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.LIST, len(p.ByteListMap))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter651, Viter652 := range p.ByteListMap {
			err = oprot.WriteByte(int8(Kiter651))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter651", "", err)
			}
			err = oprot.WriteListBegin(thrift.BYTE, len(Viter652))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for _, Iter653 := range Viter652 {
				err = oprot.WriteByte(int8(Iter653))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter653", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(49, "byte_list_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) TStructName() string {
	return "CompactProtoTestStruct"
}

func (p *CompactProtoTestStruct) ThriftName() string {
	return "CompactProtoTestStruct"
}

func (p *CompactProtoTestStruct) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.AByte
	case 2:
		return p.AI16
	case 3:
		return p.AI32
	case 4:
		return p.AI64
	case 5:
		return p.ADouble
	case 6:
		return p.AString
	case 7:
		return p.ABinary
	case 8:
		return p.TrueField
	case 9:
		return p.FalseField
	case 10:
		return p.EmptyStructField
	case 11:
		return p.ByteList
	case 12:
		return p.I16List
	case 13:
		return p.I32List
	case 14:
		return p.I64List
	case 15:
		return p.DoubleList
	case 16:
		return p.StringList
	case 17:
		return p.BinaryList
	case 18:
		return p.BooleanList
	case 19:
		return p.StructList
	case 20:
		return p.ByteSet
	case 21:
		return p.I16Set
	case 22:
		return p.I32Set
	case 23:
		return p.I64Set
	case 24:
		return p.DoubleSet
	case 25:
		return p.StringSet
	case 26:
		return p.BinarySet
	case 27:
		return p.BooleanSet
	case 29:
		return p.ByteByteMap
	case 30:
		return p.I16ByteMap
	case 31:
		return p.I32ByteMap
	case 32:
		return p.I64ByteMap
	case 33:
		return p.DoubleByteMap
	case 34:
		return p.StringByteMap
	case 35:
		return p.BinaryByteMap
	case 36:
		return p.BooleanByteMap
	case 37:
		return p.ByteI16Map
	case 38:
		return p.ByteI32Map
	case 39:
		return p.ByteI64Map
	case 40:
		return p.ByteDoubleMap
	case 41:
		return p.ByteStringMap
	case 42:
		return p.ByteBinaryMap
	case 43:
		return p.ByteBooleanMap
	case 47:
		return p.ByteMapMap
	case 48:
		return p.ByteSetMap
	case 49:
		return p.ByteListMap
	}
	return nil
}

func (p *CompactProtoTestStruct) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("a_byte", thrift.BYTE, 1),
		thrift.NewTField("a_i16", thrift.I16, 2),
		thrift.NewTField("a_i32", thrift.I32, 3),
		thrift.NewTField("a_i64", thrift.I64, 4),
		thrift.NewTField("a_double", thrift.DOUBLE, 5),
		thrift.NewTField("a_string", thrift.STRING, 6),
		thrift.NewTField("a_binary", thrift.STRING, 7),
		thrift.NewTField("true_field", thrift.BOOL, 8),
		thrift.NewTField("false_field", thrift.BOOL, 9),
		thrift.NewTField("empty_struct_field", thrift.STRUCT, 10),
		thrift.NewTField("byte_list", thrift.LIST, 11),
		thrift.NewTField("i16_list", thrift.LIST, 12),
		thrift.NewTField("i32_list", thrift.LIST, 13),
		thrift.NewTField("i64_list", thrift.LIST, 14),
		thrift.NewTField("double_list", thrift.LIST, 15),
		thrift.NewTField("string_list", thrift.LIST, 16),
		thrift.NewTField("binary_list", thrift.LIST, 17),
		thrift.NewTField("boolean_list", thrift.LIST, 18),
		thrift.NewTField("struct_list", thrift.LIST, 19),
		thrift.NewTField("byte_set", thrift.SET, 20),
		thrift.NewTField("i16_set", thrift.SET, 21),
		thrift.NewTField("i32_set", thrift.SET, 22),
		thrift.NewTField("i64_set", thrift.SET, 23),
		thrift.NewTField("double_set", thrift.SET, 24),
		thrift.NewTField("string_set", thrift.SET, 25),
		thrift.NewTField("binary_set", thrift.SET, 26),
		thrift.NewTField("boolean_set", thrift.SET, 27),
		thrift.NewTField("byte_byte_map", thrift.MAP, 29),
		thrift.NewTField("i16_byte_map", thrift.MAP, 30),
		thrift.NewTField("i32_byte_map", thrift.MAP, 31),
		thrift.NewTField("i64_byte_map", thrift.MAP, 32),
		thrift.NewTField("double_byte_map", thrift.MAP, 33),
		thrift.NewTField("string_byte_map", thrift.MAP, 34),
		thrift.NewTField("binary_byte_map", thrift.MAP, 35),
		thrift.NewTField("boolean_byte_map", thrift.MAP, 36),
		thrift.NewTField("byte_i16_map", thrift.MAP, 37),
		thrift.NewTField("byte_i32_map", thrift.MAP, 38),
		thrift.NewTField("byte_i64_map", thrift.MAP, 39),
		thrift.NewTField("byte_double_map", thrift.MAP, 40),
		thrift.NewTField("byte_string_map", thrift.MAP, 41),
		thrift.NewTField("byte_binary_map", thrift.MAP, 42),
		thrift.NewTField("byte_boolean_map", thrift.MAP, 43),
		thrift.NewTField("byte_map_map", thrift.MAP, 47),
		thrift.NewTField("byte_set_map", thrift.MAP, 48),
		thrift.NewTField("byte_list_map", thrift.MAP, 49),
	})
}

/**
 * Attributes:
 *  - I32Map
 */
type SingleMapTestStruct struct {
	I32Map map[int32]int32 "i32_map" // 1
}

var tstructSingleMapTestStruct = thrift.NewTStruct("SingleMapTestStruct", []thrift.TField{
	thrift.NewTField("i32_map", thrift.MAP, 1),
})

func (*SingleMapTestStruct) GetTStruct() thrift.TStruct { return tstructSingleMapTestStruct }
func NewSingleMapTestStruct() *SingleMapTestStruct {
	output := &SingleMapTestStruct{}
	{
	}
	return output
}

func (p *SingleMapTestStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSingleMapTestStruct.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructSingleMapTestStruct.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //
			if fieldTypeId == thrift.MAP {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SingleMapTestStruct) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype657, _vtype658, _size656, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32Map", "", err)
	}
	_, _ = _ktype657, _vtype658
	p.I32Map = make(map[int32]int32, _size656)
	for i := 0; i < _size656; i++ {
		v663, err664 := iprot.ReadI32()
		if err664 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key661", "", err664)
		}
		_key661 := v663
		v665, err666 := iprot.ReadI32()
		if err666 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val662", "", err666)
		}
		_val662 := v665
		p.I32Map[_key661] = _val662
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *SingleMapTestStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("SingleMapTestStruct")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SingleMapTestStruct) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32Map != nil {
		err = oprot.WriteFieldBegin("i32_map", thrift.MAP, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "i32_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.I32Map))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter667, Viter668 := range p.I32Map {
			err = oprot.WriteI32(int32(Kiter667))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter667", "", err)
			}
			err = oprot.WriteI32(int32(Viter668))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter668", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "i32_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SingleMapTestStruct) TStructName() string {
	return "SingleMapTestStruct"
}

func (p *SingleMapTestStruct) ThriftName() string {
	return "SingleMapTestStruct"
}

func (p *SingleMapTestStruct) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.I32Map
	}
	return nil
}

func (p *SingleMapTestStruct) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("i32_map", thrift.MAP, 1),
	})
}

/**
 * Attributes:
 *  - Blah
 *  - MapField
 */
type ExceptionWithAMap struct {
	Blah     string            "blah"      // 1
	MapField map[string]string "map_field" // 2
}

var tstructExceptionWithAMap = thrift.NewTStruct("ExceptionWithAMap", []thrift.TField{
	thrift.NewTField("blah", thrift.STRING, 1),
	thrift.NewTField("map_field", thrift.MAP, 2),
})

func (*ExceptionWithAMap) GetTStruct() thrift.TStruct { return tstructExceptionWithAMap }
func NewExceptionWithAMap() *ExceptionWithAMap {
	output := &ExceptionWithAMap{}
	{
	}
	return output
}

func (p *ExceptionWithAMap) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructExceptionWithAMap.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructExceptionWithAMap.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.MAP {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExceptionWithAMap) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v669, err670 := iprot.ReadString()
	if err670 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "blah", p.ThriftName(), err670)
	}
	p.Blah = v669
	return err
}

func (p *ExceptionWithAMap) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype674, _vtype675, _size673, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.MapField", "", err)
	}
	_, _ = _ktype674, _vtype675
	p.MapField = make(map[string]string, _size673)
	for i := 0; i < _size673; i++ {
		v680, err681 := iprot.ReadString()
		if err681 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key678", "", err681)
		}
		_key678 := v680
		v682, err683 := iprot.ReadString()
		if err683 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val679", "", err683)
		}
		_val679 := v682
		p.MapField[_key678] = _val679
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ExceptionWithAMap) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("ExceptionWithAMap")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExceptionWithAMap) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("blah", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Blah)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
	}
	return err
}

func (p *ExceptionWithAMap) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.MapField != nil {
		err = oprot.WriteFieldBegin("map_field", thrift.MAP, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "map_field", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.MapField))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter684, Viter685 := range p.MapField {
			err = oprot.WriteString(Kiter684)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter684", "", err)
			}
			err = oprot.WriteString(Viter685)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter685", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "map_field", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExceptionWithAMap) TStructName() string {
	return "ExceptionWithAMap"
}

func (p *ExceptionWithAMap) ThriftName() string {
	return "ExceptionWithAMap"
}

func (p *ExceptionWithAMap) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Blah
	case 2:
		return p.MapField
	}
	return nil
}

func (p *ExceptionWithAMap) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("blah", thrift.STRING, 1),
		thrift.NewTField("map_field", thrift.MAP, 2),
	})
}

/**
 * Attributes:
 *  - First
 *  - Second
 *  - Third
 *  - Fourth
 */
type ReverseOrderStruct struct {
	Fourth int64  "fourth" // 1
	Third  int32  "third"  // 2
	Second int16  "second" // 3
	First  string "first"  // 4
}

var tstructReverseOrderStruct = thrift.NewTStruct("ReverseOrderStruct", []thrift.TField{
	thrift.NewTField("first", thrift.STRING, 4),
	thrift.NewTField("second", thrift.I16, 3),
	thrift.NewTField("third", thrift.I32, 2),
	thrift.NewTField("fourth", thrift.I64, 1),
})

func (*ReverseOrderStruct) GetTStruct() thrift.TStruct { return tstructReverseOrderStruct }
func NewReverseOrderStruct() *ReverseOrderStruct {
	output := &ReverseOrderStruct{}
	{
	}
	return output
}

func (p *ReverseOrderStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructReverseOrderStruct.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructReverseOrderStruct.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 4: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i16
			if fieldTypeId == thrift.I16 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ReverseOrderStruct) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v686, err687 := iprot.ReadString()
	if err687 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "first", p.ThriftName(), err687)
	}
	p.First = v686
	return err
}

func (p *ReverseOrderStruct) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v688, err689 := iprot.ReadI16()
	if err689 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "second", p.ThriftName(), err689)
	}
	p.Second = v688
	return err
}

func (p *ReverseOrderStruct) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v690, err691 := iprot.ReadI32()
	if err691 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "third", p.ThriftName(), err691)
	}
	p.Third = v690
	return err
}

func (p *ReverseOrderStruct) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v692, err693 := iprot.ReadI64()
	if err693 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "fourth", p.ThriftName(), err693)
	}
	p.Fourth = v692
	return err
}

func (p *ReverseOrderStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("ReverseOrderStruct")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ReverseOrderStruct) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("fourth", thrift.I64, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "fourth", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Fourth))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "fourth", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "fourth", p.ThriftName(), err)
	}
	return err
}

func (p *ReverseOrderStruct) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("third", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "third", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Third))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "third", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "third", p.ThriftName(), err)
	}
	return err
}

func (p *ReverseOrderStruct) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("second", thrift.I16, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "second", p.ThriftName(), err)
	}
	err = oprot.WriteI16(int16(p.Second))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "second", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "second", p.ThriftName(), err)
	}
	return err
}

func (p *ReverseOrderStruct) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("first", thrift.STRING, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "first", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.First)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "first", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "first", p.ThriftName(), err)
	}
	return err
}

func (p *ReverseOrderStruct) TStructName() string {
	return "ReverseOrderStruct"
}

func (p *ReverseOrderStruct) ThriftName() string {
	return "ReverseOrderStruct"
}

func (p *ReverseOrderStruct) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 4:
		return p.First
	case 3:
		return p.Second
	case 2:
		return p.Third
	case 1:
		return p.Fourth
	}
	return nil
}

func (p *ReverseOrderStruct) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("first", thrift.STRING, 4),
		thrift.NewTField("second", thrift.I16, 3),
		thrift.NewTField("third", thrift.I32, 2),
		thrift.NewTField("fourth", thrift.I64, 1),
	})
}

/**
 * Attributes:
 *  - Blah
 */
type StructWithSomeEnum struct {
	Blah SomeEnum "blah" // 1
}

var tstructStructWithSomeEnum = thrift.NewTStruct("StructWithSomeEnum", []thrift.TField{
	thrift.NewTField("blah", thrift.I32, 1),
})

func (*StructWithSomeEnum) GetTStruct() thrift.TStruct { return tstructStructWithSomeEnum }
func NewStructWithSomeEnum() *StructWithSomeEnum {
	output := &StructWithSomeEnum{}
	{
		output.Blah = math.MinInt32 - 1
	}
	return output
}

func (p *StructWithSomeEnum) IsSetBlah() bool {
	return int64(p.Blah) != math.MinInt32-1
}

func (p *StructWithSomeEnum) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructStructWithSomeEnum.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructStructWithSomeEnum.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //SomeEnum
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *StructWithSomeEnum) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v694, err695 := iprot.ReadI32()
	if err695 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "blah", p.ThriftName(), err695)
	}
	p.Blah = SomeEnum(v694)
	return err
}

func (p *StructWithSomeEnum) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("StructWithSomeEnum")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *StructWithSomeEnum) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetBlah() {
		err = oprot.WriteFieldBegin("blah", thrift.I32, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Blah))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
		}
	}
	return err
}

func (p *StructWithSomeEnum) TStructName() string {
	return "StructWithSomeEnum"
}

func (p *StructWithSomeEnum) ThriftName() string {
	return "StructWithSomeEnum"
}

func (p *StructWithSomeEnum) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Blah
	}
	return nil
}

func (p *StructWithSomeEnum) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("blah", thrift.I32, 1),
	})
}

/**
 * Attributes:
 *  - StringField: A doc string
 *  - I32Field
 *  - StructField
 *  - StructList
 *  - OtherI32Field
 *  - EnumField
 *  - I32Set
 *  - I32Map
 */
type TestUnion struct {
	StringField   string          "string_field"    // 1
	I32Field      int32           "i32_field"       // 2
	StructField   *OneOfEach      "struct_field"    // 3
	StructList    []*RandomStuff  "struct_list"     // 4
	OtherI32Field int32           "other_i32_field" // 5
	EnumField     SomeEnum        "enum_field"      // 6
	I32Set        map[int32]bool  "i32_set"         // 7
	I32Map        map[int32]int32 "i32_map"         // 8
}

var tstructTestUnion = thrift.NewTStruct("TestUnion", []thrift.TField{
	thrift.NewTField("string_field", thrift.STRING, 1),
	thrift.NewTField("i32_field", thrift.I32, 2),
	thrift.NewTField("struct_field", thrift.STRUCT, 3),
	thrift.NewTField("struct_list", thrift.LIST, 4),
	thrift.NewTField("other_i32_field", thrift.I32, 5),
	thrift.NewTField("enum_field", thrift.I32, 6),
	thrift.NewTField("i32_set", thrift.SET, 7),
	thrift.NewTField("i32_map", thrift.MAP, 8),
})

func (*TestUnion) GetTStruct() thrift.TStruct { return tstructTestUnion }
func NewTestUnion() *TestUnion {
	output := &TestUnion{}
	{
		output.EnumField = math.MinInt32 - 1
	}
	return output
}

func (p *TestUnion) IsSetEnumField() bool {
	return int64(p.EnumField) != math.MinInt32-1
}

func (p *TestUnion) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructTestUnion.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructTestUnion.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //OneOfEach
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.LIST {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //SomeEnum
			if fieldTypeId == thrift.I32 {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 7: //
			if fieldTypeId == thrift.SET {
				err = p.readField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 8: //
			if fieldTypeId == thrift.MAP {
				err = p.readField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TestUnion) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v696, err697 := iprot.ReadString()
	if err697 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "string_field", p.ThriftName(), err697)
	}
	p.StringField = v696
	return err
}

func (p *TestUnion) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v698, err699 := iprot.ReadI32()
	if err699 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "i32_field", p.ThriftName(), err699)
	}
	p.I32Field = v698
	return err
}

func (p *TestUnion) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.StructField = NewOneOfEach()
	err702 := p.StructField.Read(iprot)
	if err702 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.StructFieldOneOfEach", err702)
	}
	return err
}

func (p *TestUnion) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype708, _size705, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.StructList", "", err)
	}
	_ = _etype708
	p.StructList = make([]*RandomStuff, _size705, _size705)
	for i := 0; i < _size705; i++ {
		_elem710 := NewRandomStuff()
		err713 := _elem710.Read(iprot)
		if err713 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem710RandomStuff", err713)
		}
		p.StructList[i] = _elem710
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *TestUnion) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v714, err715 := iprot.ReadI32()
	if err715 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "other_i32_field", p.ThriftName(), err715)
	}
	p.OtherI32Field = v714
	return err
}

func (p *TestUnion) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v716, err717 := iprot.ReadI32()
	if err717 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "enum_field", p.ThriftName(), err717)
	}
	p.EnumField = SomeEnum(v716)
	return err
}

func (p *TestUnion) readField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype723, _size720, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32Set", "", err)
	}
	_ = _etype723
	p.I32Set = make(map[int32]bool, _size720)
	for i := 0; i < _size720; i++ {
		v726, err727 := iprot.ReadI32()
		if err727 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem725", "", err727)
		}
		_elem725 := v726
		p.I32Set[_elem725] = true
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *TestUnion) readField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype731, _vtype732, _size730, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32Map", "", err)
	}
	_, _ = _ktype731, _vtype732
	p.I32Map = make(map[int32]int32, _size730)
	for i := 0; i < _size730; i++ {
		v737, err738 := iprot.ReadI32()
		if err738 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key735", "", err738)
		}
		_key735 := v737
		v739, err740 := iprot.ReadI32()
		if err740 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val736", "", err740)
		}
		_val736 := v739
		p.I32Map[_key735] = _val736
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *TestUnion) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TestUnion")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = p.writeField7(oprot)
	if err != nil {
		return err
	}
	err = p.writeField8(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TestUnion) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("string_field", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "string_field", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.StringField)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "string_field", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "string_field", p.ThriftName(), err)
	}
	return err
}

func (p *TestUnion) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("i32_field", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "i32_field", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.I32Field))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "i32_field", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "i32_field", p.ThriftName(), err)
	}
	return err
}

func (p *TestUnion) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StructField != nil {
		err = oprot.WriteFieldBegin("struct_field", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "struct_field", p.ThriftName(), err)
		}
		err = p.StructField.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("OneOfEach", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "struct_field", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnion) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StructList != nil {
		err = oprot.WriteFieldBegin("struct_list", thrift.LIST, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "struct_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.StructList))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter741 := range p.StructList {
			err = Iter741.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("RandomStuff", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "struct_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnion) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("other_i32_field", thrift.I32, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "other_i32_field", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.OtherI32Field))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "other_i32_field", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "other_i32_field", p.ThriftName(), err)
	}
	return err
}

func (p *TestUnion) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetEnumField() {
		err = oprot.WriteFieldBegin("enum_field", thrift.I32, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "enum_field", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.EnumField))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "enum_field", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "enum_field", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnion) writeField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32Set != nil {
		err = oprot.WriteFieldBegin("i32_set", thrift.SET, 7)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "i32_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.I32, len(p.I32Set))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter742, _ := range p.I32Set {
			err = oprot.WriteI32(int32(Iter742))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter742", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "i32_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnion) writeField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32Map != nil {
		err = oprot.WriteFieldBegin("i32_map", thrift.MAP, 8)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(8, "i32_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.I32Map))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter743, Viter744 := range p.I32Map {
			err = oprot.WriteI32(int32(Kiter743))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter743", "", err)
			}
			err = oprot.WriteI32(int32(Viter744))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter744", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(8, "i32_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnion) TStructName() string {
	return "TestUnion"
}

func (p *TestUnion) ThriftName() string {
	return "TestUnion"
}

func (p *TestUnion) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.StringField
	case 2:
		return p.I32Field
	case 3:
		return p.StructField
	case 4:
		return p.StructList
	case 5:
		return p.OtherI32Field
	case 6:
		return p.EnumField
	case 7:
		return p.I32Set
	case 8:
		return p.I32Map
	}
	return nil
}

func (p *TestUnion) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("string_field", thrift.STRING, 1),
		thrift.NewTField("i32_field", thrift.I32, 2),
		thrift.NewTField("struct_field", thrift.STRUCT, 3),
		thrift.NewTField("struct_list", thrift.LIST, 4),
		thrift.NewTField("other_i32_field", thrift.I32, 5),
		thrift.NewTField("enum_field", thrift.I32, 6),
		thrift.NewTField("i32_set", thrift.SET, 7),
		thrift.NewTField("i32_map", thrift.MAP, 8),
	})
}

/**
 * Attributes:
 *  - I32Field
 *  - StructField
 *  - StructList
 *  - OtherI32Field
 *  - EnumField
 *  - I32Set
 *  - I32Map
 */
type TestUnionMinusStringField struct {
	_             interface{}     // nil # 1
	I32Field      int32           "i32_field"       // 2
	StructField   *OneOfEach      "struct_field"    // 3
	StructList    []*RandomStuff  "struct_list"     // 4
	OtherI32Field int32           "other_i32_field" // 5
	EnumField     SomeEnum        "enum_field"      // 6
	I32Set        map[int32]bool  "i32_set"         // 7
	I32Map        map[int32]int32 "i32_map"         // 8
}

var tstructTestUnionMinusStringField = thrift.NewTStruct("TestUnionMinusStringField", []thrift.TField{
	thrift.NewTField("i32_field", thrift.I32, 2),
	thrift.NewTField("struct_field", thrift.STRUCT, 3),
	thrift.NewTField("struct_list", thrift.LIST, 4),
	thrift.NewTField("other_i32_field", thrift.I32, 5),
	thrift.NewTField("enum_field", thrift.I32, 6),
	thrift.NewTField("i32_set", thrift.SET, 7),
	thrift.NewTField("i32_map", thrift.MAP, 8),
})

func (*TestUnionMinusStringField) GetTStruct() thrift.TStruct { return tstructTestUnionMinusStringField }
func NewTestUnionMinusStringField() *TestUnionMinusStringField {
	output := &TestUnionMinusStringField{}
	{
		output.EnumField = math.MinInt32 - 1
	}
	return output
}

func (p *TestUnionMinusStringField) IsSetEnumField() bool {
	return int64(p.EnumField) != math.MinInt32-1
}

func (p *TestUnionMinusStringField) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructTestUnionMinusStringField.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructTestUnionMinusStringField.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //OneOfEach
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.LIST {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //SomeEnum
			if fieldTypeId == thrift.I32 {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 7: //
			if fieldTypeId == thrift.SET {
				err = p.readField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 8: //
			if fieldTypeId == thrift.MAP {
				err = p.readField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TestUnionMinusStringField) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v745, err746 := iprot.ReadI32()
	if err746 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "i32_field", p.ThriftName(), err746)
	}
	p.I32Field = v745
	return err
}

func (p *TestUnionMinusStringField) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.StructField = NewOneOfEach()
	err749 := p.StructField.Read(iprot)
	if err749 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.StructFieldOneOfEach", err749)
	}
	return err
}

func (p *TestUnionMinusStringField) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype755, _size752, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.StructList", "", err)
	}
	_ = _etype755
	p.StructList = make([]*RandomStuff, _size752, _size752)
	for i := 0; i < _size752; i++ {
		_elem757 := NewRandomStuff()
		err760 := _elem757.Read(iprot)
		if err760 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem757RandomStuff", err760)
		}
		p.StructList[i] = _elem757
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *TestUnionMinusStringField) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v761, err762 := iprot.ReadI32()
	if err762 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "other_i32_field", p.ThriftName(), err762)
	}
	p.OtherI32Field = v761
	return err
}

func (p *TestUnionMinusStringField) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v763, err764 := iprot.ReadI32()
	if err764 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "enum_field", p.ThriftName(), err764)
	}
	p.EnumField = SomeEnum(v763)
	return err
}

func (p *TestUnionMinusStringField) readField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype770, _size767, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32Set", "", err)
	}
	_ = _etype770
	p.I32Set = make(map[int32]bool, _size767)
	for i := 0; i < _size767; i++ {
		v773, err774 := iprot.ReadI32()
		if err774 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem772", "", err774)
		}
		_elem772 := v773
		p.I32Set[_elem772] = true
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *TestUnionMinusStringField) readField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype778, _vtype779, _size777, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32Map", "", err)
	}
	_, _ = _ktype778, _vtype779
	p.I32Map = make(map[int32]int32, _size777)
	for i := 0; i < _size777; i++ {
		v784, err785 := iprot.ReadI32()
		if err785 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key782", "", err785)
		}
		_key782 := v784
		v786, err787 := iprot.ReadI32()
		if err787 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val783", "", err787)
		}
		_val783 := v786
		p.I32Map[_key782] = _val783
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *TestUnionMinusStringField) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TestUnionMinusStringField")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = p.writeField7(oprot)
	if err != nil {
		return err
	}
	err = p.writeField8(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TestUnionMinusStringField) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("i32_field", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "i32_field", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.I32Field))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "i32_field", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "i32_field", p.ThriftName(), err)
	}
	return err
}

func (p *TestUnionMinusStringField) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StructField != nil {
		err = oprot.WriteFieldBegin("struct_field", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "struct_field", p.ThriftName(), err)
		}
		err = p.StructField.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("OneOfEach", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "struct_field", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnionMinusStringField) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StructList != nil {
		err = oprot.WriteFieldBegin("struct_list", thrift.LIST, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "struct_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.StructList))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter788 := range p.StructList {
			err = Iter788.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("RandomStuff", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "struct_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnionMinusStringField) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("other_i32_field", thrift.I32, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "other_i32_field", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.OtherI32Field))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "other_i32_field", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "other_i32_field", p.ThriftName(), err)
	}
	return err
}

func (p *TestUnionMinusStringField) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetEnumField() {
		err = oprot.WriteFieldBegin("enum_field", thrift.I32, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "enum_field", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.EnumField))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "enum_field", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "enum_field", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnionMinusStringField) writeField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32Set != nil {
		err = oprot.WriteFieldBegin("i32_set", thrift.SET, 7)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "i32_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.I32, len(p.I32Set))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter789, _ := range p.I32Set {
			err = oprot.WriteI32(int32(Iter789))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter789", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "i32_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnionMinusStringField) writeField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32Map != nil {
		err = oprot.WriteFieldBegin("i32_map", thrift.MAP, 8)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(8, "i32_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.I32Map))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter790, Viter791 := range p.I32Map {
			err = oprot.WriteI32(int32(Kiter790))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter790", "", err)
			}
			err = oprot.WriteI32(int32(Viter791))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter791", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(8, "i32_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnionMinusStringField) TStructName() string {
	return "TestUnionMinusStringField"
}

func (p *TestUnionMinusStringField) ThriftName() string {
	return "TestUnionMinusStringField"
}

func (p *TestUnionMinusStringField) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 2:
		return p.I32Field
	case 3:
		return p.StructField
	case 4:
		return p.StructList
	case 5:
		return p.OtherI32Field
	case 6:
		return p.EnumField
	case 7:
		return p.I32Set
	case 8:
		return p.I32Map
	}
	return nil
}

func (p *TestUnionMinusStringField) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("i32_field", thrift.I32, 2),
		thrift.NewTField("struct_field", thrift.STRUCT, 3),
		thrift.NewTField("struct_list", thrift.LIST, 4),
		thrift.NewTField("other_i32_field", thrift.I32, 5),
		thrift.NewTField("enum_field", thrift.I32, 6),
		thrift.NewTField("i32_set", thrift.SET, 7),
		thrift.NewTField("i32_map", thrift.MAP, 8),
	})
}

/**
 * Attributes:
 *  - StringField
 *  - BinaryField
 */
type ComparableUnion struct {
	StringField string "string_field" // 1
	BinaryField []byte "binary_field" // 2
}

var tstructComparableUnion = thrift.NewTStruct("ComparableUnion", []thrift.TField{
	thrift.NewTField("string_field", thrift.STRING, 1),
	thrift.NewTField("binary_field", thrift.STRING, 2),
})

func (*ComparableUnion) GetTStruct() thrift.TStruct { return tstructComparableUnion }
func NewComparableUnion() *ComparableUnion {
	output := &ComparableUnion{}
	{
	}
	return output
}

func (p *ComparableUnion) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructComparableUnion.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructComparableUnion.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ComparableUnion) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v792, err793 := iprot.ReadString()
	if err793 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "string_field", p.ThriftName(), err793)
	}
	p.StringField = v792
	return err
}

func (p *ComparableUnion) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v794, err795 := iprot.ReadBinary()
	if err795 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "binary_field", p.ThriftName(), err795)
	}
	p.BinaryField = v794
	return err
}

func (p *ComparableUnion) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("ComparableUnion")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ComparableUnion) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("string_field", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "string_field", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.StringField)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "string_field", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "string_field", p.ThriftName(), err)
	}
	return err
}

func (p *ComparableUnion) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.BinaryField != nil {
		err = oprot.WriteFieldBegin("binary_field", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "binary_field", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.BinaryField)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "binary_field", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "binary_field", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ComparableUnion) TStructName() string {
	return "ComparableUnion"
}

func (p *ComparableUnion) ThriftName() string {
	return "ComparableUnion"
}

func (p *ComparableUnion) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.StringField
	case 2:
		return p.BinaryField
	}
	return nil
}

func (p *ComparableUnion) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("string_field", thrift.STRING, 1),
		thrift.NewTField("binary_field", thrift.STRING, 2),
	})
}

/**
 * Attributes:
 *  - TestUnion
 */
type StructWithAUnion struct {
	TestUnion *TestUnion "test_union" // 1
}

var tstructStructWithAUnion = thrift.NewTStruct("StructWithAUnion", []thrift.TField{
	thrift.NewTField("test_union", thrift.STRUCT, 1),
})

func (*StructWithAUnion) GetTStruct() thrift.TStruct { return tstructStructWithAUnion }
func NewStructWithAUnion() *StructWithAUnion {
	output := &StructWithAUnion{}
	{
	}
	return output
}

func (p *StructWithAUnion) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructStructWithAUnion.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructStructWithAUnion.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //TestUnion
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *StructWithAUnion) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.TestUnion = NewTestUnion()
	err798 := p.TestUnion.Read(iprot)
	if err798 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TestUnionTestUnion", err798)
	}
	return err
}

func (p *StructWithAUnion) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("StructWithAUnion")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *StructWithAUnion) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TestUnion != nil {
		err = oprot.WriteFieldBegin("test_union", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "test_union", p.ThriftName(), err)
		}
		err = p.TestUnion.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TestUnion", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "test_union", p.ThriftName(), err)
		}
	}
	return err
}

func (p *StructWithAUnion) TStructName() string {
	return "StructWithAUnion"
}

func (p *StructWithAUnion) ThriftName() string {
	return "StructWithAUnion"
}

func (p *StructWithAUnion) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TestUnion
	}
	return nil
}

func (p *StructWithAUnion) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("test_union", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Blah
 *  - Blah2
 *  - Bw
 */
type PrimitiveThenStruct struct {
	Blah  int32      "blah"  // 1
	Blah2 int32      "blah2" // 2
	Bw    *Backwards "bw"    // 3
}

var tstructPrimitiveThenStruct = thrift.NewTStruct("PrimitiveThenStruct", []thrift.TField{
	thrift.NewTField("blah", thrift.I32, 1),
	thrift.NewTField("blah2", thrift.I32, 2),
	thrift.NewTField("bw", thrift.STRUCT, 3),
})

func (*PrimitiveThenStruct) GetTStruct() thrift.TStruct { return tstructPrimitiveThenStruct }
func NewPrimitiveThenStruct() *PrimitiveThenStruct {
	output := &PrimitiveThenStruct{}
	{
	}
	return output
}

func (p *PrimitiveThenStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructPrimitiveThenStruct.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructPrimitiveThenStruct.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Backwards
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *PrimitiveThenStruct) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v799, err800 := iprot.ReadI32()
	if err800 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "blah", p.ThriftName(), err800)
	}
	p.Blah = v799
	return err
}

func (p *PrimitiveThenStruct) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v801, err802 := iprot.ReadI32()
	if err802 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "blah2", p.ThriftName(), err802)
	}
	p.Blah2 = v801
	return err
}

func (p *PrimitiveThenStruct) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Bw = NewBackwards()
	err805 := p.Bw.Read(iprot)
	if err805 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.BwBackwards", err805)
	}
	return err
}

func (p *PrimitiveThenStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("PrimitiveThenStruct")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *PrimitiveThenStruct) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("blah", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Blah))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
	}
	return err
}

func (p *PrimitiveThenStruct) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("blah2", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "blah2", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Blah2))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "blah2", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "blah2", p.ThriftName(), err)
	}
	return err
}

func (p *PrimitiveThenStruct) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Bw != nil {
		err = oprot.WriteFieldBegin("bw", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "bw", p.ThriftName(), err)
		}
		err = p.Bw.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("Backwards", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "bw", p.ThriftName(), err)
		}
	}
	return err
}

func (p *PrimitiveThenStruct) TStructName() string {
	return "PrimitiveThenStruct"
}

func (p *PrimitiveThenStruct) ThriftName() string {
	return "PrimitiveThenStruct"
}

func (p *PrimitiveThenStruct) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Blah
	case 2:
		return p.Blah2
	case 3:
		return p.Bw
	}
	return nil
}

func (p *PrimitiveThenStruct) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("blah", thrift.I32, 1),
		thrift.NewTField("blah2", thrift.I32, 2),
		thrift.NewTField("bw", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - SomemapField
 */
type StructWithASomemap struct {
	SomemapField SomeMap "somemap_field" // 1
}

var tstructStructWithASomemap = thrift.NewTStruct("StructWithASomemap", []thrift.TField{
	thrift.NewTField("somemap_field", thrift.MAP, 1),
})

func (*StructWithASomemap) GetTStruct() thrift.TStruct { return tstructStructWithASomemap }
func NewStructWithASomemap() *StructWithASomemap {
	output := &StructWithASomemap{}
	{
	}
	return output
}

func (p *StructWithASomemap) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructStructWithASomemap.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructStructWithASomemap.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //SomeMap
			if fieldTypeId == thrift.MAP {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *StructWithASomemap) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype809, _vtype810, _size808, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.SomemapField", "", err)
	}
	_, _ = _ktype809, _vtype810
	p.SomemapField = make(map[int32]int32, _size808)
	for i := 0; i < _size808; i++ {
		v815, err816 := iprot.ReadI32()
		if err816 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key813", "", err816)
		}
		_key813 := v815
		v817, err818 := iprot.ReadI32()
		if err818 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val814", "", err818)
		}
		_val814 := v817
		p.SomemapField[_key813] = _val814
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *StructWithASomemap) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("StructWithASomemap")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *StructWithASomemap) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.SomemapField != nil {
		err = oprot.WriteFieldBegin("somemap_field", thrift.MAP, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "somemap_field", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.SomemapField))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter819, Viter820 := range p.SomemapField {
			err = oprot.WriteI32(int32(Kiter819))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter819", "", err)
			}
			err = oprot.WriteI32(int32(Viter820))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter820", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "somemap_field", p.ThriftName(), err)
		}
	}
	return err
}

func (p *StructWithASomemap) TStructName() string {
	return "StructWithASomemap"
}

func (p *StructWithASomemap) ThriftName() string {
	return "StructWithASomemap"
}

func (p *StructWithASomemap) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.SomemapField
	}
	return nil
}

func (p *StructWithASomemap) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("somemap_field", thrift.MAP, 1),
	})
}

/**
 * Attributes:
 *  - Field1
 *  - Field2
 */
type BigFieldIdStruct struct {
	Field1 string      "field1" // 1
	_      interface{} // nil # 2
	_      interface{} // nil # 3
	_      interface{} // nil # 4
	_      interface{} // nil # 5
	_      interface{} // nil # 6
	_      interface{} // nil # 7
	_      interface{} // nil # 8
	_      interface{} // nil # 9
	_      interface{} // nil # 10
	_      interface{} // nil # 11
	_      interface{} // nil # 12
	_      interface{} // nil # 13
	_      interface{} // nil # 14
	_      interface{} // nil # 15
	_      interface{} // nil # 16
	_      interface{} // nil # 17
	_      interface{} // nil # 18
	_      interface{} // nil # 19
	_      interface{} // nil # 20
	_      interface{} // nil # 21
	_      interface{} // nil # 22
	_      interface{} // nil # 23
	_      interface{} // nil # 24
	_      interface{} // nil # 25
	_      interface{} // nil # 26
	_      interface{} // nil # 27
	_      interface{} // nil # 28
	_      interface{} // nil # 29
	_      interface{} // nil # 30
	_      interface{} // nil # 31
	_      interface{} // nil # 32
	_      interface{} // nil # 33
	_      interface{} // nil # 34
	_      interface{} // nil # 35
	_      interface{} // nil # 36
	_      interface{} // nil # 37
	_      interface{} // nil # 38
	_      interface{} // nil # 39
	_      interface{} // nil # 40
	_      interface{} // nil # 41
	_      interface{} // nil # 42
	_      interface{} // nil # 43
	_      interface{} // nil # 44
	Field2 string      "field2" // 45
}

var tstructBigFieldIdStruct = thrift.NewTStruct("BigFieldIdStruct", []thrift.TField{
	thrift.NewTField("field1", thrift.STRING, 1),
	thrift.NewTField("field2", thrift.STRING, 45),
})

func (*BigFieldIdStruct) GetTStruct() thrift.TStruct { return tstructBigFieldIdStruct }
func NewBigFieldIdStruct() *BigFieldIdStruct {
	output := &BigFieldIdStruct{}
	{
	}
	return output
}

func (p *BigFieldIdStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructBigFieldIdStruct.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructBigFieldIdStruct.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 45: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField45(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BigFieldIdStruct) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v821, err822 := iprot.ReadString()
	if err822 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "field1", p.ThriftName(), err822)
	}
	p.Field1 = v821
	return err
}

func (p *BigFieldIdStruct) readField45(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v823, err824 := iprot.ReadString()
	if err824 != nil {
		return thrift.NewTProtocolExceptionReadField(45, "field2", p.ThriftName(), err824)
	}
	p.Field2 = v823
	return err
}

func (p *BigFieldIdStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("BigFieldIdStruct")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField45(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BigFieldIdStruct) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("field1", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "field1", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Field1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "field1", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "field1", p.ThriftName(), err)
	}
	return err
}

func (p *BigFieldIdStruct) writeField45(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("field2", thrift.STRING, 45)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(45, "field2", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Field2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(45, "field2", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(45, "field2", p.ThriftName(), err)
	}
	return err
}

func (p *BigFieldIdStruct) TStructName() string {
	return "BigFieldIdStruct"
}

func (p *BigFieldIdStruct) ThriftName() string {
	return "BigFieldIdStruct"
}

func (p *BigFieldIdStruct) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Field1
	case 45:
		return p.Field2
	}
	return nil
}

func (p *BigFieldIdStruct) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("field1", thrift.STRING, 1),
		thrift.NewTField("field2", thrift.STRING, 45),
	})
}

/**
 * Attributes:
 *  - Field1
 *  - Field2
 *  - Field3
 */
type BreaksRubyCompactProtocol struct {
	Field1 string            "field1" // 1
	Field2 *BigFieldIdStruct "field2" // 2
	Field3 int32             "field3" // 3
}

var tstructBreaksRubyCompactProtocol = thrift.NewTStruct("BreaksRubyCompactProtocol", []thrift.TField{
	thrift.NewTField("field1", thrift.STRING, 1),
	thrift.NewTField("field2", thrift.STRUCT, 2),
	thrift.NewTField("field3", thrift.I32, 3),
})

func (*BreaksRubyCompactProtocol) GetTStruct() thrift.TStruct { return tstructBreaksRubyCompactProtocol }
func NewBreaksRubyCompactProtocol() *BreaksRubyCompactProtocol {
	output := &BreaksRubyCompactProtocol{}
	{
	}
	return output
}

func (p *BreaksRubyCompactProtocol) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructBreaksRubyCompactProtocol.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructBreaksRubyCompactProtocol.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //BigFieldIdStruct
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BreaksRubyCompactProtocol) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v825, err826 := iprot.ReadString()
	if err826 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "field1", p.ThriftName(), err826)
	}
	p.Field1 = v825
	return err
}

func (p *BreaksRubyCompactProtocol) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Field2 = NewBigFieldIdStruct()
	err829 := p.Field2.Read(iprot)
	if err829 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.Field2BigFieldIdStruct", err829)
	}
	return err
}

func (p *BreaksRubyCompactProtocol) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v830, err831 := iprot.ReadI32()
	if err831 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "field3", p.ThriftName(), err831)
	}
	p.Field3 = v830
	return err
}

func (p *BreaksRubyCompactProtocol) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("BreaksRubyCompactProtocol")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BreaksRubyCompactProtocol) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("field1", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "field1", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Field1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "field1", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "field1", p.ThriftName(), err)
	}
	return err
}

func (p *BreaksRubyCompactProtocol) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Field2 != nil {
		err = oprot.WriteFieldBegin("field2", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "field2", p.ThriftName(), err)
		}
		err = p.Field2.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("BigFieldIdStruct", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "field2", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BreaksRubyCompactProtocol) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("field3", thrift.I32, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "field3", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Field3))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "field3", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "field3", p.ThriftName(), err)
	}
	return err
}

func (p *BreaksRubyCompactProtocol) TStructName() string {
	return "BreaksRubyCompactProtocol"
}

func (p *BreaksRubyCompactProtocol) ThriftName() string {
	return "BreaksRubyCompactProtocol"
}

func (p *BreaksRubyCompactProtocol) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Field1
	case 2:
		return p.Field2
	case 3:
		return p.Field3
	}
	return nil
}

func (p *BreaksRubyCompactProtocol) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("field1", thrift.STRING, 1),
		thrift.NewTField("field2", thrift.STRUCT, 2),
		thrift.NewTField("field3", thrift.I32, 3),
	})
}

var CompactProtoTestStruct_COMPACTTEST *CompactProtoTestStruct

const I32_MYCONST = 2
const SomeEnum_MYSOMEENUM = 1
const SomeEnum_MYSOMEENUM_1 = 1

var _MYENUMMAP map[SomeEnum]SomeEnum
var _EXTRACRAZYMAP map[SomeEnum]*StructWithSomeEnum

func init() {
	CompactProtoTestStruct_COMPACTTEST = NewCompactProtoTestStruct()
	{
		CompactProtoTestStruct_COMPACTTEST.AByte = 127
		CompactProtoTestStruct_COMPACTTEST.AI16 = 32000
		CompactProtoTestStruct_COMPACTTEST.AI32 = 1000000000
		CompactProtoTestStruct_COMPACTTEST.AI64 = 1099511627775
		CompactProtoTestStruct_COMPACTTEST.ADouble = 5.6789
		CompactProtoTestStruct_COMPACTTEST.AString = "my string"
		CompactProtoTestStruct_COMPACTTEST.TrueField = true
		CompactProtoTestStruct_COMPACTTEST.FalseField = false
		v833 := NewEmpty()
		{
		}
		CompactProtoTestStruct_COMPACTTEST.EmptyStructField = v833
		v835 := make([]int8, 5, 5)
		{
			var v836 int8
			v836 = -127
			v835[0] = v836
			v836 = -1
			v835[1] = v836
			v836 = 0
			v835[2] = v836
			v836 = 1
			v835[3] = v836
			v836 = 127
			v835[4] = v836
		}

		CompactProtoTestStruct_COMPACTTEST.ByteList = v835
		v838 := make([]int16, 4, 4)
		{
			var v839 int16
			v839 = -1
			v838[0] = v839
			v839 = 0
			v838[1] = v839
			v839 = 1
			v838[2] = v839
			v839 = 32767
			v838[3] = v839
		}

		CompactProtoTestStruct_COMPACTTEST.I16List = v838
		v841 := make([]int32, 6, 6)
		{
			var v842 int32
			v842 = -1
			v841[0] = v842
			v842 = 0
			v841[1] = v842
			v842 = 255
			v841[2] = v842
			v842 = 65535
			v841[3] = v842
			v842 = 16777215
			v841[4] = v842
			v842 = 2147483647
			v841[5] = v842
		}

		CompactProtoTestStruct_COMPACTTEST.I32List = v841
		v844 := make([]int64, 10, 10)
		{
			var v845 int64
			v845 = -1
			v844[0] = v845
			v845 = 0
			v844[1] = v845
			v845 = 255
			v844[2] = v845
			v845 = 65535
			v844[3] = v845
			v845 = 16777215
			v844[4] = v845
			v845 = 4294967295
			v844[5] = v845
			v845 = 1099511627775
			v844[6] = v845
			v845 = 281474976710655
			v844[7] = v845
			v845 = 72057594037927935
			v844[8] = v845
			v845 = 9223372036854775807
			v844[9] = v845
		}

		CompactProtoTestStruct_COMPACTTEST.I64List = v844
		v847 := make([]float64, 3, 3)
		{
			var v848 float64
			v848 = 0.1
			v847[0] = v848
			v848 = 0.2
			v847[1] = v848
			v848 = 0.3
			v847[2] = v848
		}

		CompactProtoTestStruct_COMPACTTEST.DoubleList = v847
		v850 := make([]string, 3, 3)
		{
			var v851 string
			v851 = "first"
			v850[0] = v851
			v851 = "second"
			v850[1] = v851
			v851 = "third"
			v850[2] = v851
		}

		CompactProtoTestStruct_COMPACTTEST.StringList = v850
		v853 := make([]bool, 6, 6)
		{
			var v854 bool
			v854 = true
			v853[0] = v854
			v854 = true
			v853[1] = v854
			v854 = true
			v853[2] = v854
			v854 = false
			v853[3] = v854
			v854 = false
			v853[4] = v854
			v854 = false
			v853[5] = v854
		}

		CompactProtoTestStruct_COMPACTTEST.BooleanList = v853
		v856 := make([]*Empty, 2, 2)
		{
			var v857 *Empty
			v857 = NewEmpty()
			{
			}
			v856[0] = v857
			v857 = NewEmpty()
			{
			}
			v856[1] = v857
		}

		CompactProtoTestStruct_COMPACTTEST.StructList = v856
		v859 := make(map[int8]bool, 5)
		{
			var v860 int8 = -127
			v859[v860] = true
			var v861 int8 = -1
			v859[v861] = true
			var v862 int8 = 0
			v859[v862] = true
			var v863 int8 = 1
			v859[v863] = true
			var v864 int8 = 127
			v859[v864] = true
		}

		CompactProtoTestStruct_COMPACTTEST.ByteSet = v859
		v866 := make(map[int16]bool, 4)
		{
			var v867 int16 = -1
			v866[v867] = true
			var v868 int16 = 0
			v866[v868] = true
			var v869 int16 = 1
			v866[v869] = true
			var v870 int16 = 32767
			v866[v870] = true
		}

		CompactProtoTestStruct_COMPACTTEST.I16Set = v866
		v872 := make(map[int32]bool, 3)
		{
			var v873 int32 = 1
			v872[v873] = true
			var v874 int32 = 2
			v872[v874] = true
			var v875 int32 = 3
			v872[v875] = true
		}

		CompactProtoTestStruct_COMPACTTEST.I32Set = v872
		v877 := make(map[int64]bool, 10)
		{
			var v878 int64 = -1
			v877[v878] = true
			var v879 int64 = 0
			v877[v879] = true
			var v880 int64 = 255
			v877[v880] = true
			var v881 int64 = 65535
			v877[v881] = true
			var v882 int64 = 16777215
			v877[v882] = true
			var v883 int64 = 4294967295
			v877[v883] = true
			var v884 int64 = 1099511627775
			v877[v884] = true
			var v885 int64 = 281474976710655
			v877[v885] = true
			var v886 int64 = 72057594037927935
			v877[v886] = true
			var v887 int64 = 9223372036854775807
			v877[v887] = true
		}

		CompactProtoTestStruct_COMPACTTEST.I64Set = v877
		v889 := make(map[float64]bool, 3)
		{
			var v890 float64 = 0.1
			v889[v890] = true
			var v891 float64 = 0.2
			v889[v891] = true
			var v892 float64 = 0.3
			v889[v892] = true
		}

		CompactProtoTestStruct_COMPACTTEST.DoubleSet = v889
		v894 := make(map[string]bool, 3)
		{
			var v895 string = "first"
			v894[v895] = true
			var v896 string = "second"
			v894[v896] = true
			var v897 string = "third"
			v894[v897] = true
		}

		CompactProtoTestStruct_COMPACTTEST.StringSet = v894
		v899 := make(map[bool]bool, 2)
		{
			var v900 bool = true
			v899[v900] = true
			var v901 bool = false
			v899[v901] = true
		}

		CompactProtoTestStruct_COMPACTTEST.BooleanSet = v899
		v903 := make(map[int8]int8, 1)
		{
			var k904 int8 = 1
			var v905 int8 = 2
			v903[k904] = v905
		}

		CompactProtoTestStruct_COMPACTTEST.ByteByteMap = v903
		v907 := make(map[int16]int8, 3)
		{
			var k908 int16 = 1
			var v909 int8 = 1
			v907[k908] = v909
			var k910 int16 = -1
			var v911 int8 = 1
			v907[k910] = v911
			var k912 int16 = 32767
			var v913 int8 = 1
			v907[k912] = v913
		}

		CompactProtoTestStruct_COMPACTTEST.I16ByteMap = v907
		v915 := make(map[int32]int8, 3)
		{
			var k916 int32 = 1
			var v917 int8 = 1
			v915[k916] = v917
			var k918 int32 = -1
			var v919 int8 = 1
			v915[k918] = v919
			var k920 int32 = 2147483647
			var v921 int8 = 1
			v915[k920] = v921
		}

		CompactProtoTestStruct_COMPACTTEST.I32ByteMap = v915
		v923 := make(map[int64]int8, 4)
		{
			var k924 int64 = 0
			var v925 int8 = 1
			v923[k924] = v925
			var k926 int64 = 1
			var v927 int8 = 1
			v923[k926] = v927
			var k928 int64 = -1
			var v929 int8 = 1
			v923[k928] = v929
			var k930 int64 = 9223372036854775807
			var v931 int8 = 1
			v923[k930] = v931
		}

		CompactProtoTestStruct_COMPACTTEST.I64ByteMap = v923
		v933 := make(map[float64]int8, 2)
		{
			var k934 float64 = -1.1
			var v935 int8 = 1
			v933[k934] = v935
			var k936 float64 = 1.1
			var v937 int8 = 1
			v933[k936] = v937
		}

		CompactProtoTestStruct_COMPACTTEST.DoubleByteMap = v933
		v939 := make(map[string]int8, 4)
		{
			var k940 string = "first"
			var v941 int8 = 1
			v939[k940] = v941
			var k942 string = "second"
			var v943 int8 = 2
			v939[k942] = v943
			var k944 string = "third"
			var v945 int8 = 3
			v939[k944] = v945
			var k946 string = ""
			var v947 int8 = 0
			v939[k946] = v947
		}

		CompactProtoTestStruct_COMPACTTEST.StringByteMap = v939
		v949 := make(map[bool]int8, 2)
		{
			var k950 bool = true
			var v951 int8 = 1
			v949[k950] = v951
			var k952 bool = false
			var v953 int8 = 0
			v949[k952] = v953
		}

		CompactProtoTestStruct_COMPACTTEST.BooleanByteMap = v949
		v955 := make(map[int8]int16, 3)
		{
			var k956 int8 = 1
			var v957 int16 = 1
			v955[k956] = v957
			var k958 int8 = 2
			var v959 int16 = -1
			v955[k958] = v959
			var k960 int8 = 3
			var v961 int16 = 32767
			v955[k960] = v961
		}

		CompactProtoTestStruct_COMPACTTEST.ByteI16Map = v955
		v963 := make(map[int8]int32, 3)
		{
			var k964 int8 = 1
			var v965 int32 = 1
			v963[k964] = v965
			var k966 int8 = 2
			var v967 int32 = -1
			v963[k966] = v967
			var k968 int8 = 3
			var v969 int32 = 2147483647
			v963[k968] = v969
		}

		CompactProtoTestStruct_COMPACTTEST.ByteI32Map = v963
		v971 := make(map[int8]int64, 3)
		{
			var k972 int8 = 1
			var v973 int64 = 1
			v971[k972] = v973
			var k974 int8 = 2
			var v975 int64 = -1
			v971[k974] = v975
			var k976 int8 = 3
			var v977 int64 = 9223372036854775807
			v971[k976] = v977
		}

		CompactProtoTestStruct_COMPACTTEST.ByteI64Map = v971
		v979 := make(map[int8]float64, 3)
		{
			var k980 int8 = 1
			var v981 float64 = 0.1
			v979[k980] = v981
			var k982 int8 = 2
			var v983 float64 = -0.1
			v979[k982] = v983
			var k984 int8 = 3
			var v985 float64 = 1e+06
			v979[k984] = v985
		}

		CompactProtoTestStruct_COMPACTTEST.ByteDoubleMap = v979
		v987 := make(map[int8]string, 3)
		{
			var k988 int8 = 1
			var v989 string = ""
			v987[k988] = v989
			var k990 int8 = 2
			var v991 string = "blah"
			v987[k990] = v991
			var k992 int8 = 3
			var v993 string = "loooooooooooooong string"
			v987[k992] = v993
		}

		CompactProtoTestStruct_COMPACTTEST.ByteStringMap = v987
		v995 := make(map[int8]bool, 2)
		{
			var k996 int8 = 1
			var v997 bool = true
			v995[k996] = v997
			var k998 int8 = 2
			var v999 bool = false
			v995[k998] = v999
		}

		CompactProtoTestStruct_COMPACTTEST.ByteBooleanMap = v995
		v1001 := make(map[int8]map[int8]int8, 3)
		{
			var k1002 int8 = 0
			var v1003 map[int8]int8 = make(map[int8]int8, 0)
			{
			}

			v1001[k1002] = v1003
			var k1004 int8 = 1
			var v1005 map[int8]int8 = make(map[int8]int8, 1)
			{
				var k1006 int8 = 1
				var v1007 int8 = 1
				v1005[k1006] = v1007
			}

			v1001[k1004] = v1005
			var k1008 int8 = 2
			var v1009 map[int8]int8 = make(map[int8]int8, 2)
			{
				var k1010 int8 = 1
				var v1011 int8 = 1
				v1009[k1010] = v1011
				var k1012 int8 = 2
				var v1013 int8 = 2
				v1009[k1012] = v1013
			}

			v1001[k1008] = v1009
		}

		CompactProtoTestStruct_COMPACTTEST.ByteMapMap = v1001
		v1015 := make(map[int8]map[int8]bool, 3)
		{
			var k1016 int8 = 0
			var v1017 map[int8]bool = make(map[int8]bool, 0)
			{
			}

			v1015[k1016] = v1017
			var k1018 int8 = 1
			var v1019 map[int8]bool = make(map[int8]bool, 1)
			{
				var v1020 int8 = 1
				v1019[v1020] = true
			}

			v1015[k1018] = v1019
			var k1021 int8 = 2
			var v1022 map[int8]bool = make(map[int8]bool, 2)
			{
				var v1023 int8 = 1
				v1022[v1023] = true
				var v1024 int8 = 2
				v1022[v1024] = true
			}

			v1015[k1021] = v1022
		}

		CompactProtoTestStruct_COMPACTTEST.ByteSetMap = v1015
		v1026 := make(map[int8][]int8, 3)
		{
			var k1027 int8 = 0
			var v1028 []int8 = make([]int8, 0, 0)
			{
			}

			v1026[k1027] = v1028
			var k1030 int8 = 1
			var v1031 []int8 = make([]int8, 1, 1)
			{
				var v1032 int8
				v1032 = 1
				v1031[0] = v1032
			}

			v1026[k1030] = v1031
			var k1033 int8 = 2
			var v1034 []int8 = make([]int8, 2, 2)
			{
				var v1035 int8
				v1035 = 1
				v1034[0] = v1035
				v1035 = 2
				v1034[1] = v1035
			}

			v1026[k1033] = v1034
		}

		CompactProtoTestStruct_COMPACTTEST.ByteListMap = v1026
	}
	_MYENUMMAP = make(map[SomeEnum]SomeEnum, 1)
	{
		var k1036 SomeEnum = 1
		var v1037 SomeEnum = 2
		_MYENUMMAP[k1036] = v1037
	}

	_EXTRACRAZYMAP = make(map[SomeEnum]*StructWithSomeEnum, 1)
	{
		var k1038 SomeEnum = 1
		var v1039 *StructWithSomeEnum = NewStructWithSomeEnum()
		{
			v1039.Blah = 2
		}
		_EXTRACRAZYMAP[k1038] = v1039
	}

}
