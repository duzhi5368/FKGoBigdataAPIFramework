/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
	"flag"
	"fmt"
	"librarytest"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"thrift"
)

func Usage() {
	fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
	flag.PrintDefaults()
	fmt.Fprint(os.Stderr, "Functions:\n")
	fmt.Fprint(os.Stderr, "  Janky(arg int32) (retval1101 int32, err error)\n")
	fmt.Fprint(os.Stderr, "  voidMethod() (err error)\n")
	fmt.Fprint(os.Stderr, "  primitiveMethod() (retval1103 int32, err error)\n")
	fmt.Fprint(os.Stderr, "  structMethod() (retval1104 *CompactProtoTestStruct, err error)\n")
	fmt.Fprint(os.Stderr, "  methodWithDefaultArgs(something int32) (err error)\n")
	fmt.Fprint(os.Stderr, "  onewayMethod() (err error)\n")
	fmt.Fprint(os.Stderr, "\n")
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var help bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.BoolVar(&help, "help", false, "See usage string")
	flag.Parse()
	if help || flag.NArg() == 0 {
		flag.Usage()
	}

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprint(os.Stderr, "Error parsing URL: ", err.Error(), "\n")
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprint(os.Stderr, "Error parsing URL: ", err.Error(), "\n")
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
		if err != nil {
			fmt.Fprint(os.Stderr, "Error resolving address", err.Error())
			os.Exit(1)
		}
		trans, err = thrift.NewTNonblockingSocketAddr(addr)
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprint(os.Stderr, "Error creating transport", err.Error())
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
		Usage()
		os.Exit(1)
	}
	client := librarytest.NewSrvClientFactory(trans, protocolFactory)
	if err = trans.Open(); err != nil {
		fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.Error())
		os.Exit(1)
	}

	switch cmd {
	case "Janky":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "Janky requires 1 args\n")
			flag.Usage()
		}
		tmp0, err1107 := (strconv.Atoi(flag.Arg(1)))
		if err1107 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.Janky(value0))
		fmt.Print("\n")
		break
	case "voidMethod":
		if flag.NArg()-1 != 0 {
			fmt.Fprint(os.Stderr, "VoidMethod requires 0 args\n")
			flag.Usage()
		}
		fmt.Print(client.VoidMethod())
		fmt.Print("\n")
		break
	case "primitiveMethod":
		if flag.NArg()-1 != 0 {
			fmt.Fprint(os.Stderr, "PrimitiveMethod requires 0 args\n")
			flag.Usage()
		}
		fmt.Print(client.PrimitiveMethod())
		fmt.Print("\n")
		break
	case "structMethod":
		if flag.NArg()-1 != 0 {
			fmt.Fprint(os.Stderr, "StructMethod requires 0 args\n")
			flag.Usage()
		}
		fmt.Print(client.StructMethod())
		fmt.Print("\n")
		break
	case "methodWithDefaultArgs":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "MethodWithDefaultArgs requires 1 args\n")
			flag.Usage()
		}
		tmp0, err1108 := (strconv.Atoi(flag.Arg(1)))
		if err1108 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.MethodWithDefaultArgs(value0))
		fmt.Print("\n")
		break
	case "onewayMethod":
		if flag.NArg()-1 != 0 {
			fmt.Fprint(os.Stderr, "OnewayMethod requires 0 args\n")
			flag.Usage()
		}
		fmt.Print(client.OnewayMethod())
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
	}
}
