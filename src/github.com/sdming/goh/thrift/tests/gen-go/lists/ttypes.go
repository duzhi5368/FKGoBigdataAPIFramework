/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package lists

import (
	"fmt"
	"github.com/apesternikov/thrift4go/lib/go/src/thrift"
	"math"
)

// This is a temporary safety measure to ensure that the `math'
// import does not trip up any generated output that may not
// happen to use the math import due to not having emited enums.
//
// Future clean-ups will deprecate the need for this.
var _ = fmt.Print
var _ = math.MinInt32

/**
 * Attributes:
 *  - Ifield
 */
type Intstruct struct {
	Ifield int32 "ifield" // 1
}

var tstructIntstruct = thrift.NewTStruct("intstruct", []thrift.TField{
	thrift.NewTField("ifield", thrift.I32, 1),
})

func (*Intstruct) GetTStruct() thrift.TStruct { return tstructIntstruct }
func NewIntstruct() *Intstruct {
	output := &Intstruct{}
	{
	}
	return output
}

func (p *Intstruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIntstruct.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIntstruct.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Intstruct) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v0, err1 := iprot.ReadI32()
	if err1 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "ifield", p.ThriftName(), err1)
	}
	p.Ifield = v0
	return err
}

func (p *Intstruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("intstruct")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Intstruct) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("ifield", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "ifield", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Ifield))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "ifield", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "ifield", p.ThriftName(), err)
	}
	return err
}

func (p *Intstruct) TStructName() string {
	return "Intstruct"
}

func (p *Intstruct) ThriftName() string {
	return "intstruct"
}

func (p *Intstruct) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Ifield
	}
	return nil
}

func (p *Intstruct) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ifield", thrift.I32, 1),
	})
}

/**
 * Attributes:
 *  - Bytelist
 *  - I16list
 *  - I32list
 *  - Stringlist
 *  - Structlist
 *  - Listoflist
 *  - Optionalint
 */
type Manylists struct {
	Bytelist    []int8       "bytelist"    // 1
	I16list     []int16      "i16list"     // 2
	I32list     []int32      "i32list"     // 3
	Stringlist  []string     "stringlist"  // 4
	Structlist  []*Intstruct "structlist"  // 5
	Listoflist  [][]int32    "listoflist"  // 6
	Optionalint int32        "optionalint" // 7
}

var tstructManylists = thrift.NewTStruct("manylists", []thrift.TField{
	thrift.NewTField("bytelist", thrift.LIST, 1),
	thrift.NewTField("i16list", thrift.LIST, 2),
	thrift.NewTField("i32list", thrift.LIST, 3),
	thrift.NewTField("stringlist", thrift.LIST, 4),
	thrift.NewTField("structlist", thrift.LIST, 5),
	thrift.NewTField("listoflist", thrift.LIST, 6),
	thrift.NewTField("optionalint", thrift.I32, 7),
})

func (*Manylists) GetTStruct() thrift.TStruct { return tstructManylists }
func NewManylists() *Manylists {
	output := &Manylists{}
	{
		output.I16list = make([]int16, 3, 3)
		{
			var v2 int16
			v2 = 1
			output.I16list[0] = v2
			v2 = 2
			output.I16list[1] = v2
			v2 = 3
			output.I16list[2] = v2
		}

		output.I32list = make([]int32, 3, 3)
		{
			var v3 int32
			v3 = 1
			output.I32list[0] = v3
			v3 = 2
			output.I32list[1] = v3
			v3 = 3
			output.I32list[2] = v3
		}

		output.Stringlist = make([]string, 3, 3)
		{
			var v4 string
			v4 = "one"
			output.Stringlist[0] = v4
			v4 = "two"
			output.Stringlist[1] = v4
			v4 = "three"
			output.Stringlist[2] = v4
		}

		output.Structlist = make([]*Intstruct, 3, 3)
		{
			var v5 *Intstruct
			v5 = NewIntstruct()
			{
				v5.Ifield = 1
			}
			output.Structlist[0] = v5
			v5 = NewIntstruct()
			{
				v5.Ifield = 2
			}
			output.Structlist[1] = v5
			v5 = NewIntstruct()
			{
				v5.Ifield = 3
			}
			output.Structlist[2] = v5
		}

		output.Optionalint = 2
	}
	return output
}

func (p *Manylists) IsSetI16list() bool {
	return p.I16list != nil
}

func (p *Manylists) IsSetOptionalint() bool {
	return p.Optionalint != 2
}

func (p *Manylists) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructManylists.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructManylists.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //
			if fieldTypeId == thrift.LIST {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.LIST {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.LIST {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //
			if fieldTypeId == thrift.LIST {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 7: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Manylists) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype11, _size8, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Bytelist", "", err)
	}
	_ = _etype11
	p.Bytelist = make([]int8, _size8, _size8)
	for i := 0; i < _size8; i++ {
		v14, err15 := iprot.ReadByte()
		if err15 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem13", "", err15)
		}
		_elem13 := v14
		p.Bytelist[i] = _elem13
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *Manylists) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype21, _size18, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I16list", "", err)
	}
	_ = _etype21
	p.I16list = make([]int16, _size18, _size18)
	for i := 0; i < _size18; i++ {
		v24, err25 := iprot.ReadI16()
		if err25 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem23", "", err25)
		}
		_elem23 := v24
		p.I16list[i] = _elem23
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *Manylists) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype31, _size28, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32list", "", err)
	}
	_ = _etype31
	p.I32list = make([]int32, _size28, _size28)
	for i := 0; i < _size28; i++ {
		v34, err35 := iprot.ReadI32()
		if err35 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem33", "", err35)
		}
		_elem33 := v34
		p.I32list[i] = _elem33
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *Manylists) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype41, _size38, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Stringlist", "", err)
	}
	_ = _etype41
	p.Stringlist = make([]string, _size38, _size38)
	for i := 0; i < _size38; i++ {
		v44, err45 := iprot.ReadString()
		if err45 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem43", "", err45)
		}
		_elem43 := v44
		p.Stringlist[i] = _elem43
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *Manylists) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype51, _size48, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Structlist", "", err)
	}
	_ = _etype51
	p.Structlist = make([]*Intstruct, _size48, _size48)
	for i := 0; i < _size48; i++ {
		_elem53 := NewIntstruct()
		err56 := _elem53.Read(iprot)
		if err56 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem53intstruct", err56)
		}
		p.Structlist[i] = _elem53
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *Manylists) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype62, _size59, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Listoflist", "", err)
	}
	_ = _etype62
	p.Listoflist = make([][]int32, _size59, _size59)
	for i := 0; i < _size59; i++ {
		_etype70, _size67, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_elem64", "", err)
		}
		_ = _etype70
		_elem64 := make([]int32, _size67, _size67)
		for i := 0; i < _size67; i++ {
			v73, err74 := iprot.ReadI32()
			if err74 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_elem72", "", err74)
			}
			_elem72 := v73
			_elem64[i] = _elem72
		}
		err = iprot.ReadListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
		}
		p.Listoflist[i] = _elem64
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *Manylists) readField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v75, err76 := iprot.ReadI32()
	if err76 != nil {
		return thrift.NewTProtocolExceptionReadField(7, "optionalint", p.ThriftName(), err76)
	}
	p.Optionalint = v75
	return err
}

func (p *Manylists) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("manylists")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = p.writeField7(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Manylists) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Bytelist != nil {
		err = oprot.WriteFieldBegin("bytelist", thrift.LIST, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "bytelist", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BYTE, len(p.Bytelist))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter77 := range p.Bytelist {
			err = oprot.WriteByte(int8(Iter77))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter77", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "bytelist", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Manylists) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I16list != nil {
		if p.IsSetI16list() {
			err = oprot.WriteFieldBegin("i16list", thrift.LIST, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "i16list", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.I16, len(p.I16list))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for _, Iter78 := range p.I16list {
				err = oprot.WriteI16(int16(Iter78))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter78", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "i16list", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *Manylists) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32list != nil {
		err = oprot.WriteFieldBegin("i32list", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "i32list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.I32, len(p.I32list))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter79 := range p.I32list {
			err = oprot.WriteI32(int32(Iter79))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter79", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "i32list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Manylists) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Stringlist != nil {
		err = oprot.WriteFieldBegin("stringlist", thrift.LIST, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "stringlist", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Stringlist))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter80 := range p.Stringlist {
			err = oprot.WriteString(Iter80)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter80", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "stringlist", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Manylists) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Structlist != nil {
		err = oprot.WriteFieldBegin("structlist", thrift.LIST, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "structlist", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Structlist))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter81 := range p.Structlist {
			err = Iter81.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("intstruct", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "structlist", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Manylists) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Listoflist != nil {
		err = oprot.WriteFieldBegin("listoflist", thrift.LIST, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "listoflist", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.LIST, len(p.Listoflist))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter82 := range p.Listoflist {
			err = oprot.WriteListBegin(thrift.I32, len(Iter82))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for _, Iter83 := range Iter82 {
				err = oprot.WriteI32(int32(Iter83))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter83", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "listoflist", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Manylists) writeField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetOptionalint() {
		err = oprot.WriteFieldBegin("optionalint", thrift.I32, 7)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "optionalint", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Optionalint))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "optionalint", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "optionalint", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Manylists) TStructName() string {
	return "Manylists"
}

func (p *Manylists) ThriftName() string {
	return "manylists"
}

func (p *Manylists) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Bytelist
	case 2:
		return p.I16list
	case 3:
		return p.I32list
	case 4:
		return p.Stringlist
	case 5:
		return p.Structlist
	case 6:
		return p.Listoflist
	case 7:
		return p.Optionalint
	}
	return nil
}

func (p *Manylists) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("bytelist", thrift.LIST, 1),
		thrift.NewTField("i16list", thrift.LIST, 2),
		thrift.NewTField("i32list", thrift.LIST, 3),
		thrift.NewTField("stringlist", thrift.LIST, 4),
		thrift.NewTField("structlist", thrift.LIST, 5),
		thrift.NewTField("listoflist", thrift.LIST, 6),
		thrift.NewTField("optionalint", thrift.I32, 7),
	})
}

var Manylists_MANYLISTITEM *Manylists

func init() {
	Manylists_MANYLISTITEM = NewManylists()
	{
		v85 := make([]int8, 3, 3)
		{
			var v86 int8
			v86 = 5
			v85[0] = v86
			v86 = 6
			v85[1] = v86
			v86 = 7
			v85[2] = v86
		}

		Manylists_MANYLISTITEM.Bytelist = v85
		v88 := make([]int16, 3, 3)
		{
			var v89 int16
			v89 = 5
			v88[0] = v89
			v89 = 6
			v88[1] = v89
			v89 = 7
			v88[2] = v89
		}

		Manylists_MANYLISTITEM.I16list = v88
		v91 := make([]int32, 3, 3)
		{
			var v92 int32
			v92 = 5
			v91[0] = v92
			v92 = 6
			v91[1] = v92
			v92 = 7
			v91[2] = v92
		}

		Manylists_MANYLISTITEM.I32list = v91
		v94 := make([]string, 3, 3)
		{
			var v95 string
			v95 = "five"
			v94[0] = v95
			v95 = "six"
			v94[1] = v95
			v95 = "seven"
			v94[2] = v95
		}

		Manylists_MANYLISTITEM.Stringlist = v94
		v97 := make([]*Intstruct, 3, 3)
		{
			var v98 *Intstruct
			v98 = NewIntstruct()
			{
				v98.Ifield = 5
			}
			v97[0] = v98
			v98 = NewIntstruct()
			{
				v98.Ifield = 6
			}
			v97[1] = v98
			v98 = NewIntstruct()
			{
				v98.Ifield = 7
			}
			v97[2] = v98
		}

		Manylists_MANYLISTITEM.Structlist = v97
	}
}
