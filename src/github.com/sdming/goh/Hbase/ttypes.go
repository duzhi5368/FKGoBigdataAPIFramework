/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package Hbase

import (
	"fmt"
	"github.com/sdming/goh/thrift"
	"math"
)

// This is a temporary safety measure to ensure that the `math'
// import does not trip up any generated output that may not
// happen to use the math import due to not having emited enums.
//
// Future clean-ups will deprecate the need for this.
var _ = fmt.Print
var _ = math.MinInt32

type Text []byte

type Bytes []byte

type ScannerID int32

/**
 * TCell - Used to transport a cell value (byte[]) and the timestamp it was
 * stored with together as a result for get and getRow methods. This promotes
 * the timestamp of a cell to a first-class value, making it easy to take
 * note of temporal data. Cell is used all the way from HStore up to HTable.
 * 
 * Attributes:
 *  - Value
 *  - Timestamp
 */
type TCell struct {
	Value     Bytes "value"     // 1
	Timestamp int64 "timestamp" // 2
}

var tstructTCell = thrift.NewTStruct("TCell", []thrift.TField{
	thrift.NewTField("value", thrift.STRING, 1),
	thrift.NewTField("timestamp", thrift.I64, 2),
})

func (*TCell) GetTStruct() thrift.TStruct { return tstructTCell }
func NewTCell() *TCell {
	output := &TCell{}
	{
	}
	return output
}

func (p *TCell) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructTCell.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructTCell.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Bytes
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TCell) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v0, err1 := iprot.ReadBinary()
	if err1 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "value", p.ThriftName(), err1)
	}
	p.Value = Bytes(v0)
	return err
}

func (p *TCell) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v2, err3 := iprot.ReadI64()
	if err3 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "timestamp", p.ThriftName(), err3)
	}
	p.Timestamp = v2
	return err
}

func (p *TCell) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TCell")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TCell) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Value != nil {
		err = oprot.WriteFieldBegin("value", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "value", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Value)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "value", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "value", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TCell) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *TCell) TStructName() string {
	return "TCell"
}

func (p *TCell) ThriftName() string {
	return "TCell"
}

func (p *TCell) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Value
	case 2:
		return p.Timestamp
	}
	return nil
}

func (p *TCell) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("value", thrift.STRING, 1),
		thrift.NewTField("timestamp", thrift.I64, 2),
	})
}

/**
 * An HColumnDescriptor contains information about a column family
 * such as the number of versions, compression settings, etc. It is
 * used as input when creating a table or adding a column.
 * 
 * Attributes:
 *  - Name
 *  - MaxVersions
 *  - Compression
 *  - InMemory
 *  - BloomFilterType
 *  - BloomFilterVectorSize
 *  - BloomFilterNbHashes
 *  - BlockCacheEnabled
 *  - TimeToLive
 */
type ColumnDescriptor struct {
	Name                  Text   "name"                  // 1
	MaxVersions           int32  "maxVersions"           // 2
	Compression           string "compression"           // 3
	InMemory              bool   "inMemory"              // 4
	BloomFilterType       string "bloomFilterType"       // 5
	BloomFilterVectorSize int32  "bloomFilterVectorSize" // 6
	BloomFilterNbHashes   int32  "bloomFilterNbHashes"   // 7
	BlockCacheEnabled     bool   "blockCacheEnabled"     // 8
	TimeToLive            int32  "timeToLive"            // 9
}

var tstructColumnDescriptor = thrift.NewTStruct("ColumnDescriptor", []thrift.TField{
	thrift.NewTField("name", thrift.STRING, 1),
	thrift.NewTField("maxVersions", thrift.I32, 2),
	thrift.NewTField("compression", thrift.STRING, 3),
	thrift.NewTField("inMemory", thrift.BOOL, 4),
	thrift.NewTField("bloomFilterType", thrift.STRING, 5),
	thrift.NewTField("bloomFilterVectorSize", thrift.I32, 6),
	thrift.NewTField("bloomFilterNbHashes", thrift.I32, 7),
	thrift.NewTField("blockCacheEnabled", thrift.BOOL, 8),
	thrift.NewTField("timeToLive", thrift.I32, 9),
})

func (*ColumnDescriptor) GetTStruct() thrift.TStruct { return tstructColumnDescriptor }
func NewColumnDescriptor() *ColumnDescriptor {
	output := &ColumnDescriptor{}
	{
		output.MaxVersions = 3
		output.Compression = "NONE"
		output.InMemory = false
		output.BloomFilterType = "NONE"
		output.BloomFilterVectorSize = 0
		output.BloomFilterNbHashes = 0
		output.BlockCacheEnabled = false
		output.TimeToLive = -1
	}
	return output
}

func (p *ColumnDescriptor) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructColumnDescriptor.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructColumnDescriptor.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //bool
			if fieldTypeId == thrift.BOOL {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 7: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 8: //bool
			if fieldTypeId == thrift.BOOL {
				err = p.readField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 9: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField9(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v4, err5 := iprot.ReadBinary()
	if err5 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err5)
	}
	p.Name = Text(v4)
	return err
}

func (p *ColumnDescriptor) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v6, err7 := iprot.ReadI32()
	if err7 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "maxVersions", p.ThriftName(), err7)
	}
	p.MaxVersions = v6
	return err
}

func (p *ColumnDescriptor) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v8, err9 := iprot.ReadString()
	if err9 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "compression", p.ThriftName(), err9)
	}
	p.Compression = v8
	return err
}

func (p *ColumnDescriptor) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v10, err11 := iprot.ReadBool()
	if err11 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "inMemory", p.ThriftName(), err11)
	}
	p.InMemory = v10
	return err
}

func (p *ColumnDescriptor) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v12, err13 := iprot.ReadString()
	if err13 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "bloomFilterType", p.ThriftName(), err13)
	}
	p.BloomFilterType = v12
	return err
}

func (p *ColumnDescriptor) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v14, err15 := iprot.ReadI32()
	if err15 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "bloomFilterVectorSize", p.ThriftName(), err15)
	}
	p.BloomFilterVectorSize = v14
	return err
}

func (p *ColumnDescriptor) readField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v16, err17 := iprot.ReadI32()
	if err17 != nil {
		return thrift.NewTProtocolExceptionReadField(7, "bloomFilterNbHashes", p.ThriftName(), err17)
	}
	p.BloomFilterNbHashes = v16
	return err
}

func (p *ColumnDescriptor) readField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v18, err19 := iprot.ReadBool()
	if err19 != nil {
		return thrift.NewTProtocolExceptionReadField(8, "blockCacheEnabled", p.ThriftName(), err19)
	}
	p.BlockCacheEnabled = v18
	return err
}

func (p *ColumnDescriptor) readField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v20, err21 := iprot.ReadI32()
	if err21 != nil {
		return thrift.NewTProtocolExceptionReadField(9, "timeToLive", p.ThriftName(), err21)
	}
	p.TimeToLive = v20
	return err
}

func (p *ColumnDescriptor) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("ColumnDescriptor")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = p.writeField7(oprot)
	if err != nil {
		return err
	}
	err = p.writeField8(oprot)
	if err != nil {
		return err
	}
	err = p.writeField9(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Name != nil {
		err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Name)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ColumnDescriptor) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("maxVersions", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "maxVersions", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.MaxVersions))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "maxVersions", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "maxVersions", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("compression", thrift.STRING, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "compression", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Compression)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "compression", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "compression", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("inMemory", thrift.BOOL, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "inMemory", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.InMemory))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "inMemory", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "inMemory", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("bloomFilterType", thrift.STRING, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "bloomFilterType", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.BloomFilterType)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "bloomFilterType", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "bloomFilterType", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("bloomFilterVectorSize", thrift.I32, 6)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "bloomFilterVectorSize", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.BloomFilterVectorSize))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "bloomFilterVectorSize", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "bloomFilterVectorSize", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) writeField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("bloomFilterNbHashes", thrift.I32, 7)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "bloomFilterNbHashes", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.BloomFilterNbHashes))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "bloomFilterNbHashes", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "bloomFilterNbHashes", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) writeField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("blockCacheEnabled", thrift.BOOL, 8)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "blockCacheEnabled", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.BlockCacheEnabled))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "blockCacheEnabled", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "blockCacheEnabled", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) writeField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timeToLive", thrift.I32, 9)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "timeToLive", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.TimeToLive))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "timeToLive", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "timeToLive", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDescriptor) TStructName() string {
	return "ColumnDescriptor"
}

func (p *ColumnDescriptor) ThriftName() string {
	return "ColumnDescriptor"
}

func (p *ColumnDescriptor) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Name
	case 2:
		return p.MaxVersions
	case 3:
		return p.Compression
	case 4:
		return p.InMemory
	case 5:
		return p.BloomFilterType
	case 6:
		return p.BloomFilterVectorSize
	case 7:
		return p.BloomFilterNbHashes
	case 8:
		return p.BlockCacheEnabled
	case 9:
		return p.TimeToLive
	}
	return nil
}

func (p *ColumnDescriptor) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("name", thrift.STRING, 1),
		thrift.NewTField("maxVersions", thrift.I32, 2),
		thrift.NewTField("compression", thrift.STRING, 3),
		thrift.NewTField("inMemory", thrift.BOOL, 4),
		thrift.NewTField("bloomFilterType", thrift.STRING, 5),
		thrift.NewTField("bloomFilterVectorSize", thrift.I32, 6),
		thrift.NewTField("bloomFilterNbHashes", thrift.I32, 7),
		thrift.NewTField("blockCacheEnabled", thrift.BOOL, 8),
		thrift.NewTField("timeToLive", thrift.I32, 9),
	})
}

/**
 * A TRegionInfo contains information about an HTable region.
 * 
 * Attributes:
 *  - StartKey
 *  - EndKey
 *  - Id
 *  - Name
 *  - Version
 *  - ServerName
 *  - Port
 */
type TRegionInfo struct {
	StartKey   Text  "startKey"   // 1
	EndKey     Text  "endKey"     // 2
	Id         int64 "id"         // 3
	Name       Text  "name"       // 4
	Version    int8  "version"    // 5
	ServerName Text  "serverName" // 6
	Port       int32 "port"       // 7
}

var tstructTRegionInfo = thrift.NewTStruct("TRegionInfo", []thrift.TField{
	thrift.NewTField("startKey", thrift.STRING, 1),
	thrift.NewTField("endKey", thrift.STRING, 2),
	thrift.NewTField("id", thrift.I64, 3),
	thrift.NewTField("name", thrift.STRING, 4),
	thrift.NewTField("version", thrift.BYTE, 5),
	thrift.NewTField("serverName", thrift.STRING, 6),
	thrift.NewTField("port", thrift.I32, 7),
})

func (*TRegionInfo) GetTStruct() thrift.TStruct { return tstructTRegionInfo }
func NewTRegionInfo() *TRegionInfo {
	output := &TRegionInfo{}
	{
	}
	return output
}

func (p *TRegionInfo) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructTRegionInfo.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructTRegionInfo.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //byte
			if fieldTypeId == thrift.BYTE {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 7: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TRegionInfo) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v22, err23 := iprot.ReadBinary()
	if err23 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "startKey", p.ThriftName(), err23)
	}
	p.StartKey = Text(v22)
	return err
}

func (p *TRegionInfo) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v24, err25 := iprot.ReadBinary()
	if err25 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "endKey", p.ThriftName(), err25)
	}
	p.EndKey = Text(v24)
	return err
}

func (p *TRegionInfo) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v26, err27 := iprot.ReadI64()
	if err27 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "id", p.ThriftName(), err27)
	}
	p.Id = v26
	return err
}

func (p *TRegionInfo) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v28, err29 := iprot.ReadBinary()
	if err29 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "name", p.ThriftName(), err29)
	}
	p.Name = Text(v28)
	return err
}

func (p *TRegionInfo) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v30, err31 := iprot.ReadByte()
	if err31 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "version", p.ThriftName(), err31)
	}
	p.Version = v30
	return err
}

func (p *TRegionInfo) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v32, err33 := iprot.ReadBinary()
	if err33 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "serverName", p.ThriftName(), err33)
	}
	p.ServerName = Text(v32)
	return err
}

func (p *TRegionInfo) readField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v34, err35 := iprot.ReadI32()
	if err35 != nil {
		return thrift.NewTProtocolExceptionReadField(7, "port", p.ThriftName(), err35)
	}
	p.Port = v34
	return err
}

func (p *TRegionInfo) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TRegionInfo")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = p.writeField7(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TRegionInfo) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartKey != nil {
		err = oprot.WriteFieldBegin("startKey", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "startKey", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartKey)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "startKey", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "startKey", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TRegionInfo) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.EndKey != nil {
		err = oprot.WriteFieldBegin("endKey", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "endKey", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.EndKey)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "endKey", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "endKey", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TRegionInfo) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("id", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "id", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Id))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "id", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "id", p.ThriftName(), err)
	}
	return err
}

func (p *TRegionInfo) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Name != nil {
		err = oprot.WriteFieldBegin("name", thrift.STRING, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "name", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Name)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TRegionInfo) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("version", thrift.BYTE, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "version", p.ThriftName(), err)
	}
	err = oprot.WriteByte(int8(p.Version))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "version", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "version", p.ThriftName(), err)
	}
	return err
}

func (p *TRegionInfo) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ServerName != nil {
		err = oprot.WriteFieldBegin("serverName", thrift.STRING, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "serverName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.ServerName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "serverName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "serverName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TRegionInfo) writeField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("port", thrift.I32, 7)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "port", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Port))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "port", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "port", p.ThriftName(), err)
	}
	return err
}

func (p *TRegionInfo) TStructName() string {
	return "TRegionInfo"
}

func (p *TRegionInfo) ThriftName() string {
	return "TRegionInfo"
}

func (p *TRegionInfo) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.StartKey
	case 2:
		return p.EndKey
	case 3:
		return p.Id
	case 4:
		return p.Name
	case 5:
		return p.Version
	case 6:
		return p.ServerName
	case 7:
		return p.Port
	}
	return nil
}

func (p *TRegionInfo) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("startKey", thrift.STRING, 1),
		thrift.NewTField("endKey", thrift.STRING, 2),
		thrift.NewTField("id", thrift.I64, 3),
		thrift.NewTField("name", thrift.STRING, 4),
		thrift.NewTField("version", thrift.BYTE, 5),
		thrift.NewTField("serverName", thrift.STRING, 6),
		thrift.NewTField("port", thrift.I32, 7),
	})
}

/**
 * A Mutation object is used to either update or delete a column-value.
 * 
 * Attributes:
 *  - IsDelete
 *  - Column
 *  - Value
 *  - WriteToWAL
 */
type Mutation struct {
	IsDelete   bool "isDelete"   // 1
	Column     Text "column"     // 2
	Value      Text "value"      // 3
	WriteToWAL bool "writeToWAL" // 4
}

var tstructMutation = thrift.NewTStruct("Mutation", []thrift.TField{
	thrift.NewTField("isDelete", thrift.BOOL, 1),
	thrift.NewTField("column", thrift.STRING, 2),
	thrift.NewTField("value", thrift.STRING, 3),
	thrift.NewTField("writeToWAL", thrift.BOOL, 4),
})

func (*Mutation) GetTStruct() thrift.TStruct { return tstructMutation }
func NewMutation() *Mutation {
	output := &Mutation{}
	{
		output.IsDelete = false
		output.WriteToWAL = true
	}
	return output
}

func (p *Mutation) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutation.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutation.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //bool
			if fieldTypeId == thrift.BOOL {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //bool
			if fieldTypeId == thrift.BOOL {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Mutation) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v36, err37 := iprot.ReadBool()
	if err37 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "isDelete", p.ThriftName(), err37)
	}
	p.IsDelete = v36
	return err
}

func (p *Mutation) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v38, err39 := iprot.ReadBinary()
	if err39 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "column", p.ThriftName(), err39)
	}
	p.Column = Text(v38)
	return err
}

func (p *Mutation) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v40, err41 := iprot.ReadBinary()
	if err41 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "value", p.ThriftName(), err41)
	}
	p.Value = Text(v40)
	return err
}

func (p *Mutation) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v42, err43 := iprot.ReadBool()
	if err43 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "writeToWAL", p.ThriftName(), err43)
	}
	p.WriteToWAL = v42
	return err
}

func (p *Mutation) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Mutation")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Mutation) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("isDelete", thrift.BOOL, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "isDelete", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.IsDelete))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "isDelete", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "isDelete", p.ThriftName(), err)
	}
	return err
}

func (p *Mutation) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Mutation) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Value != nil {
		err = oprot.WriteFieldBegin("value", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Value)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Mutation) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("writeToWAL", thrift.BOOL, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "writeToWAL", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.WriteToWAL))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "writeToWAL", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "writeToWAL", p.ThriftName(), err)
	}
	return err
}

func (p *Mutation) TStructName() string {
	return "Mutation"
}

func (p *Mutation) ThriftName() string {
	return "Mutation"
}

func (p *Mutation) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.IsDelete
	case 2:
		return p.Column
	case 3:
		return p.Value
	case 4:
		return p.WriteToWAL
	}
	return nil
}

func (p *Mutation) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("isDelete", thrift.BOOL, 1),
		thrift.NewTField("column", thrift.STRING, 2),
		thrift.NewTField("value", thrift.STRING, 3),
		thrift.NewTField("writeToWAL", thrift.BOOL, 4),
	})
}

/**
 * A BatchMutation object is used to apply a number of Mutations to a single row.
 * 
 * Attributes:
 *  - Row
 *  - Mutations
 */
type BatchMutation struct {
	Row       Text        "row"       // 1
	Mutations []*Mutation "mutations" // 2
}

var tstructBatchMutation = thrift.NewTStruct("BatchMutation", []thrift.TField{
	thrift.NewTField("row", thrift.STRING, 1),
	thrift.NewTField("mutations", thrift.LIST, 2),
})

func (*BatchMutation) GetTStruct() thrift.TStruct { return tstructBatchMutation }
func NewBatchMutation() *BatchMutation {
	output := &BatchMutation{}
	{
	}
	return output
}

func (p *BatchMutation) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructBatchMutation.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructBatchMutation.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BatchMutation) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v44, err45 := iprot.ReadBinary()
	if err45 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "row", p.ThriftName(), err45)
	}
	p.Row = Text(v44)
	return err
}

func (p *BatchMutation) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype51, _size48, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Mutations", "", err)
	}
	_ = _etype51
	p.Mutations = make([]*Mutation, _size48, _size48)
	for i := 0; i < _size48; i++ {
		_elem53 := NewMutation()
		err56 := _elem53.Read(iprot)
		if err56 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem53Mutation", err56)
		}
		p.Mutations[i] = _elem53
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *BatchMutation) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("BatchMutation")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BatchMutation) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BatchMutation) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Mutations != nil {
		err = oprot.WriteFieldBegin("mutations", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "mutations", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Mutations))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter57 := range p.Mutations {
			err = Iter57.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Mutation", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "mutations", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BatchMutation) TStructName() string {
	return "BatchMutation"
}

func (p *BatchMutation) ThriftName() string {
	return "BatchMutation"
}

func (p *BatchMutation) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Row
	case 2:
		return p.Mutations
	}
	return nil
}

func (p *BatchMutation) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("row", thrift.STRING, 1),
		thrift.NewTField("mutations", thrift.LIST, 2),
	})
}

/**
 * For increments that are not incrementColumnValue
 * equivalents.
 * 
 * Attributes:
 *  - Table
 *  - Row
 *  - Column
 *  - Ammount
 */
type TIncrement struct {
	Table   Text  "table"   // 1
	Row     Text  "row"     // 2
	Column  Text  "column"  // 3
	Ammount int64 "ammount" // 4
}

var tstructTIncrement = thrift.NewTStruct("TIncrement", []thrift.TField{
	thrift.NewTField("table", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("column", thrift.STRING, 3),
	thrift.NewTField("ammount", thrift.I64, 4),
})

func (*TIncrement) GetTStruct() thrift.TStruct { return tstructTIncrement }
func NewTIncrement() *TIncrement {
	output := &TIncrement{}
	{
	}
	return output
}

func (p *TIncrement) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructTIncrement.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructTIncrement.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TIncrement) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v58, err59 := iprot.ReadBinary()
	if err59 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "table", p.ThriftName(), err59)
	}
	p.Table = Text(v58)
	return err
}

func (p *TIncrement) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v60, err61 := iprot.ReadBinary()
	if err61 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err61)
	}
	p.Row = Text(v60)
	return err
}

func (p *TIncrement) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v62, err63 := iprot.ReadBinary()
	if err63 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err63)
	}
	p.Column = Text(v62)
	return err
}

func (p *TIncrement) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v64, err65 := iprot.ReadI64()
	if err65 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "ammount", p.ThriftName(), err65)
	}
	p.Ammount = v64
	return err
}

func (p *TIncrement) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TIncrement")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TIncrement) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Table != nil {
		err = oprot.WriteFieldBegin("table", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Table)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "table", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TIncrement) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TIncrement) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TIncrement) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("ammount", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "ammount", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Ammount))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "ammount", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "ammount", p.ThriftName(), err)
	}
	return err
}

func (p *TIncrement) TStructName() string {
	return "TIncrement"
}

func (p *TIncrement) ThriftName() string {
	return "TIncrement"
}

func (p *TIncrement) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Table
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Ammount
	}
	return nil
}

func (p *TIncrement) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("table", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("column", thrift.STRING, 3),
		thrift.NewTField("ammount", thrift.I64, 4),
	})
}

/**
 * Holds row name and then a map of columns to cells.
 * 
 * Attributes:
 *  - Row
 *  - Columns
 */
type TRowResult struct {
	Row     Text              "row"     // 1
	Columns map[string]*TCell "columns" // 2
}

var tstructTRowResult = thrift.NewTStruct("TRowResult", []thrift.TField{
	thrift.NewTField("row", thrift.STRING, 1),
	thrift.NewTField("columns", thrift.MAP, 2),
})

func (*TRowResult) GetTStruct() thrift.TStruct { return tstructTRowResult }
func NewTRowResult() *TRowResult {
	output := &TRowResult{}
	{
	}
	return output
}

func (p *TRowResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructTRowResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructTRowResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.MAP {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TRowResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v66, err67 := iprot.ReadBinary()
	if err67 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "row", p.ThriftName(), err67)
	}
	p.Row = Text(v66)
	return err
}

func (p *TRowResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype71, _vtype72, _size70, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_, _ = _ktype71, _vtype72
	p.Columns = make(map[string]*TCell, _size70)
	for i := 0; i < _size70; i++ {
		v77, err78 := iprot.ReadString()
		if err78 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key75", "", err78)
		}
		_key75 := v77
		_val76 := NewTCell()
		err81 := _val76.Read(iprot)
		if err81 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_val76TCell", err81)
		}
		p.Columns[_key75] = _val76
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *TRowResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TRowResult")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TRowResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TRowResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.MAP, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter82, Viter83 := range p.Columns {
			err = oprot.WriteString(Kiter82)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter82", "", err)
			}
			err = Viter83.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TCell", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TRowResult) TStructName() string {
	return "TRowResult"
}

func (p *TRowResult) ThriftName() string {
	return "TRowResult"
}

func (p *TRowResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Row
	case 2:
		return p.Columns
	}
	return nil
}

func (p *TRowResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("row", thrift.STRING, 1),
		thrift.NewTField("columns", thrift.MAP, 2),
	})
}

/**
 * A Scan object is used to specify scanner parameters when opening a scanner.
 * 
 * Attributes:
 *  - StartRow
 *  - StopRow
 *  - Timestamp
 *  - Columns
 *  - Caching
 *  - FilterString
 */
type TScan struct {
	StartRow     Text   "startRow"     // 1
	StopRow      Text   "stopRow"      // 2
	Timestamp    int64  "timestamp"    // 3
	Columns      []Text "columns"      // 4
	Caching      int32  "caching"      // 5
	FilterString Text   "filterString" // 6
}

var tstructTScan = thrift.NewTStruct("TScan", []thrift.TField{
	thrift.NewTField("startRow", thrift.STRING, 1),
	thrift.NewTField("stopRow", thrift.STRING, 2),
	thrift.NewTField("timestamp", thrift.I64, 3),
	thrift.NewTField("columns", thrift.LIST, 4),
	thrift.NewTField("caching", thrift.I32, 5),
	thrift.NewTField("filterString", thrift.STRING, 6),
})

func (*TScan) GetTStruct() thrift.TStruct { return tstructTScan }
func NewTScan() *TScan {
	output := &TScan{}
	{
	}
	return output
}

func (p *TScan) IsSetStartRow() bool {
	return p.StartRow != nil
}

func (p *TScan) IsSetStopRow() bool {
	return p.StopRow != nil
}

func (p *TScan) IsSetTimestamp() bool {
	return p.Timestamp != 0
}

func (p *TScan) IsSetColumns() bool {
	return len(p.Columns) > 0
}

func (p *TScan) IsSetCaching() bool {
	return p.Caching != 0
}

func (p *TScan) IsSetFilterString() bool {
	return p.FilterString != nil
}

func (p *TScan) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructTScan.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructTScan.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.LIST {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TScan) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v84, err85 := iprot.ReadBinary()
	if err85 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "startRow", p.ThriftName(), err85)
	}
	p.StartRow = Text(v84)
	return err
}

func (p *TScan) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v86, err87 := iprot.ReadBinary()
	if err87 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "stopRow", p.ThriftName(), err87)
	}
	p.StopRow = Text(v86)
	return err
}

func (p *TScan) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v88, err89 := iprot.ReadI64()
	if err89 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err89)
	}
	p.Timestamp = v88
	return err
}

func (p *TScan) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype95, _size92, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype95
	p.Columns = make([]Text, _size92, _size92)
	for i := 0; i < _size92; i++ {
		v98, err99 := iprot.ReadBinary()
		if err99 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem97", "", err99)
		}
		_elem97 := Text(v98)
		p.Columns[i] = _elem97
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *TScan) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v100, err101 := iprot.ReadI32()
	if err101 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "caching", p.ThriftName(), err101)
	}
	p.Caching = v100
	return err
}

func (p *TScan) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v102, err103 := iprot.ReadBinary()
	if err103 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "filterString", p.ThriftName(), err103)
	}
	p.FilterString = Text(v102)
	return err
}

func (p *TScan) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TScan")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TScan) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartRow != nil {
		if p.IsSetStartRow() {
			err = oprot.WriteFieldBegin("startRow", thrift.STRING, 1)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "startRow", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.StartRow)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "startRow", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "startRow", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *TScan) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StopRow != nil {
		if p.IsSetStopRow() {
			err = oprot.WriteFieldBegin("stopRow", thrift.STRING, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "stopRow", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.StopRow)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "stopRow", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "stopRow", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *TScan) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetTimestamp() {
		err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
		}
		err = oprot.WriteI64(int64(p.Timestamp))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TScan) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		if p.IsSetColumns() {
			err = oprot.WriteFieldBegin("columns", thrift.LIST, 4)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for _, Iter104 := range p.Columns {
				err = oprot.WriteBinary(Iter104)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter104", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *TScan) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetCaching() {
		err = oprot.WriteFieldBegin("caching", thrift.I32, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "caching", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Caching))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "caching", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "caching", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TScan) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.FilterString != nil {
		if p.IsSetFilterString() {
			err = oprot.WriteFieldBegin("filterString", thrift.STRING, 6)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(6, "filterString", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.FilterString)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(6, "filterString", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(6, "filterString", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *TScan) TStructName() string {
	return "TScan"
}

func (p *TScan) ThriftName() string {
	return "TScan"
}

func (p *TScan) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.StartRow
	case 2:
		return p.StopRow
	case 3:
		return p.Timestamp
	case 4:
		return p.Columns
	case 5:
		return p.Caching
	case 6:
		return p.FilterString
	}
	return nil
}

func (p *TScan) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("startRow", thrift.STRING, 1),
		thrift.NewTField("stopRow", thrift.STRING, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("columns", thrift.LIST, 4),
		thrift.NewTField("caching", thrift.I32, 5),
		thrift.NewTField("filterString", thrift.STRING, 6),
	})
}

/**
 * An IOError exception signals that an error occurred communicating
 * to the Hbase master or an Hbase region server.  Also used to return
 * more general Hbase error conditions.
 * 
 * Attributes:
 *  - Message
 */
type IOError struct {
	Message string "message" // 1
}

var tstructIOError = thrift.NewTStruct("IOError", []thrift.TField{
	thrift.NewTField("message", thrift.STRING, 1),
})

func (*IOError) GetTStruct() thrift.TStruct { return tstructIOError }
func NewIOError() *IOError {
	output := &IOError{}
	{
	}
	return output
}

func (p *IOError) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIOError.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIOError.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IOError) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v105, err106 := iprot.ReadString()
	if err106 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err106)
	}
	p.Message = v105
	return err
}

func (p *IOError) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("IOError")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IOError) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Message)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	return err
}

func (p *IOError) TStructName() string {
	return "IOError"
}

func (p *IOError) ThriftName() string {
	return "IOError"
}

func (p *IOError) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Message
	}
	return nil
}

func (p *IOError) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("message", thrift.STRING, 1),
	})
}

/**
 * An IllegalArgument exception indicates an illegal or invalid
 * argument was passed into a procedure.
 * 
 * Attributes:
 *  - Message
 */
type IllegalArgument struct {
	Message string "message" // 1
}

var tstructIllegalArgument = thrift.NewTStruct("IllegalArgument", []thrift.TField{
	thrift.NewTField("message", thrift.STRING, 1),
})

func (*IllegalArgument) GetTStruct() thrift.TStruct { return tstructIllegalArgument }
func NewIllegalArgument() *IllegalArgument {
	output := &IllegalArgument{}
	{
	}
	return output
}

func (p *IllegalArgument) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIllegalArgument.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIllegalArgument.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IllegalArgument) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v107, err108 := iprot.ReadString()
	if err108 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err108)
	}
	p.Message = v107
	return err
}

func (p *IllegalArgument) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("IllegalArgument")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IllegalArgument) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Message)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	return err
}

func (p *IllegalArgument) TStructName() string {
	return "IllegalArgument"
}

func (p *IllegalArgument) ThriftName() string {
	return "IllegalArgument"
}

func (p *IllegalArgument) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Message
	}
	return nil
}

func (p *IllegalArgument) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("message", thrift.STRING, 1),
	})
}

/**
 * An AlreadyExists exceptions signals that a table with the specified
 * name already exists
 * 
 * Attributes:
 *  - Message
 */
type AlreadyExists struct {
	Message string "message" // 1
}

var tstructAlreadyExists = thrift.NewTStruct("AlreadyExists", []thrift.TField{
	thrift.NewTField("message", thrift.STRING, 1),
})

func (*AlreadyExists) GetTStruct() thrift.TStruct { return tstructAlreadyExists }
func NewAlreadyExists() *AlreadyExists {
	output := &AlreadyExists{}
	{
	}
	return output
}

func (p *AlreadyExists) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructAlreadyExists.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructAlreadyExists.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //string
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AlreadyExists) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v109, err110 := iprot.ReadString()
	if err110 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err110)
	}
	p.Message = v109
	return err
}

func (p *AlreadyExists) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("AlreadyExists")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AlreadyExists) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	err = oprot.WriteString(p.Message)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err)
	}
	return err
}

func (p *AlreadyExists) TStructName() string {
	return "AlreadyExists"
}

func (p *AlreadyExists) ThriftName() string {
	return "AlreadyExists"
}

func (p *AlreadyExists) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Message
	}
	return nil
}

func (p *AlreadyExists) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("message", thrift.STRING, 1),
	})
}

func init() {
}
