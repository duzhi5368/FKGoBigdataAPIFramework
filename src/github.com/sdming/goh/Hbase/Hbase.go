/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package Hbase

import (
	"fmt"
	"github.com/sdming/goh/thrift"
	"math"
)

// This is a temporary safety measure to ensure that the `math'
// import does not trip up any generated output that may not
// happen to use the math import due to not having emited enums.
//
// Future clean-ups will deprecate the need for this.
var _ = fmt.Print
var _ = math.MinInt32

type IHbase interface {
	/**
	 * Brings a table on-line (enables it)
	 * 
	 * Parameters:
	 *  - TableName: name of the table
	 */
	EnableTable(tableName Bytes) (io *IOError, err error)
	/**
	 * Disables a table (takes it off-line) If it is being served, the master
	 * will tell the servers to stop serving it.
	 * 
	 * Parameters:
	 *  - TableName: name of the table
	 */
	DisableTable(tableName Bytes) (io *IOError, err error)
	/**
	 * @return true if table is on-line
	 * 
	 * Parameters:
	 *  - TableName: name of the table to check
	 */
	IsTableEnabled(tableName Bytes) (retval113 bool, io *IOError, err error)
	/**
	 * Parameters:
	 *  - TableNameOrRegionName
	 */
	Compact(tableNameOrRegionName Bytes) (io *IOError, err error)
	/**
	 * Parameters:
	 *  - TableNameOrRegionName
	 */
	MajorCompact(tableNameOrRegionName Bytes) (io *IOError, err error)
	/**
	 * List all the userspace tables.
	 * 
	 * @return returns a list of names
	 */
	GetTableNames() (retval116 []Text, io *IOError, err error)
	/**
	 * List all the column families assoicated with a table.
	 * 
	 * @return list of column family descriptors
	 * 
	 * Parameters:
	 *  - TableName: table name
	 */
	GetColumnDescriptors(tableName Text) (retval117 map[string]*ColumnDescriptor, io *IOError, err error)
	/**
	 * List the regions associated with a table.
	 * 
	 * @return list of region descriptors
	 * 
	 * Parameters:
	 *  - TableName: table name
	 */
	GetTableRegions(tableName Text) (retval118 []*TRegionInfo, io *IOError, err error)
	/**
	 * Create a table with the specified column families.  The name
	 * field for each ColumnDescriptor must be set and must end in a
	 * colon (:). All other fields are optional and will get default
	 * values if not explicitly specified.
	 * 
	 * @throws IllegalArgument if an input parameter is invalid
	 * 
	 * @throws AlreadyExists if the table name already exists
	 * 
	 * Parameters:
	 *  - TableName: name of table to create
	 *  - ColumnFamilies: list of column family descriptors
	 */
	CreateTable(tableName Text, columnFamilies []*ColumnDescriptor) (io *IOError, ia *IllegalArgument, exist *AlreadyExists, err error)
	/**
	 * Deletes a table
	 * 
	 * @throws IOError if table doesn't exist on server or there was some other
	 * problem
	 * 
	 * Parameters:
	 *  - TableName: name of table to delete
	 */
	DeleteTable(tableName Text) (io *IOError, err error)
	/**
	 * Get a single TCell for the specified table, row, and column at the
	 * latest timestamp. Returns an empty list if no such value exists.
	 * 
	 * @return value for specified row/column
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Column: column name
	 *  - Attributes: Get attributes
	 */
	Get(tableName Text, row Text, column Text, attributes map[string]Text) (retval121 []*TCell, io *IOError, err error)
	/**
	 * Get the specified number of versions for the specified table,
	 * row, and column.
	 * 
	 * @return list of cells for specified row/column
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Column: column name
	 *  - NumVersions: number of versions to retrieve
	 *  - Attributes: Get attributes
	 */
	GetVer(tableName Text, row Text, column Text, numVersions int32, attributes map[string]Text) (retval122 []*TCell, io *IOError, err error)
	/**
	 * Get the specified number of versions for the specified table,
	 * row, and column.  Only versions less than or equal to the specified
	 * timestamp will be returned.
	 * 
	 * @return list of cells for specified row/column
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Column: column name
	 *  - Timestamp: timestamp
	 *  - NumVersions: number of versions to retrieve
	 *  - Attributes: Get attributes
	 */
	GetVerTs(tableName Text, row Text, column Text, timestamp int64, numVersions int32, attributes map[string]Text) (retval123 []*TCell, io *IOError, err error)
	/**
	 * Get all the data for the specified table and row at the latest
	 * timestamp. Returns an empty list if the row does not exist.
	 * 
	 * @return TRowResult containing the row and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Attributes: Get attributes
	 */
	GetRow(tableName Text, row Text, attributes map[string]Text) (retval124 []*TRowResult, io *IOError, err error)
	/**
	 * Get the specified columns for the specified table and row at the latest
	 * timestamp. Returns an empty list if the row does not exist.
	 * 
	 * @return TRowResult containing the row and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Columns: List of columns to return, null for all columns
	 *  - Attributes: Get attributes
	 */
	GetRowWithColumns(tableName Text, row Text, columns []Text, attributes map[string]Text) (retval125 []*TRowResult, io *IOError, err error)
	/**
	 * Get all the data for the specified table and row at the specified
	 * timestamp. Returns an empty list if the row does not exist.
	 * 
	 * @return TRowResult containing the row and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of the table
	 *  - Row: row key
	 *  - Timestamp: timestamp
	 *  - Attributes: Get attributes
	 */
	GetRowTs(tableName Text, row Text, timestamp int64, attributes map[string]Text) (retval126 []*TRowResult, io *IOError, err error)
	/**
	 * Get the specified columns for the specified table and row at the specified
	 * timestamp. Returns an empty list if the row does not exist.
	 * 
	 * @return TRowResult containing the row and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Columns: List of columns to return, null for all columns
	 *  - Timestamp
	 *  - Attributes: Get attributes
	 */
	GetRowWithColumnsTs(tableName Text, row Text, columns []Text, timestamp int64, attributes map[string]Text) (retval127 []*TRowResult, io *IOError, err error)
	/**
	 * Get all the data for the specified table and rows at the latest
	 * timestamp. Returns an empty list if no rows exist.
	 * 
	 * @return TRowResult containing the rows and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Rows: row keys
	 *  - Attributes: Get attributes
	 */
	GetRows(tableName Text, rows []Text, attributes map[string]Text) (retval128 []*TRowResult, io *IOError, err error)
	/**
	 * Get the specified columns for the specified table and rows at the latest
	 * timestamp. Returns an empty list if no rows exist.
	 * 
	 * @return TRowResult containing the rows and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Rows: row keys
	 *  - Columns: List of columns to return, null for all columns
	 *  - Attributes: Get attributes
	 */
	GetRowsWithColumns(tableName Text, rows []Text, columns []Text, attributes map[string]Text) (retval129 []*TRowResult, io *IOError, err error)
	/**
	 * Get all the data for the specified table and rows at the specified
	 * timestamp. Returns an empty list if no rows exist.
	 * 
	 * @return TRowResult containing the rows and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of the table
	 *  - Rows: row keys
	 *  - Timestamp: timestamp
	 *  - Attributes: Get attributes
	 */
	GetRowsTs(tableName Text, rows []Text, timestamp int64, attributes map[string]Text) (retval130 []*TRowResult, io *IOError, err error)
	/**
	 * Get the specified columns for the specified table and rows at the specified
	 * timestamp. Returns an empty list if no rows exist.
	 * 
	 * @return TRowResult containing the rows and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Rows: row keys
	 *  - Columns: List of columns to return, null for all columns
	 *  - Timestamp
	 *  - Attributes: Get attributes
	 */
	GetRowsWithColumnsTs(tableName Text, rows []Text, columns []Text, timestamp int64, attributes map[string]Text) (retval131 []*TRowResult, io *IOError, err error)
	/**
	 * Apply a series of mutations (updates/deletes) to a row in a
	 * single transaction.  If an exception is thrown, then the
	 * transaction is aborted.  Default current timestamp is used, and
	 * all entries will have an identical timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Mutations: list of mutation commands
	 *  - Attributes: Mutation attributes
	 */
	MutateRow(tableName Text, row Text, mutations []*Mutation, attributes map[string]Text) (io *IOError, ia *IllegalArgument, err error)
	/**
	 * Apply a series of mutations (updates/deletes) to a row in a
	 * single transaction.  If an exception is thrown, then the
	 * transaction is aborted.  The specified timestamp is used, and
	 * all entries will have an identical timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Mutations: list of mutation commands
	 *  - Timestamp: timestamp
	 *  - Attributes: Mutation attributes
	 */
	MutateRowTs(tableName Text, row Text, mutations []*Mutation, timestamp int64, attributes map[string]Text) (io *IOError, ia *IllegalArgument, err error)
	/**
	 * Apply a series of batches (each a series of mutations on a single row)
	 * in a single transaction.  If an exception is thrown, then the
	 * transaction is aborted.  Default current timestamp is used, and
	 * all entries will have an identical timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - RowBatches: list of row batches
	 *  - Attributes: Mutation attributes
	 */
	MutateRows(tableName Text, rowBatches []*BatchMutation, attributes map[string]Text) (io *IOError, ia *IllegalArgument, err error)
	/**
	 * Apply a series of batches (each a series of mutations on a single row)
	 * in a single transaction.  If an exception is thrown, then the
	 * transaction is aborted.  The specified timestamp is used, and
	 * all entries will have an identical timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - RowBatches: list of row batches
	 *  - Timestamp: timestamp
	 *  - Attributes: Mutation attributes
	 */
	MutateRowsTs(tableName Text, rowBatches []*BatchMutation, timestamp int64, attributes map[string]Text) (io *IOError, ia *IllegalArgument, err error)
	/**
	 * Atomically increment the column value specified.  Returns the next value post increment.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row to increment
	 *  - Column: name of column
	 *  - Value: amount to increment by
	 */
	AtomicIncrement(tableName Text, row Text, column Text, value int64) (retval136 int64, io *IOError, ia *IllegalArgument, err error)
	/**
	 * Delete all cells that match the passed row and column.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: Row to update
	 *  - Column: name of column whose value is to be deleted
	 *  - Attributes: Delete attributes
	 */
	DeleteAll(tableName Text, row Text, column Text, attributes map[string]Text) (io *IOError, err error)
	/**
	 * Delete all cells that match the passed row and column and whose
	 * timestamp is equal-to or older than the passed timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: Row to update
	 *  - Column: name of column whose value is to be deleted
	 *  - Timestamp: timestamp
	 *  - Attributes: Delete attributes
	 */
	DeleteAllTs(tableName Text, row Text, column Text, timestamp int64, attributes map[string]Text) (io *IOError, err error)
	/**
	 * Completely delete the row's cells.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: key of the row to be completely deleted.
	 *  - Attributes: Delete attributes
	 */
	DeleteAllRow(tableName Text, row Text, attributes map[string]Text) (io *IOError, err error)
	/**
	 * Increment a cell by the ammount.
	 * Increments can be applied async if hbase.regionserver.thrift.coalesceIncrement is set to true.
	 * False is the default.  Turn to true if you need the extra performance and can accept some
	 * data loss if a thrift server dies with increments still in the queue.
	 * 
	 * Parameters:
	 *  - Increment: The single increment to apply
	 */
	Increment(increment *TIncrement) (io *IOError, err error)
	/**
	 * Parameters:
	 *  - Increments: The list of increments
	 */
	IncrementRows(increments []*TIncrement) (io *IOError, err error)
	/**
	 * Completely delete the row's cells marked with a timestamp
	 * equal-to or older than the passed timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: key of the row to be completely deleted.
	 *  - Timestamp: timestamp
	 *  - Attributes: Delete attributes
	 */
	DeleteAllRowTs(tableName Text, row Text, timestamp int64, attributes map[string]Text) (io *IOError, err error)
	/**
	 * Get a scanner on the current table, using the Scan instance
	 * for the scan parameters.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Scan: Scan instance
	 *  - Attributes: Scan attributes
	 */
	ScannerOpenWithScan(tableName Text, scan *TScan, attributes map[string]Text) (retval143 ScannerID, io *IOError, err error)
	/**
	 * Get a scanner on the current table starting at the specified row and
	 * ending at the last row in the table.  Return the specified columns.
	 * 
	 * @return scanner id to be used with other scanner procedures
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - StartRow: Starting row in table to scan.
	 * Send "" (empty string) to start at the first row.
	 *  - Columns: columns to scan. If column name is a column family, all
	 * columns of the specified column family are returned. It's also possible
	 * to pass a regex in the column qualifier.
	 *  - Attributes: Scan attributes
	 */
	ScannerOpen(tableName Text, startRow Text, columns []Text, attributes map[string]Text) (retval144 ScannerID, io *IOError, err error)
	/**
	 * Get a scanner on the current table starting and stopping at the
	 * specified rows.  ending at the last row in the table.  Return the
	 * specified columns.
	 * 
	 * @return scanner id to be used with other scanner procedures
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - StartRow: Starting row in table to scan.
	 * Send "" (empty string) to start at the first row.
	 *  - StopRow: row to stop scanning on. This row is *not* included in the
	 * scanner's results
	 *  - Columns: columns to scan. If column name is a column family, all
	 * columns of the specified column family are returned. It's also possible
	 * to pass a regex in the column qualifier.
	 *  - Attributes: Scan attributes
	 */
	ScannerOpenWithStop(tableName Text, startRow Text, stopRow Text, columns []Text, attributes map[string]Text) (retval145 ScannerID, io *IOError, err error)
	/**
	 * Open a scanner for a given prefix.  That is all rows will have the specified
	 * prefix. No other rows will be returned.
	 * 
	 * @return scanner id to use with other scanner calls
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - StartAndPrefix: the prefix (and thus start row) of the keys you want
	 *  - Columns: the columns you want returned
	 *  - Attributes: Scan attributes
	 */
	ScannerOpenWithPrefix(tableName Text, startAndPrefix Text, columns []Text, attributes map[string]Text) (retval146 ScannerID, io *IOError, err error)
	/**
	 * Get a scanner on the current table starting at the specified row and
	 * ending at the last row in the table.  Return the specified columns.
	 * Only values with the specified timestamp are returned.
	 * 
	 * @return scanner id to be used with other scanner procedures
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - StartRow: Starting row in table to scan.
	 * Send "" (empty string) to start at the first row.
	 *  - Columns: columns to scan. If column name is a column family, all
	 * columns of the specified column family are returned. It's also possible
	 * to pass a regex in the column qualifier.
	 *  - Timestamp: timestamp
	 *  - Attributes: Scan attributes
	 */
	ScannerOpenTs(tableName Text, startRow Text, columns []Text, timestamp int64, attributes map[string]Text) (retval147 ScannerID, io *IOError, err error)
	/**
	 * Get a scanner on the current table starting and stopping at the
	 * specified rows.  ending at the last row in the table.  Return the
	 * specified columns.  Only values with the specified timestamp are
	 * returned.
	 * 
	 * @return scanner id to be used with other scanner procedures
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - StartRow: Starting row in table to scan.
	 * Send "" (empty string) to start at the first row.
	 *  - StopRow: row to stop scanning on. This row is *not* included in the
	 * scanner's results
	 *  - Columns: columns to scan. If column name is a column family, all
	 * columns of the specified column family are returned. It's also possible
	 * to pass a regex in the column qualifier.
	 *  - Timestamp: timestamp
	 *  - Attributes: Scan attributes
	 */
	ScannerOpenWithStopTs(tableName Text, startRow Text, stopRow Text, columns []Text, timestamp int64, attributes map[string]Text) (retval148 ScannerID, io *IOError, err error)
	/**
	 * Returns the scanner's current row value and advances to the next
	 * row in the table.  When there are no more rows in the table, or a key
	 * greater-than-or-equal-to the scanner's specified stopRow is reached,
	 * an empty list is returned.
	 * 
	 * @return a TRowResult containing the current row and a map of the columns to TCells.
	 * 
	 * @throws IllegalArgument if ScannerID is invalid
	 * 
	 * @throws NotFound when the scanner reaches the end
	 * 
	 * Parameters:
	 *  - Id: id of a scanner returned by scannerOpen
	 */
	ScannerGet(id ScannerID) (retval149 []*TRowResult, io *IOError, ia *IllegalArgument, err error)
	/**
	 * Returns, starting at the scanner's current row value nbRows worth of
	 * rows and advances to the next row in the table.  When there are no more
	 * rows in the table, or a key greater-than-or-equal-to the scanner's
	 * specified stopRow is reached,  an empty list is returned.
	 * 
	 * @return a TRowResult containing the current row and a map of the columns to TCells.
	 * 
	 * @throws IllegalArgument if ScannerID is invalid
	 * 
	 * @throws NotFound when the scanner reaches the end
	 * 
	 * Parameters:
	 *  - Id: id of a scanner returned by scannerOpen
	 *  - NbRows: number of results to return
	 */
	ScannerGetList(id ScannerID, nbRows int32) (retval150 []*TRowResult, io *IOError, ia *IllegalArgument, err error)
	/**
	 * Closes the server-state associated with an open scanner.
	 * 
	 * @throws IllegalArgument if ScannerID is invalid
	 * 
	 * Parameters:
	 *  - Id: id of a scanner returned by scannerOpen
	 */
	ScannerClose(id ScannerID) (io *IOError, ia *IllegalArgument, err error)
	/**
	 * Get the row just before the specified one.
	 * 
	 * @return value for specified row/column
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Family: column name
	 */
	GetRowOrBefore(tableName Text, row Text, family Text) (retval152 []*TCell, io *IOError, err error)
	/**
	 * Get the regininfo for the specified row. It scans
	 * the metatable to find region's start and end keys.
	 * 
	 * @return value for specified row/column
	 * 
	 * Parameters:
	 *  - Row: row key
	 */
	GetRegionInfo(row Text) (retval153 *TRegionInfo, io *IOError, err error)
}

type HbaseClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewHbaseClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HbaseClient {
	return &HbaseClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewHbaseClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HbaseClient {
	return &HbaseClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

/**
 * Brings a table on-line (enables it)
 * 
 * Parameters:
 *  - TableName: name of the table
 */
func (p *HbaseClient) EnableTable(tableName Bytes) (io *IOError, err error) {
	err = p.SendEnableTable(tableName)
	if err != nil {
		return
	}
	return p.RecvEnableTable()
}

func (p *HbaseClient) SendEnableTable(tableName Bytes) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("enableTable", thrift.CALL, p.SeqId)
	args155 := NewEnableTableArgs()
	args155.TableName = tableName
	err = args155.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvEnableTable() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error157 := thrift.NewTApplicationExceptionDefault()
		var error158 error
		error158, err = error157.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error158
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result156 := NewEnableTableResult()
	err = result156.Read(iprot)
	iprot.ReadMessageEnd()
	if result156.Io != nil {
		io = result156.Io
	}
	return
}

/**
 * Disables a table (takes it off-line) If it is being served, the master
 * will tell the servers to stop serving it.
 * 
 * Parameters:
 *  - TableName: name of the table
 */
func (p *HbaseClient) DisableTable(tableName Bytes) (io *IOError, err error) {
	err = p.SendDisableTable(tableName)
	if err != nil {
		return
	}
	return p.RecvDisableTable()
}

func (p *HbaseClient) SendDisableTable(tableName Bytes) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("disableTable", thrift.CALL, p.SeqId)
	args160 := NewDisableTableArgs()
	args160.TableName = tableName
	err = args160.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDisableTable() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error162 := thrift.NewTApplicationExceptionDefault()
		var error163 error
		error163, err = error162.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error163
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result161 := NewDisableTableResult()
	err = result161.Read(iprot)
	iprot.ReadMessageEnd()
	if result161.Io != nil {
		io = result161.Io
	}
	return
}

/**
 * @return true if table is on-line
 * 
 * Parameters:
 *  - TableName: name of the table to check
 */
func (p *HbaseClient) IsTableEnabled(tableName Bytes) (retval164 bool, io *IOError, err error) {
	err = p.SendIsTableEnabled(tableName)
	if err != nil {
		return
	}
	return p.RecvIsTableEnabled()
}

func (p *HbaseClient) SendIsTableEnabled(tableName Bytes) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("isTableEnabled", thrift.CALL, p.SeqId)
	args165 := NewIsTableEnabledArgs()
	args165.TableName = tableName
	err = args165.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvIsTableEnabled() (value bool, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error167 := thrift.NewTApplicationExceptionDefault()
		var error168 error
		error168, err = error167.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error168
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result166 := NewIsTableEnabledResult()
	err = result166.Read(iprot)
	iprot.ReadMessageEnd()
	value = result166.Success
	if result166.Io != nil {
		io = result166.Io
	}
	return
}

/**
 * Parameters:
 *  - TableNameOrRegionName
 */
func (p *HbaseClient) Compact(tableNameOrRegionName Bytes) (io *IOError, err error) {
	err = p.SendCompact(tableNameOrRegionName)
	if err != nil {
		return
	}
	return p.RecvCompact()
}

func (p *HbaseClient) SendCompact(tableNameOrRegionName Bytes) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("compact", thrift.CALL, p.SeqId)
	args170 := NewCompactArgs()
	args170.TableNameOrRegionName = tableNameOrRegionName
	err = args170.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvCompact() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error172 := thrift.NewTApplicationExceptionDefault()
		var error173 error
		error173, err = error172.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error173
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result171 := NewCompactResult()
	err = result171.Read(iprot)
	iprot.ReadMessageEnd()
	if result171.Io != nil {
		io = result171.Io
	}
	return
}

/**
 * Parameters:
 *  - TableNameOrRegionName
 */
func (p *HbaseClient) MajorCompact(tableNameOrRegionName Bytes) (io *IOError, err error) {
	err = p.SendMajorCompact(tableNameOrRegionName)
	if err != nil {
		return
	}
	return p.RecvMajorCompact()
}

func (p *HbaseClient) SendMajorCompact(tableNameOrRegionName Bytes) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("majorCompact", thrift.CALL, p.SeqId)
	args175 := NewMajorCompactArgs()
	args175.TableNameOrRegionName = tableNameOrRegionName
	err = args175.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvMajorCompact() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error177 := thrift.NewTApplicationExceptionDefault()
		var error178 error
		error178, err = error177.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error178
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result176 := NewMajorCompactResult()
	err = result176.Read(iprot)
	iprot.ReadMessageEnd()
	if result176.Io != nil {
		io = result176.Io
	}
	return
}

/**
 * List all the userspace tables.
 * 
 * @return returns a list of names
 */
func (p *HbaseClient) GetTableNames() (retval179 []Text, io *IOError, err error) {
	err = p.SendGetTableNames()
	if err != nil {
		return
	}
	return p.RecvGetTableNames()
}

func (p *HbaseClient) SendGetTableNames() (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getTableNames", thrift.CALL, p.SeqId)
	args180 := NewGetTableNamesArgs()
	err = args180.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetTableNames() (value []Text, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error182 := thrift.NewTApplicationExceptionDefault()
		var error183 error
		error183, err = error182.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error183
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result181 := NewGetTableNamesResult()
	err = result181.Read(iprot)
	iprot.ReadMessageEnd()
	value = result181.Success
	if result181.Io != nil {
		io = result181.Io
	}
	return
}

/**
 * List all the column families assoicated with a table.
 * 
 * @return list of column family descriptors
 * 
 * Parameters:
 *  - TableName: table name
 */
func (p *HbaseClient) GetColumnDescriptors(tableName Text) (retval184 map[string]*ColumnDescriptor, io *IOError, err error) {
	err = p.SendGetColumnDescriptors(tableName)
	if err != nil {
		return
	}
	return p.RecvGetColumnDescriptors()
}

func (p *HbaseClient) SendGetColumnDescriptors(tableName Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getColumnDescriptors", thrift.CALL, p.SeqId)
	args185 := NewGetColumnDescriptorsArgs()
	args185.TableName = tableName
	err = args185.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetColumnDescriptors() (value map[string]*ColumnDescriptor, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error187 := thrift.NewTApplicationExceptionDefault()
		var error188 error
		error188, err = error187.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error188
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result186 := NewGetColumnDescriptorsResult()
	err = result186.Read(iprot)
	iprot.ReadMessageEnd()
	value = result186.Success
	if result186.Io != nil {
		io = result186.Io
	}
	return
}

/**
 * List the regions associated with a table.
 * 
 * @return list of region descriptors
 * 
 * Parameters:
 *  - TableName: table name
 */
func (p *HbaseClient) GetTableRegions(tableName Text) (retval189 []*TRegionInfo, io *IOError, err error) {
	err = p.SendGetTableRegions(tableName)
	if err != nil {
		return
	}
	return p.RecvGetTableRegions()
}

func (p *HbaseClient) SendGetTableRegions(tableName Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getTableRegions", thrift.CALL, p.SeqId)
	args190 := NewGetTableRegionsArgs()
	args190.TableName = tableName
	err = args190.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetTableRegions() (value []*TRegionInfo, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error192 := thrift.NewTApplicationExceptionDefault()
		var error193 error
		error193, err = error192.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error193
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result191 := NewGetTableRegionsResult()
	err = result191.Read(iprot)
	iprot.ReadMessageEnd()
	value = result191.Success
	if result191.Io != nil {
		io = result191.Io
	}
	return
}

/**
 * Create a table with the specified column families.  The name
 * field for each ColumnDescriptor must be set and must end in a
 * colon (:). All other fields are optional and will get default
 * values if not explicitly specified.
 * 
 * @throws IllegalArgument if an input parameter is invalid
 * 
 * @throws AlreadyExists if the table name already exists
 * 
 * Parameters:
 *  - TableName: name of table to create
 *  - ColumnFamilies: list of column family descriptors
 */
func (p *HbaseClient) CreateTable(tableName Text, columnFamilies []*ColumnDescriptor) (io *IOError, ia *IllegalArgument, exist *AlreadyExists, err error) {
	err = p.SendCreateTable(tableName, columnFamilies)
	if err != nil {
		return
	}
	return p.RecvCreateTable()
}

func (p *HbaseClient) SendCreateTable(tableName Text, columnFamilies []*ColumnDescriptor) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("createTable", thrift.CALL, p.SeqId)
	args195 := NewCreateTableArgs()
	args195.TableName = tableName
	args195.ColumnFamilies = columnFamilies
	err = args195.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvCreateTable() (io *IOError, ia *IllegalArgument, exist *AlreadyExists, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error197 := thrift.NewTApplicationExceptionDefault()
		var error198 error
		error198, err = error197.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error198
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result196 := NewCreateTableResult()
	err = result196.Read(iprot)
	iprot.ReadMessageEnd()
	if result196.Io != nil {
		io = result196.Io
	}
	if result196.Ia != nil {
		ia = result196.Ia
	}
	if result196.Exist != nil {
		exist = result196.Exist
	}
	return
}

/**
 * Deletes a table
 * 
 * @throws IOError if table doesn't exist on server or there was some other
 * problem
 * 
 * Parameters:
 *  - TableName: name of table to delete
 */
func (p *HbaseClient) DeleteTable(tableName Text) (io *IOError, err error) {
	err = p.SendDeleteTable(tableName)
	if err != nil {
		return
	}
	return p.RecvDeleteTable()
}

func (p *HbaseClient) SendDeleteTable(tableName Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteTable", thrift.CALL, p.SeqId)
	args200 := NewDeleteTableArgs()
	args200.TableName = tableName
	err = args200.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDeleteTable() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error202 := thrift.NewTApplicationExceptionDefault()
		var error203 error
		error203, err = error202.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error203
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result201 := NewDeleteTableResult()
	err = result201.Read(iprot)
	iprot.ReadMessageEnd()
	if result201.Io != nil {
		io = result201.Io
	}
	return
}

/**
 * Get a single TCell for the specified table, row, and column at the
 * latest timestamp. Returns an empty list if no such value exists.
 * 
 * @return value for specified row/column
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) Get(tableName Text, row Text, column Text, attributes map[string]Text) (retval204 []*TCell, io *IOError, err error) {
	err = p.SendGet(tableName, row, column, attributes)
	if err != nil {
		return
	}
	return p.RecvGet()
}

func (p *HbaseClient) SendGet(tableName Text, row Text, column Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId)
	args205 := NewGetArgs()
	args205.TableName = tableName
	args205.Row = row
	args205.Column = column
	args205.Attributes = attributes
	err = args205.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGet() (value []*TCell, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error207 := thrift.NewTApplicationExceptionDefault()
		var error208 error
		error208, err = error207.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error208
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result206 := NewGetResult()
	err = result206.Read(iprot)
	iprot.ReadMessageEnd()
	value = result206.Success
	if result206.Io != nil {
		io = result206.Io
	}
	return
}

/**
 * Get the specified number of versions for the specified table,
 * row, and column.
 * 
 * @return list of cells for specified row/column
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - NumVersions: number of versions to retrieve
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetVer(tableName Text, row Text, column Text, numVersions int32, attributes map[string]Text) (retval209 []*TCell, io *IOError, err error) {
	err = p.SendGetVer(tableName, row, column, numVersions, attributes)
	if err != nil {
		return
	}
	return p.RecvGetVer()
}

func (p *HbaseClient) SendGetVer(tableName Text, row Text, column Text, numVersions int32, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getVer", thrift.CALL, p.SeqId)
	args210 := NewGetVerArgs()
	args210.TableName = tableName
	args210.Row = row
	args210.Column = column
	args210.NumVersions = numVersions
	args210.Attributes = attributes
	err = args210.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetVer() (value []*TCell, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error212 := thrift.NewTApplicationExceptionDefault()
		var error213 error
		error213, err = error212.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error213
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result211 := NewGetVerResult()
	err = result211.Read(iprot)
	iprot.ReadMessageEnd()
	value = result211.Success
	if result211.Io != nil {
		io = result211.Io
	}
	return
}

/**
 * Get the specified number of versions for the specified table,
 * row, and column.  Only versions less than or equal to the specified
 * timestamp will be returned.
 * 
 * @return list of cells for specified row/column
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - Timestamp: timestamp
 *  - NumVersions: number of versions to retrieve
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetVerTs(tableName Text, row Text, column Text, timestamp int64, numVersions int32, attributes map[string]Text) (retval214 []*TCell, io *IOError, err error) {
	err = p.SendGetVerTs(tableName, row, column, timestamp, numVersions, attributes)
	if err != nil {
		return
	}
	return p.RecvGetVerTs()
}

func (p *HbaseClient) SendGetVerTs(tableName Text, row Text, column Text, timestamp int64, numVersions int32, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getVerTs", thrift.CALL, p.SeqId)
	args215 := NewGetVerTsArgs()
	args215.TableName = tableName
	args215.Row = row
	args215.Column = column
	args215.Timestamp = timestamp
	args215.NumVersions = numVersions
	args215.Attributes = attributes
	err = args215.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetVerTs() (value []*TCell, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error217 := thrift.NewTApplicationExceptionDefault()
		var error218 error
		error218, err = error217.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error218
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result216 := NewGetVerTsResult()
	err = result216.Read(iprot)
	iprot.ReadMessageEnd()
	value = result216.Success
	if result216.Io != nil {
		io = result216.Io
	}
	return
}

/**
 * Get all the data for the specified table and row at the latest
 * timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRow(tableName Text, row Text, attributes map[string]Text) (retval219 []*TRowResult, io *IOError, err error) {
	err = p.SendGetRow(tableName, row, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRow()
}

func (p *HbaseClient) SendGetRow(tableName Text, row Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRow", thrift.CALL, p.SeqId)
	args220 := NewGetRowArgs()
	args220.TableName = tableName
	args220.Row = row
	args220.Attributes = attributes
	err = args220.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRow() (value []*TRowResult, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error222 := thrift.NewTApplicationExceptionDefault()
		var error223 error
		error223, err = error222.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error223
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result221 := NewGetRowResult()
	err = result221.Read(iprot)
	iprot.ReadMessageEnd()
	value = result221.Success
	if result221.Io != nil {
		io = result221.Io
	}
	return
}

/**
 * Get the specified columns for the specified table and row at the latest
 * timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowWithColumns(tableName Text, row Text, columns []Text, attributes map[string]Text) (retval224 []*TRowResult, io *IOError, err error) {
	err = p.SendGetRowWithColumns(tableName, row, columns, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowWithColumns()
}

func (p *HbaseClient) SendGetRowWithColumns(tableName Text, row Text, columns []Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowWithColumns", thrift.CALL, p.SeqId)
	args225 := NewGetRowWithColumnsArgs()
	args225.TableName = tableName
	args225.Row = row
	args225.Columns = columns
	args225.Attributes = attributes
	err = args225.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowWithColumns() (value []*TRowResult, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error227 := thrift.NewTApplicationExceptionDefault()
		var error228 error
		error228, err = error227.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error228
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result226 := NewGetRowWithColumnsResult()
	err = result226.Read(iprot)
	iprot.ReadMessageEnd()
	value = result226.Success
	if result226.Io != nil {
		io = result226.Io
	}
	return
}

/**
 * Get all the data for the specified table and row at the specified
 * timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of the table
 *  - Row: row key
 *  - Timestamp: timestamp
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowTs(tableName Text, row Text, timestamp int64, attributes map[string]Text) (retval229 []*TRowResult, io *IOError, err error) {
	err = p.SendGetRowTs(tableName, row, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowTs()
}

func (p *HbaseClient) SendGetRowTs(tableName Text, row Text, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowTs", thrift.CALL, p.SeqId)
	args230 := NewGetRowTsArgs()
	args230.TableName = tableName
	args230.Row = row
	args230.Timestamp = timestamp
	args230.Attributes = attributes
	err = args230.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowTs() (value []*TRowResult, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error232 := thrift.NewTApplicationExceptionDefault()
		var error233 error
		error233, err = error232.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error233
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result231 := NewGetRowTsResult()
	err = result231.Read(iprot)
	iprot.ReadMessageEnd()
	value = result231.Success
	if result231.Io != nil {
		io = result231.Io
	}
	return
}

/**
 * Get the specified columns for the specified table and row at the specified
 * timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowWithColumnsTs(tableName Text, row Text, columns []Text, timestamp int64, attributes map[string]Text) (retval234 []*TRowResult, io *IOError, err error) {
	err = p.SendGetRowWithColumnsTs(tableName, row, columns, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowWithColumnsTs()
}

func (p *HbaseClient) SendGetRowWithColumnsTs(tableName Text, row Text, columns []Text, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.CALL, p.SeqId)
	args235 := NewGetRowWithColumnsTsArgs()
	args235.TableName = tableName
	args235.Row = row
	args235.Columns = columns
	args235.Timestamp = timestamp
	args235.Attributes = attributes
	err = args235.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowWithColumnsTs() (value []*TRowResult, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error237 := thrift.NewTApplicationExceptionDefault()
		var error238 error
		error238, err = error237.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error238
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result236 := NewGetRowWithColumnsTsResult()
	err = result236.Read(iprot)
	iprot.ReadMessageEnd()
	value = result236.Success
	if result236.Io != nil {
		io = result236.Io
	}
	return
}

/**
 * Get all the data for the specified table and rows at the latest
 * timestamp. Returns an empty list if no rows exist.
 * 
 * @return TRowResult containing the rows and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRows(tableName Text, rows []Text, attributes map[string]Text) (retval239 []*TRowResult, io *IOError, err error) {
	err = p.SendGetRows(tableName, rows, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRows()
}

func (p *HbaseClient) SendGetRows(tableName Text, rows []Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRows", thrift.CALL, p.SeqId)
	args240 := NewGetRowsArgs()
	args240.TableName = tableName
	args240.Rows = rows
	args240.Attributes = attributes
	err = args240.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRows() (value []*TRowResult, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error242 := thrift.NewTApplicationExceptionDefault()
		var error243 error
		error243, err = error242.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error243
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result241 := NewGetRowsResult()
	err = result241.Read(iprot)
	iprot.ReadMessageEnd()
	value = result241.Success
	if result241.Io != nil {
		io = result241.Io
	}
	return
}

/**
 * Get the specified columns for the specified table and rows at the latest
 * timestamp. Returns an empty list if no rows exist.
 * 
 * @return TRowResult containing the rows and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Columns: List of columns to return, null for all columns
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowsWithColumns(tableName Text, rows []Text, columns []Text, attributes map[string]Text) (retval244 []*TRowResult, io *IOError, err error) {
	err = p.SendGetRowsWithColumns(tableName, rows, columns, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowsWithColumns()
}

func (p *HbaseClient) SendGetRowsWithColumns(tableName Text, rows []Text, columns []Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowsWithColumns", thrift.CALL, p.SeqId)
	args245 := NewGetRowsWithColumnsArgs()
	args245.TableName = tableName
	args245.Rows = rows
	args245.Columns = columns
	args245.Attributes = attributes
	err = args245.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowsWithColumns() (value []*TRowResult, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error247 := thrift.NewTApplicationExceptionDefault()
		var error248 error
		error248, err = error247.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error248
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result246 := NewGetRowsWithColumnsResult()
	err = result246.Read(iprot)
	iprot.ReadMessageEnd()
	value = result246.Success
	if result246.Io != nil {
		io = result246.Io
	}
	return
}

/**
 * Get all the data for the specified table and rows at the specified
 * timestamp. Returns an empty list if no rows exist.
 * 
 * @return TRowResult containing the rows and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of the table
 *  - Rows: row keys
 *  - Timestamp: timestamp
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowsTs(tableName Text, rows []Text, timestamp int64, attributes map[string]Text) (retval249 []*TRowResult, io *IOError, err error) {
	err = p.SendGetRowsTs(tableName, rows, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowsTs()
}

func (p *HbaseClient) SendGetRowsTs(tableName Text, rows []Text, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowsTs", thrift.CALL, p.SeqId)
	args250 := NewGetRowsTsArgs()
	args250.TableName = tableName
	args250.Rows = rows
	args250.Timestamp = timestamp
	args250.Attributes = attributes
	err = args250.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowsTs() (value []*TRowResult, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error252 := thrift.NewTApplicationExceptionDefault()
		var error253 error
		error253, err = error252.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error253
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result251 := NewGetRowsTsResult()
	err = result251.Read(iprot)
	iprot.ReadMessageEnd()
	value = result251.Success
	if result251.Io != nil {
		io = result251.Io
	}
	return
}

/**
 * Get the specified columns for the specified table and rows at the specified
 * timestamp. Returns an empty list if no rows exist.
 * 
 * @return TRowResult containing the rows and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowsWithColumnsTs(tableName Text, rows []Text, columns []Text, timestamp int64, attributes map[string]Text) (retval254 []*TRowResult, io *IOError, err error) {
	err = p.SendGetRowsWithColumnsTs(tableName, rows, columns, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowsWithColumnsTs()
}

func (p *HbaseClient) SendGetRowsWithColumnsTs(tableName Text, rows []Text, columns []Text, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.CALL, p.SeqId)
	args255 := NewGetRowsWithColumnsTsArgs()
	args255.TableName = tableName
	args255.Rows = rows
	args255.Columns = columns
	args255.Timestamp = timestamp
	args255.Attributes = attributes
	err = args255.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowsWithColumnsTs() (value []*TRowResult, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error257 := thrift.NewTApplicationExceptionDefault()
		var error258 error
		error258, err = error257.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error258
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result256 := NewGetRowsWithColumnsTsResult()
	err = result256.Read(iprot)
	iprot.ReadMessageEnd()
	value = result256.Success
	if result256.Io != nil {
		io = result256.Io
	}
	return
}

/**
 * Apply a series of mutations (updates/deletes) to a row in a
 * single transaction.  If an exception is thrown, then the
 * transaction is aborted.  Default current timestamp is used, and
 * all entries will have an identical timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Mutations: list of mutation commands
 *  - Attributes: Mutation attributes
 */
func (p *HbaseClient) MutateRow(tableName Text, row Text, mutations []*Mutation, attributes map[string]Text) (io *IOError, ia *IllegalArgument, err error) {
	err = p.SendMutateRow(tableName, row, mutations, attributes)
	if err != nil {
		return
	}
	return p.RecvMutateRow()
}

func (p *HbaseClient) SendMutateRow(tableName Text, row Text, mutations []*Mutation, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("mutateRow", thrift.CALL, p.SeqId)
	args260 := NewMutateRowArgs()
	args260.TableName = tableName
	args260.Row = row
	args260.Mutations = mutations
	args260.Attributes = attributes
	err = args260.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvMutateRow() (io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error262 := thrift.NewTApplicationExceptionDefault()
		var error263 error
		error263, err = error262.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error263
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result261 := NewMutateRowResult()
	err = result261.Read(iprot)
	iprot.ReadMessageEnd()
	if result261.Io != nil {
		io = result261.Io
	}
	if result261.Ia != nil {
		ia = result261.Ia
	}
	return
}

/**
 * Apply a series of mutations (updates/deletes) to a row in a
 * single transaction.  If an exception is thrown, then the
 * transaction is aborted.  The specified timestamp is used, and
 * all entries will have an identical timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Mutations: list of mutation commands
 *  - Timestamp: timestamp
 *  - Attributes: Mutation attributes
 */
func (p *HbaseClient) MutateRowTs(tableName Text, row Text, mutations []*Mutation, timestamp int64, attributes map[string]Text) (io *IOError, ia *IllegalArgument, err error) {
	err = p.SendMutateRowTs(tableName, row, mutations, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvMutateRowTs()
}

func (p *HbaseClient) SendMutateRowTs(tableName Text, row Text, mutations []*Mutation, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("mutateRowTs", thrift.CALL, p.SeqId)
	args265 := NewMutateRowTsArgs()
	args265.TableName = tableName
	args265.Row = row
	args265.Mutations = mutations
	args265.Timestamp = timestamp
	args265.Attributes = attributes
	err = args265.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvMutateRowTs() (io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error267 := thrift.NewTApplicationExceptionDefault()
		var error268 error
		error268, err = error267.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error268
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result266 := NewMutateRowTsResult()
	err = result266.Read(iprot)
	iprot.ReadMessageEnd()
	if result266.Io != nil {
		io = result266.Io
	}
	if result266.Ia != nil {
		ia = result266.Ia
	}
	return
}

/**
 * Apply a series of batches (each a series of mutations on a single row)
 * in a single transaction.  If an exception is thrown, then the
 * transaction is aborted.  Default current timestamp is used, and
 * all entries will have an identical timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - RowBatches: list of row batches
 *  - Attributes: Mutation attributes
 */
func (p *HbaseClient) MutateRows(tableName Text, rowBatches []*BatchMutation, attributes map[string]Text) (io *IOError, ia *IllegalArgument, err error) {
	err = p.SendMutateRows(tableName, rowBatches, attributes)
	if err != nil {
		return
	}
	return p.RecvMutateRows()
}

func (p *HbaseClient) SendMutateRows(tableName Text, rowBatches []*BatchMutation, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("mutateRows", thrift.CALL, p.SeqId)
	args270 := NewMutateRowsArgs()
	args270.TableName = tableName
	args270.RowBatches = rowBatches
	args270.Attributes = attributes
	err = args270.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvMutateRows() (io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error272 := thrift.NewTApplicationExceptionDefault()
		var error273 error
		error273, err = error272.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error273
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result271 := NewMutateRowsResult()
	err = result271.Read(iprot)
	iprot.ReadMessageEnd()
	if result271.Io != nil {
		io = result271.Io
	}
	if result271.Ia != nil {
		ia = result271.Ia
	}
	return
}

/**
 * Apply a series of batches (each a series of mutations on a single row)
 * in a single transaction.  If an exception is thrown, then the
 * transaction is aborted.  The specified timestamp is used, and
 * all entries will have an identical timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - RowBatches: list of row batches
 *  - Timestamp: timestamp
 *  - Attributes: Mutation attributes
 */
func (p *HbaseClient) MutateRowsTs(tableName Text, rowBatches []*BatchMutation, timestamp int64, attributes map[string]Text) (io *IOError, ia *IllegalArgument, err error) {
	err = p.SendMutateRowsTs(tableName, rowBatches, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvMutateRowsTs()
}

func (p *HbaseClient) SendMutateRowsTs(tableName Text, rowBatches []*BatchMutation, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("mutateRowsTs", thrift.CALL, p.SeqId)
	args275 := NewMutateRowsTsArgs()
	args275.TableName = tableName
	args275.RowBatches = rowBatches
	args275.Timestamp = timestamp
	args275.Attributes = attributes
	err = args275.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvMutateRowsTs() (io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error277 := thrift.NewTApplicationExceptionDefault()
		var error278 error
		error278, err = error277.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error278
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result276 := NewMutateRowsTsResult()
	err = result276.Read(iprot)
	iprot.ReadMessageEnd()
	if result276.Io != nil {
		io = result276.Io
	}
	if result276.Ia != nil {
		ia = result276.Ia
	}
	return
}

/**
 * Atomically increment the column value specified.  Returns the next value post increment.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row to increment
 *  - Column: name of column
 *  - Value: amount to increment by
 */
func (p *HbaseClient) AtomicIncrement(tableName Text, row Text, column Text, value int64) (retval279 int64, io *IOError, ia *IllegalArgument, err error) {
	err = p.SendAtomicIncrement(tableName, row, column, value)
	if err != nil {
		return
	}
	return p.RecvAtomicIncrement()
}

func (p *HbaseClient) SendAtomicIncrement(tableName Text, row Text, column Text, value int64) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("atomicIncrement", thrift.CALL, p.SeqId)
	args280 := NewAtomicIncrementArgs()
	args280.TableName = tableName
	args280.Row = row
	args280.Column = column
	args280.Value = value
	err = args280.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvAtomicIncrement() (value int64, io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error282 := thrift.NewTApplicationExceptionDefault()
		var error283 error
		error283, err = error282.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error283
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result281 := NewAtomicIncrementResult()
	err = result281.Read(iprot)
	iprot.ReadMessageEnd()
	value = result281.Success
	if result281.Io != nil {
		io = result281.Io
	}
	if result281.Ia != nil {
		ia = result281.Ia
	}
	return
}

/**
 * Delete all cells that match the passed row and column.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: Row to update
 *  - Column: name of column whose value is to be deleted
 *  - Attributes: Delete attributes
 */
func (p *HbaseClient) DeleteAll(tableName Text, row Text, column Text, attributes map[string]Text) (io *IOError, err error) {
	err = p.SendDeleteAll(tableName, row, column, attributes)
	if err != nil {
		return
	}
	return p.RecvDeleteAll()
}

func (p *HbaseClient) SendDeleteAll(tableName Text, row Text, column Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteAll", thrift.CALL, p.SeqId)
	args285 := NewDeleteAllArgs()
	args285.TableName = tableName
	args285.Row = row
	args285.Column = column
	args285.Attributes = attributes
	err = args285.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDeleteAll() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error287 := thrift.NewTApplicationExceptionDefault()
		var error288 error
		error288, err = error287.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error288
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result286 := NewDeleteAllResult()
	err = result286.Read(iprot)
	iprot.ReadMessageEnd()
	if result286.Io != nil {
		io = result286.Io
	}
	return
}

/**
 * Delete all cells that match the passed row and column and whose
 * timestamp is equal-to or older than the passed timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: Row to update
 *  - Column: name of column whose value is to be deleted
 *  - Timestamp: timestamp
 *  - Attributes: Delete attributes
 */
func (p *HbaseClient) DeleteAllTs(tableName Text, row Text, column Text, timestamp int64, attributes map[string]Text) (io *IOError, err error) {
	err = p.SendDeleteAllTs(tableName, row, column, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvDeleteAllTs()
}

func (p *HbaseClient) SendDeleteAllTs(tableName Text, row Text, column Text, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteAllTs", thrift.CALL, p.SeqId)
	args290 := NewDeleteAllTsArgs()
	args290.TableName = tableName
	args290.Row = row
	args290.Column = column
	args290.Timestamp = timestamp
	args290.Attributes = attributes
	err = args290.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDeleteAllTs() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error292 := thrift.NewTApplicationExceptionDefault()
		var error293 error
		error293, err = error292.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error293
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result291 := NewDeleteAllTsResult()
	err = result291.Read(iprot)
	iprot.ReadMessageEnd()
	if result291.Io != nil {
		io = result291.Io
	}
	return
}

/**
 * Completely delete the row's cells.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: key of the row to be completely deleted.
 *  - Attributes: Delete attributes
 */
func (p *HbaseClient) DeleteAllRow(tableName Text, row Text, attributes map[string]Text) (io *IOError, err error) {
	err = p.SendDeleteAllRow(tableName, row, attributes)
	if err != nil {
		return
	}
	return p.RecvDeleteAllRow()
}

func (p *HbaseClient) SendDeleteAllRow(tableName Text, row Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteAllRow", thrift.CALL, p.SeqId)
	args295 := NewDeleteAllRowArgs()
	args295.TableName = tableName
	args295.Row = row
	args295.Attributes = attributes
	err = args295.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDeleteAllRow() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error297 := thrift.NewTApplicationExceptionDefault()
		var error298 error
		error298, err = error297.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error298
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result296 := NewDeleteAllRowResult()
	err = result296.Read(iprot)
	iprot.ReadMessageEnd()
	if result296.Io != nil {
		io = result296.Io
	}
	return
}

/**
 * Increment a cell by the ammount.
 * Increments can be applied async if hbase.regionserver.thrift.coalesceIncrement is set to true.
 * False is the default.  Turn to true if you need the extra performance and can accept some
 * data loss if a thrift server dies with increments still in the queue.
 * 
 * Parameters:
 *  - Increment: The single increment to apply
 */
func (p *HbaseClient) Increment(increment *TIncrement) (io *IOError, err error) {
	err = p.SendIncrement(increment)
	if err != nil {
		return
	}
	return p.RecvIncrement()
}

func (p *HbaseClient) SendIncrement(increment *TIncrement) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("increment", thrift.CALL, p.SeqId)
	args300 := NewIncrementArgs()
	args300.Increment = increment
	err = args300.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvIncrement() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error302 := thrift.NewTApplicationExceptionDefault()
		var error303 error
		error303, err = error302.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error303
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result301 := NewIncrementResult()
	err = result301.Read(iprot)
	iprot.ReadMessageEnd()
	if result301.Io != nil {
		io = result301.Io
	}
	return
}

/**
 * Parameters:
 *  - Increments: The list of increments
 */
func (p *HbaseClient) IncrementRows(increments []*TIncrement) (io *IOError, err error) {
	err = p.SendIncrementRows(increments)
	if err != nil {
		return
	}
	return p.RecvIncrementRows()
}

func (p *HbaseClient) SendIncrementRows(increments []*TIncrement) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("incrementRows", thrift.CALL, p.SeqId)
	args305 := NewIncrementRowsArgs()
	args305.Increments = increments
	err = args305.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvIncrementRows() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error307 := thrift.NewTApplicationExceptionDefault()
		var error308 error
		error308, err = error307.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error308
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result306 := NewIncrementRowsResult()
	err = result306.Read(iprot)
	iprot.ReadMessageEnd()
	if result306.Io != nil {
		io = result306.Io
	}
	return
}

/**
 * Completely delete the row's cells marked with a timestamp
 * equal-to or older than the passed timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: key of the row to be completely deleted.
 *  - Timestamp: timestamp
 *  - Attributes: Delete attributes
 */
func (p *HbaseClient) DeleteAllRowTs(tableName Text, row Text, timestamp int64, attributes map[string]Text) (io *IOError, err error) {
	err = p.SendDeleteAllRowTs(tableName, row, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvDeleteAllRowTs()
}

func (p *HbaseClient) SendDeleteAllRowTs(tableName Text, row Text, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteAllRowTs", thrift.CALL, p.SeqId)
	args310 := NewDeleteAllRowTsArgs()
	args310.TableName = tableName
	args310.Row = row
	args310.Timestamp = timestamp
	args310.Attributes = attributes
	err = args310.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDeleteAllRowTs() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error312 := thrift.NewTApplicationExceptionDefault()
		var error313 error
		error313, err = error312.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error313
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result311 := NewDeleteAllRowTsResult()
	err = result311.Read(iprot)
	iprot.ReadMessageEnd()
	if result311.Io != nil {
		io = result311.Io
	}
	return
}

/**
 * Get a scanner on the current table, using the Scan instance
 * for the scan parameters.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Scan: Scan instance
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpenWithScan(tableName Text, scan *TScan, attributes map[string]Text) (retval314 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpenWithScan(tableName, scan, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpenWithScan()
}

func (p *HbaseClient) SendScannerOpenWithScan(tableName Text, scan *TScan, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpenWithScan", thrift.CALL, p.SeqId)
	args315 := NewScannerOpenWithScanArgs()
	args315.TableName = tableName
	args315.Scan = scan
	args315.Attributes = attributes
	err = args315.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpenWithScan() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error317 := thrift.NewTApplicationExceptionDefault()
		var error318 error
		error318, err = error317.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error318
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result316 := NewScannerOpenWithScanResult()
	err = result316.Read(iprot)
	iprot.ReadMessageEnd()
	value = result316.Success
	if result316.Io != nil {
		io = result316.Io
	}
	return
}

/**
 * Get a scanner on the current table starting at the specified row and
 * ending at the last row in the table.  Return the specified columns.
 * 
 * @return scanner id to be used with other scanner procedures
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpen(tableName Text, startRow Text, columns []Text, attributes map[string]Text) (retval319 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpen(tableName, startRow, columns, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpen()
}

func (p *HbaseClient) SendScannerOpen(tableName Text, startRow Text, columns []Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpen", thrift.CALL, p.SeqId)
	args320 := NewScannerOpenArgs()
	args320.TableName = tableName
	args320.StartRow = startRow
	args320.Columns = columns
	args320.Attributes = attributes
	err = args320.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpen() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error322 := thrift.NewTApplicationExceptionDefault()
		var error323 error
		error323, err = error322.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error323
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result321 := NewScannerOpenResult()
	err = result321.Read(iprot)
	iprot.ReadMessageEnd()
	value = result321.Success
	if result321.Io != nil {
		io = result321.Io
	}
	return
}

/**
 * Get a scanner on the current table starting and stopping at the
 * specified rows.  ending at the last row in the table.  Return the
 * specified columns.
 * 
 * @return scanner id to be used with other scanner procedures
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - StopRow: row to stop scanning on. This row is *not* included in the
 * scanner's results
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpenWithStop(tableName Text, startRow Text, stopRow Text, columns []Text, attributes map[string]Text) (retval324 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpenWithStop(tableName, startRow, stopRow, columns, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpenWithStop()
}

func (p *HbaseClient) SendScannerOpenWithStop(tableName Text, startRow Text, stopRow Text, columns []Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpenWithStop", thrift.CALL, p.SeqId)
	args325 := NewScannerOpenWithStopArgs()
	args325.TableName = tableName
	args325.StartRow = startRow
	args325.StopRow = stopRow
	args325.Columns = columns
	args325.Attributes = attributes
	err = args325.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpenWithStop() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error327 := thrift.NewTApplicationExceptionDefault()
		var error328 error
		error328, err = error327.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error328
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result326 := NewScannerOpenWithStopResult()
	err = result326.Read(iprot)
	iprot.ReadMessageEnd()
	value = result326.Success
	if result326.Io != nil {
		io = result326.Io
	}
	return
}

/**
 * Open a scanner for a given prefix.  That is all rows will have the specified
 * prefix. No other rows will be returned.
 * 
 * @return scanner id to use with other scanner calls
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartAndPrefix: the prefix (and thus start row) of the keys you want
 *  - Columns: the columns you want returned
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpenWithPrefix(tableName Text, startAndPrefix Text, columns []Text, attributes map[string]Text) (retval329 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpenWithPrefix(tableName, startAndPrefix, columns, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpenWithPrefix()
}

func (p *HbaseClient) SendScannerOpenWithPrefix(tableName Text, startAndPrefix Text, columns []Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.CALL, p.SeqId)
	args330 := NewScannerOpenWithPrefixArgs()
	args330.TableName = tableName
	args330.StartAndPrefix = startAndPrefix
	args330.Columns = columns
	args330.Attributes = attributes
	err = args330.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpenWithPrefix() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error332 := thrift.NewTApplicationExceptionDefault()
		var error333 error
		error333, err = error332.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error333
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result331 := NewScannerOpenWithPrefixResult()
	err = result331.Read(iprot)
	iprot.ReadMessageEnd()
	value = result331.Success
	if result331.Io != nil {
		io = result331.Io
	}
	return
}

/**
 * Get a scanner on the current table starting at the specified row and
 * ending at the last row in the table.  Return the specified columns.
 * Only values with the specified timestamp are returned.
 * 
 * @return scanner id to be used with other scanner procedures
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Timestamp: timestamp
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpenTs(tableName Text, startRow Text, columns []Text, timestamp int64, attributes map[string]Text) (retval334 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpenTs(tableName, startRow, columns, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpenTs()
}

func (p *HbaseClient) SendScannerOpenTs(tableName Text, startRow Text, columns []Text, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpenTs", thrift.CALL, p.SeqId)
	args335 := NewScannerOpenTsArgs()
	args335.TableName = tableName
	args335.StartRow = startRow
	args335.Columns = columns
	args335.Timestamp = timestamp
	args335.Attributes = attributes
	err = args335.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpenTs() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error337 := thrift.NewTApplicationExceptionDefault()
		var error338 error
		error338, err = error337.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error338
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result336 := NewScannerOpenTsResult()
	err = result336.Read(iprot)
	iprot.ReadMessageEnd()
	value = result336.Success
	if result336.Io != nil {
		io = result336.Io
	}
	return
}

/**
 * Get a scanner on the current table starting and stopping at the
 * specified rows.  ending at the last row in the table.  Return the
 * specified columns.  Only values with the specified timestamp are
 * returned.
 * 
 * @return scanner id to be used with other scanner procedures
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - StopRow: row to stop scanning on. This row is *not* included in the
 * scanner's results
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Timestamp: timestamp
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpenWithStopTs(tableName Text, startRow Text, stopRow Text, columns []Text, timestamp int64, attributes map[string]Text) (retval339 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpenWithStopTs(tableName, startRow, stopRow, columns, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpenWithStopTs()
}

func (p *HbaseClient) SendScannerOpenWithStopTs(tableName Text, startRow Text, stopRow Text, columns []Text, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.CALL, p.SeqId)
	args340 := NewScannerOpenWithStopTsArgs()
	args340.TableName = tableName
	args340.StartRow = startRow
	args340.StopRow = stopRow
	args340.Columns = columns
	args340.Timestamp = timestamp
	args340.Attributes = attributes
	err = args340.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpenWithStopTs() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error342 := thrift.NewTApplicationExceptionDefault()
		var error343 error
		error343, err = error342.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error343
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result341 := NewScannerOpenWithStopTsResult()
	err = result341.Read(iprot)
	iprot.ReadMessageEnd()
	value = result341.Success
	if result341.Io != nil {
		io = result341.Io
	}
	return
}

/**
 * Returns the scanner's current row value and advances to the next
 * row in the table.  When there are no more rows in the table, or a key
 * greater-than-or-equal-to the scanner's specified stopRow is reached,
 * an empty list is returned.
 * 
 * @return a TRowResult containing the current row and a map of the columns to TCells.
 * 
 * @throws IllegalArgument if ScannerID is invalid
 * 
 * @throws NotFound when the scanner reaches the end
 * 
 * Parameters:
 *  - Id: id of a scanner returned by scannerOpen
 */
func (p *HbaseClient) ScannerGet(id ScannerID) (retval344 []*TRowResult, io *IOError, ia *IllegalArgument, err error) {
	err = p.SendScannerGet(id)
	if err != nil {
		return
	}
	return p.RecvScannerGet()
}

func (p *HbaseClient) SendScannerGet(id ScannerID) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerGet", thrift.CALL, p.SeqId)
	args345 := NewScannerGetArgs()
	args345.Id = id
	err = args345.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerGet() (value []*TRowResult, io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error347 := thrift.NewTApplicationExceptionDefault()
		var error348 error
		error348, err = error347.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error348
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result346 := NewScannerGetResult()
	err = result346.Read(iprot)
	iprot.ReadMessageEnd()
	value = result346.Success
	if result346.Io != nil {
		io = result346.Io
	}
	if result346.Ia != nil {
		ia = result346.Ia
	}
	return
}

/**
 * Returns, starting at the scanner's current row value nbRows worth of
 * rows and advances to the next row in the table.  When there are no more
 * rows in the table, or a key greater-than-or-equal-to the scanner's
 * specified stopRow is reached,  an empty list is returned.
 * 
 * @return a TRowResult containing the current row and a map of the columns to TCells.
 * 
 * @throws IllegalArgument if ScannerID is invalid
 * 
 * @throws NotFound when the scanner reaches the end
 * 
 * Parameters:
 *  - Id: id of a scanner returned by scannerOpen
 *  - NbRows: number of results to return
 */
func (p *HbaseClient) ScannerGetList(id ScannerID, nbRows int32) (retval349 []*TRowResult, io *IOError, ia *IllegalArgument, err error) {
	err = p.SendScannerGetList(id, nbRows)
	if err != nil {
		return
	}
	return p.RecvScannerGetList()
}

func (p *HbaseClient) SendScannerGetList(id ScannerID, nbRows int32) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerGetList", thrift.CALL, p.SeqId)
	args350 := NewScannerGetListArgs()
	args350.Id = id
	args350.NbRows = nbRows
	err = args350.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerGetList() (value []*TRowResult, io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error352 := thrift.NewTApplicationExceptionDefault()
		var error353 error
		error353, err = error352.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error353
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result351 := NewScannerGetListResult()
	err = result351.Read(iprot)
	iprot.ReadMessageEnd()
	value = result351.Success
	if result351.Io != nil {
		io = result351.Io
	}
	if result351.Ia != nil {
		ia = result351.Ia
	}
	return
}

/**
 * Closes the server-state associated with an open scanner.
 * 
 * @throws IllegalArgument if ScannerID is invalid
 * 
 * Parameters:
 *  - Id: id of a scanner returned by scannerOpen
 */
func (p *HbaseClient) ScannerClose(id ScannerID) (io *IOError, ia *IllegalArgument, err error) {
	err = p.SendScannerClose(id)
	if err != nil {
		return
	}
	return p.RecvScannerClose()
}

func (p *HbaseClient) SendScannerClose(id ScannerID) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerClose", thrift.CALL, p.SeqId)
	args355 := NewScannerCloseArgs()
	args355.Id = id
	err = args355.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerClose() (io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error357 := thrift.NewTApplicationExceptionDefault()
		var error358 error
		error358, err = error357.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error358
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result356 := NewScannerCloseResult()
	err = result356.Read(iprot)
	iprot.ReadMessageEnd()
	if result356.Io != nil {
		io = result356.Io
	}
	if result356.Ia != nil {
		ia = result356.Ia
	}
	return
}

/**
 * Get the row just before the specified one.
 * 
 * @return value for specified row/column
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Family: column name
 */
func (p *HbaseClient) GetRowOrBefore(tableName Text, row Text, family Text) (retval359 []*TCell, io *IOError, err error) {
	err = p.SendGetRowOrBefore(tableName, row, family)
	if err != nil {
		return
	}
	return p.RecvGetRowOrBefore()
}

func (p *HbaseClient) SendGetRowOrBefore(tableName Text, row Text, family Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowOrBefore", thrift.CALL, p.SeqId)
	args360 := NewGetRowOrBeforeArgs()
	args360.TableName = tableName
	args360.Row = row
	args360.Family = family
	err = args360.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowOrBefore() (value []*TCell, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error362 := thrift.NewTApplicationExceptionDefault()
		var error363 error
		error363, err = error362.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error363
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result361 := NewGetRowOrBeforeResult()
	err = result361.Read(iprot)
	iprot.ReadMessageEnd()
	value = result361.Success
	if result361.Io != nil {
		io = result361.Io
	}
	return
}

/**
 * Get the regininfo for the specified row. It scans
 * the metatable to find region's start and end keys.
 * 
 * @return value for specified row/column
 * 
 * Parameters:
 *  - Row: row key
 */
func (p *HbaseClient) GetRegionInfo(row Text) (retval364 *TRegionInfo, io *IOError, err error) {
	err = p.SendGetRegionInfo(row)
	if err != nil {
		return
	}
	return p.RecvGetRegionInfo()
}

func (p *HbaseClient) SendGetRegionInfo(row Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRegionInfo", thrift.CALL, p.SeqId)
	args365 := NewGetRegionInfoArgs()
	args365.Row = row
	err = args365.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRegionInfo() (value *TRegionInfo, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error367 := thrift.NewTApplicationExceptionDefault()
		var error368 error
		error368, err = error367.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error368
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result366 := NewGetRegionInfoResult()
	err = result366.Read(iprot)
	iprot.ReadMessageEnd()
	value = result366.Success
	if result366.Io != nil {
		io = result366.Io
	}
	return
}

type HbaseProcessor struct {
	handler      IHbase
	processorMap map[string]thrift.TProcessorFunction
}

func (p *HbaseProcessor) Handler() IHbase {
	return p.handler
}

func (p *HbaseProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *HbaseProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
	processor, exists = p.processorMap[key]
	return processor, exists
}

func (p *HbaseProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewHbaseProcessor(handler IHbase) *HbaseProcessor {

	self369 := &HbaseProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self369.processorMap["enableTable"] = &hbaseProcessorEnableTable{handler: handler}
	self369.processorMap["disableTable"] = &hbaseProcessorDisableTable{handler: handler}
	self369.processorMap["isTableEnabled"] = &hbaseProcessorIsTableEnabled{handler: handler}
	self369.processorMap["compact"] = &hbaseProcessorCompact{handler: handler}
	self369.processorMap["majorCompact"] = &hbaseProcessorMajorCompact{handler: handler}
	self369.processorMap["getTableNames"] = &hbaseProcessorGetTableNames{handler: handler}
	self369.processorMap["getColumnDescriptors"] = &hbaseProcessorGetColumnDescriptors{handler: handler}
	self369.processorMap["getTableRegions"] = &hbaseProcessorGetTableRegions{handler: handler}
	self369.processorMap["createTable"] = &hbaseProcessorCreateTable{handler: handler}
	self369.processorMap["deleteTable"] = &hbaseProcessorDeleteTable{handler: handler}
	self369.processorMap["get"] = &hbaseProcessorGet{handler: handler}
	self369.processorMap["getVer"] = &hbaseProcessorGetVer{handler: handler}
	self369.processorMap["getVerTs"] = &hbaseProcessorGetVerTs{handler: handler}
	self369.processorMap["getRow"] = &hbaseProcessorGetRow{handler: handler}
	self369.processorMap["getRowWithColumns"] = &hbaseProcessorGetRowWithColumns{handler: handler}
	self369.processorMap["getRowTs"] = &hbaseProcessorGetRowTs{handler: handler}
	self369.processorMap["getRowWithColumnsTs"] = &hbaseProcessorGetRowWithColumnsTs{handler: handler}
	self369.processorMap["getRows"] = &hbaseProcessorGetRows{handler: handler}
	self369.processorMap["getRowsWithColumns"] = &hbaseProcessorGetRowsWithColumns{handler: handler}
	self369.processorMap["getRowsTs"] = &hbaseProcessorGetRowsTs{handler: handler}
	self369.processorMap["getRowsWithColumnsTs"] = &hbaseProcessorGetRowsWithColumnsTs{handler: handler}
	self369.processorMap["mutateRow"] = &hbaseProcessorMutateRow{handler: handler}
	self369.processorMap["mutateRowTs"] = &hbaseProcessorMutateRowTs{handler: handler}
	self369.processorMap["mutateRows"] = &hbaseProcessorMutateRows{handler: handler}
	self369.processorMap["mutateRowsTs"] = &hbaseProcessorMutateRowsTs{handler: handler}
	self369.processorMap["atomicIncrement"] = &hbaseProcessorAtomicIncrement{handler: handler}
	self369.processorMap["deleteAll"] = &hbaseProcessorDeleteAll{handler: handler}
	self369.processorMap["deleteAllTs"] = &hbaseProcessorDeleteAllTs{handler: handler}
	self369.processorMap["deleteAllRow"] = &hbaseProcessorDeleteAllRow{handler: handler}
	self369.processorMap["increment"] = &hbaseProcessorIncrement{handler: handler}
	self369.processorMap["incrementRows"] = &hbaseProcessorIncrementRows{handler: handler}
	self369.processorMap["deleteAllRowTs"] = &hbaseProcessorDeleteAllRowTs{handler: handler}
	self369.processorMap["scannerOpenWithScan"] = &hbaseProcessorScannerOpenWithScan{handler: handler}
	self369.processorMap["scannerOpen"] = &hbaseProcessorScannerOpen{handler: handler}
	self369.processorMap["scannerOpenWithStop"] = &hbaseProcessorScannerOpenWithStop{handler: handler}
	self369.processorMap["scannerOpenWithPrefix"] = &hbaseProcessorScannerOpenWithPrefix{handler: handler}
	self369.processorMap["scannerOpenTs"] = &hbaseProcessorScannerOpenTs{handler: handler}
	self369.processorMap["scannerOpenWithStopTs"] = &hbaseProcessorScannerOpenWithStopTs{handler: handler}
	self369.processorMap["scannerGet"] = &hbaseProcessorScannerGet{handler: handler}
	self369.processorMap["scannerGetList"] = &hbaseProcessorScannerGetList{handler: handler}
	self369.processorMap["scannerClose"] = &hbaseProcessorScannerClose{handler: handler}
	self369.processorMap["getRowOrBefore"] = &hbaseProcessorGetRowOrBefore{handler: handler}
	self369.processorMap["getRegionInfo"] = &hbaseProcessorGetRegionInfo{handler: handler}
	return self369
}

func (p *HbaseProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	process, nameFound := p.GetProcessorFunction(name)
	if !nameFound || process == nil {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x370 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
		x370.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return false, x370
	}
	return process.Process(seqId, iprot, oprot)
}

type hbaseProcessorEnableTable struct {
	handler IHbase
}

func (p *hbaseProcessorEnableTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewEnableTableArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("enableTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewEnableTableResult()
	if result.Io, err = p.handler.EnableTable(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing enableTable: "+err.Error())
		oprot.WriteMessageBegin("enableTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("enableTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDisableTable struct {
	handler IHbase
}

func (p *hbaseProcessorDisableTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDisableTableArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("disableTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDisableTableResult()
	if result.Io, err = p.handler.DisableTable(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disableTable: "+err.Error())
		oprot.WriteMessageBegin("disableTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("disableTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorIsTableEnabled struct {
	handler IHbase
}

func (p *hbaseProcessorIsTableEnabled) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewIsTableEnabledArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isTableEnabled", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewIsTableEnabledResult()
	if result.Success, result.Io, err = p.handler.IsTableEnabled(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isTableEnabled: "+err.Error())
		oprot.WriteMessageBegin("isTableEnabled", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("isTableEnabled", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorCompact struct {
	handler IHbase
}

func (p *hbaseProcessorCompact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCompactArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("compact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCompactResult()
	if result.Io, err = p.handler.Compact(args.TableNameOrRegionName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing compact: "+err.Error())
		oprot.WriteMessageBegin("compact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("compact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMajorCompact struct {
	handler IHbase
}

func (p *hbaseProcessorMajorCompact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMajorCompactArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("majorCompact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMajorCompactResult()
	if result.Io, err = p.handler.MajorCompact(args.TableNameOrRegionName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing majorCompact: "+err.Error())
		oprot.WriteMessageBegin("majorCompact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("majorCompact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetTableNames struct {
	handler IHbase
}

func (p *hbaseProcessorGetTableNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetTableNamesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTableNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetTableNamesResult()
	if result.Success, result.Io, err = p.handler.GetTableNames(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTableNames: "+err.Error())
		oprot.WriteMessageBegin("getTableNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getTableNames", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetColumnDescriptors struct {
	handler IHbase
}

func (p *hbaseProcessorGetColumnDescriptors) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetColumnDescriptorsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getColumnDescriptors", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetColumnDescriptorsResult()
	if result.Success, result.Io, err = p.handler.GetColumnDescriptors(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getColumnDescriptors: "+err.Error())
		oprot.WriteMessageBegin("getColumnDescriptors", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getColumnDescriptors", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetTableRegions struct {
	handler IHbase
}

func (p *hbaseProcessorGetTableRegions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetTableRegionsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTableRegions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetTableRegionsResult()
	if result.Success, result.Io, err = p.handler.GetTableRegions(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTableRegions: "+err.Error())
		oprot.WriteMessageBegin("getTableRegions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getTableRegions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorCreateTable struct {
	handler IHbase
}

func (p *hbaseProcessorCreateTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCreateTableArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCreateTableResult()
	if result.Io, result.Ia, result.Exist, err = p.handler.CreateTable(args.TableName, args.ColumnFamilies); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTable: "+err.Error())
		oprot.WriteMessageBegin("createTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("createTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteTable struct {
	handler IHbase
}

func (p *hbaseProcessorDeleteTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteTableArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteTableResult()
	if result.Io, err = p.handler.DeleteTable(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteTable: "+err.Error())
		oprot.WriteMessageBegin("deleteTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGet struct {
	handler IHbase
}

func (p *hbaseProcessorGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetResult()
	if result.Success, result.Io, err = p.handler.Get(args.TableName, args.Row, args.Column, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: "+err.Error())
		oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetVer struct {
	handler IHbase
}

func (p *hbaseProcessorGetVer) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetVerArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getVer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetVerResult()
	if result.Success, result.Io, err = p.handler.GetVer(args.TableName, args.Row, args.Column, args.NumVersions, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVer: "+err.Error())
		oprot.WriteMessageBegin("getVer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getVer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetVerTs struct {
	handler IHbase
}

func (p *hbaseProcessorGetVerTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetVerTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getVerTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetVerTsResult()
	if result.Success, result.Io, err = p.handler.GetVerTs(args.TableName, args.Row, args.Column, args.Timestamp, args.NumVersions, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVerTs: "+err.Error())
		oprot.WriteMessageBegin("getVerTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getVerTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRow struct {
	handler IHbase
}

func (p *hbaseProcessorGetRow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowResult()
	if result.Success, result.Io, err = p.handler.GetRow(args.TableName, args.Row, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRow: "+err.Error())
		oprot.WriteMessageBegin("getRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowWithColumns struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowWithColumns) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowWithColumnsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowWithColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowWithColumnsResult()
	if result.Success, result.Io, err = p.handler.GetRowWithColumns(args.TableName, args.Row, args.Columns, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowWithColumns: "+err.Error())
		oprot.WriteMessageBegin("getRowWithColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowWithColumns", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowTs struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowTsResult()
	if result.Success, result.Io, err = p.handler.GetRowTs(args.TableName, args.Row, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowTs: "+err.Error())
		oprot.WriteMessageBegin("getRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowWithColumnsTs struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowWithColumnsTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowWithColumnsTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowWithColumnsTsResult()
	if result.Success, result.Io, err = p.handler.GetRowWithColumnsTs(args.TableName, args.Row, args.Columns, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowWithColumnsTs: "+err.Error())
		oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRows struct {
	handler IHbase
}

func (p *hbaseProcessorGetRows) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowsResult()
	if result.Success, result.Io, err = p.handler.GetRows(args.TableName, args.Rows, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRows: "+err.Error())
		oprot.WriteMessageBegin("getRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRows", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowsWithColumns struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowsWithColumns) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowsWithColumnsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowsWithColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowsWithColumnsResult()
	if result.Success, result.Io, err = p.handler.GetRowsWithColumns(args.TableName, args.Rows, args.Columns, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowsWithColumns: "+err.Error())
		oprot.WriteMessageBegin("getRowsWithColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowsWithColumns", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowsTs struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowsTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowsTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowsTsResult()
	if result.Success, result.Io, err = p.handler.GetRowsTs(args.TableName, args.Rows, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowsTs: "+err.Error())
		oprot.WriteMessageBegin("getRowsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowsTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowsWithColumnsTs struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowsWithColumnsTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowsWithColumnsTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowsWithColumnsTsResult()
	if result.Success, result.Io, err = p.handler.GetRowsWithColumnsTs(args.TableName, args.Rows, args.Columns, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowsWithColumnsTs: "+err.Error())
		oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMutateRow struct {
	handler IHbase
}

func (p *hbaseProcessorMutateRow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMutateRowArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mutateRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMutateRowResult()
	if result.Io, result.Ia, err = p.handler.MutateRow(args.TableName, args.Row, args.Mutations, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRow: "+err.Error())
		oprot.WriteMessageBegin("mutateRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("mutateRow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMutateRowTs struct {
	handler IHbase
}

func (p *hbaseProcessorMutateRowTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMutateRowTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mutateRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMutateRowTsResult()
	if result.Io, result.Ia, err = p.handler.MutateRowTs(args.TableName, args.Row, args.Mutations, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRowTs: "+err.Error())
		oprot.WriteMessageBegin("mutateRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("mutateRowTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMutateRows struct {
	handler IHbase
}

func (p *hbaseProcessorMutateRows) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMutateRowsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mutateRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMutateRowsResult()
	if result.Io, result.Ia, err = p.handler.MutateRows(args.TableName, args.RowBatches, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRows: "+err.Error())
		oprot.WriteMessageBegin("mutateRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("mutateRows", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMutateRowsTs struct {
	handler IHbase
}

func (p *hbaseProcessorMutateRowsTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMutateRowsTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mutateRowsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMutateRowsTsResult()
	if result.Io, result.Ia, err = p.handler.MutateRowsTs(args.TableName, args.RowBatches, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRowsTs: "+err.Error())
		oprot.WriteMessageBegin("mutateRowsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("mutateRowsTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorAtomicIncrement struct {
	handler IHbase
}

func (p *hbaseProcessorAtomicIncrement) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAtomicIncrementArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("atomicIncrement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAtomicIncrementResult()
	if result.Success, result.Io, result.Ia, err = p.handler.AtomicIncrement(args.TableName, args.Row, args.Column, args.Value); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing atomicIncrement: "+err.Error())
		oprot.WriteMessageBegin("atomicIncrement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("atomicIncrement", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteAll struct {
	handler IHbase
}

func (p *hbaseProcessorDeleteAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteAllArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteAllResult()
	if result.Io, err = p.handler.DeleteAll(args.TableName, args.Row, args.Column, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAll: "+err.Error())
		oprot.WriteMessageBegin("deleteAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteAll", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteAllTs struct {
	handler IHbase
}

func (p *hbaseProcessorDeleteAllTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteAllTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteAllTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteAllTsResult()
	if result.Io, err = p.handler.DeleteAllTs(args.TableName, args.Row, args.Column, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAllTs: "+err.Error())
		oprot.WriteMessageBegin("deleteAllTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteAllTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteAllRow struct {
	handler IHbase
}

func (p *hbaseProcessorDeleteAllRow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteAllRowArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteAllRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteAllRowResult()
	if result.Io, err = p.handler.DeleteAllRow(args.TableName, args.Row, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAllRow: "+err.Error())
		oprot.WriteMessageBegin("deleteAllRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteAllRow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorIncrement struct {
	handler IHbase
}

func (p *hbaseProcessorIncrement) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewIncrementArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("increment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewIncrementResult()
	if result.Io, err = p.handler.Increment(args.Increment); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing increment: "+err.Error())
		oprot.WriteMessageBegin("increment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("increment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorIncrementRows struct {
	handler IHbase
}

func (p *hbaseProcessorIncrementRows) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewIncrementRowsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("incrementRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewIncrementRowsResult()
	if result.Io, err = p.handler.IncrementRows(args.Increments); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing incrementRows: "+err.Error())
		oprot.WriteMessageBegin("incrementRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("incrementRows", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteAllRowTs struct {
	handler IHbase
}

func (p *hbaseProcessorDeleteAllRowTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteAllRowTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteAllRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteAllRowTsResult()
	if result.Io, err = p.handler.DeleteAllRowTs(args.TableName, args.Row, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAllRowTs: "+err.Error())
		oprot.WriteMessageBegin("deleteAllRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteAllRowTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenWithScan struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpenWithScan) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenWithScanArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenWithScan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenWithScanResult()
	if result.Success, result.Io, err = p.handler.ScannerOpenWithScan(args.TableName, args.Scan, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithScan: "+err.Error())
		oprot.WriteMessageBegin("scannerOpenWithScan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpenWithScan", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpen struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpen) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpen", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenResult()
	if result.Success, result.Io, err = p.handler.ScannerOpen(args.TableName, args.StartRow, args.Columns, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpen: "+err.Error())
		oprot.WriteMessageBegin("scannerOpen", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpen", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenWithStop struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpenWithStop) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenWithStopArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenWithStop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenWithStopResult()
	if result.Success, result.Io, err = p.handler.ScannerOpenWithStop(args.TableName, args.StartRow, args.StopRow, args.Columns, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithStop: "+err.Error())
		oprot.WriteMessageBegin("scannerOpenWithStop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpenWithStop", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenWithPrefix struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpenWithPrefix) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenWithPrefixArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenWithPrefixResult()
	if result.Success, result.Io, err = p.handler.ScannerOpenWithPrefix(args.TableName, args.StartAndPrefix, args.Columns, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithPrefix: "+err.Error())
		oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenTs struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpenTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenTsResult()
	if result.Success, result.Io, err = p.handler.ScannerOpenTs(args.TableName, args.StartRow, args.Columns, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenTs: "+err.Error())
		oprot.WriteMessageBegin("scannerOpenTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpenTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenWithStopTs struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpenWithStopTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenWithStopTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenWithStopTsResult()
	if result.Success, result.Io, err = p.handler.ScannerOpenWithStopTs(args.TableName, args.StartRow, args.StopRow, args.Columns, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithStopTs: "+err.Error())
		oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerGet struct {
	handler IHbase
}

func (p *hbaseProcessorScannerGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerGetArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerGet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerGetResult()
	if result.Success, result.Io, result.Ia, err = p.handler.ScannerGet(args.Id); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerGet: "+err.Error())
		oprot.WriteMessageBegin("scannerGet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerGet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerGetList struct {
	handler IHbase
}

func (p *hbaseProcessorScannerGetList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerGetListArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerGetList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerGetListResult()
	if result.Success, result.Io, result.Ia, err = p.handler.ScannerGetList(args.Id, args.NbRows); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerGetList: "+err.Error())
		oprot.WriteMessageBegin("scannerGetList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerGetList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerClose struct {
	handler IHbase
}

func (p *hbaseProcessorScannerClose) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerCloseArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerClose", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerCloseResult()
	if result.Io, result.Ia, err = p.handler.ScannerClose(args.Id); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerClose: "+err.Error())
		oprot.WriteMessageBegin("scannerClose", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerClose", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowOrBefore struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowOrBefore) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowOrBeforeArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowOrBefore", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowOrBeforeResult()
	if result.Success, result.Io, err = p.handler.GetRowOrBefore(args.TableName, args.Row, args.Family); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowOrBefore: "+err.Error())
		oprot.WriteMessageBegin("getRowOrBefore", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowOrBefore", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRegionInfo struct {
	handler IHbase
}

func (p *hbaseProcessorGetRegionInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRegionInfoArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRegionInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRegionInfoResult()
	if result.Success, result.Io, err = p.handler.GetRegionInfo(args.Row); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRegionInfo: "+err.Error())
		oprot.WriteMessageBegin("getRegionInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRegionInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - TableName: name of the table
 */
type EnableTableArgs struct {
	TableName Bytes "tableName" // 1
}

var tstructEnableTableArgs = thrift.NewTStruct("enableTable_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
})

func (*EnableTableArgs) GetTStruct() thrift.TStruct { return tstructEnableTableArgs }
func NewEnableTableArgs() *EnableTableArgs {
	output := &EnableTableArgs{}
	{
	}
	return output
}

func (p *EnableTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructEnableTableArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructEnableTableArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Bytes
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *EnableTableArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v371, err372 := iprot.ReadBinary()
	if err372 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err372)
	}
	p.TableName = Bytes(v371)
	return err
}

func (p *EnableTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("enableTable_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *EnableTableArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *EnableTableArgs) TStructName() string {
	return "EnableTableArgs"
}

func (p *EnableTableArgs) ThriftName() string {
	return "enableTable_args"
}

func (p *EnableTableArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *EnableTableArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type EnableTableResult struct {
	Io *IOError "io" // 1
}

var tstructEnableTableResult = thrift.NewTStruct("enableTable_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*EnableTableResult) GetTStruct() thrift.TStruct { return tstructEnableTableResult }
func NewEnableTableResult() *EnableTableResult {
	output := &EnableTableResult{}
	{
	}
	return output
}

func (p *EnableTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructEnableTableResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructEnableTableResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *EnableTableResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err375 := p.Io.Read(iprot)
	if err375 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err375)
	}
	return err
}

func (p *EnableTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("enableTable_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *EnableTableResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *EnableTableResult) TStructName() string {
	return "EnableTableResult"
}

func (p *EnableTableResult) ThriftName() string {
	return "enableTable_result"
}

func (p *EnableTableResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *EnableTableResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of the table
 */
type DisableTableArgs struct {
	TableName Bytes "tableName" // 1
}

var tstructDisableTableArgs = thrift.NewTStruct("disableTable_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
})

func (*DisableTableArgs) GetTStruct() thrift.TStruct { return tstructDisableTableArgs }
func NewDisableTableArgs() *DisableTableArgs {
	output := &DisableTableArgs{}
	{
	}
	return output
}

func (p *DisableTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDisableTableArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDisableTableArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Bytes
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DisableTableArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v376, err377 := iprot.ReadBinary()
	if err377 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err377)
	}
	p.TableName = Bytes(v376)
	return err
}

func (p *DisableTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("disableTable_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DisableTableArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DisableTableArgs) TStructName() string {
	return "DisableTableArgs"
}

func (p *DisableTableArgs) ThriftName() string {
	return "disableTable_args"
}

func (p *DisableTableArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *DisableTableArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DisableTableResult struct {
	Io *IOError "io" // 1
}

var tstructDisableTableResult = thrift.NewTStruct("disableTable_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*DisableTableResult) GetTStruct() thrift.TStruct { return tstructDisableTableResult }
func NewDisableTableResult() *DisableTableResult {
	output := &DisableTableResult{}
	{
	}
	return output
}

func (p *DisableTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDisableTableResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDisableTableResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DisableTableResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err380 := p.Io.Read(iprot)
	if err380 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err380)
	}
	return err
}

func (p *DisableTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("disableTable_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DisableTableResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DisableTableResult) TStructName() string {
	return "DisableTableResult"
}

func (p *DisableTableResult) ThriftName() string {
	return "disableTable_result"
}

func (p *DisableTableResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DisableTableResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of the table to check
 */
type IsTableEnabledArgs struct {
	TableName Bytes "tableName" // 1
}

var tstructIsTableEnabledArgs = thrift.NewTStruct("isTableEnabled_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
})

func (*IsTableEnabledArgs) GetTStruct() thrift.TStruct { return tstructIsTableEnabledArgs }
func NewIsTableEnabledArgs() *IsTableEnabledArgs {
	output := &IsTableEnabledArgs{}
	{
	}
	return output
}

func (p *IsTableEnabledArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIsTableEnabledArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIsTableEnabledArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Bytes
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IsTableEnabledArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v381, err382 := iprot.ReadBinary()
	if err382 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err382)
	}
	p.TableName = Bytes(v381)
	return err
}

func (p *IsTableEnabledArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("isTableEnabled_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IsTableEnabledArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IsTableEnabledArgs) TStructName() string {
	return "IsTableEnabledArgs"
}

func (p *IsTableEnabledArgs) ThriftName() string {
	return "isTableEnabled_args"
}

func (p *IsTableEnabledArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *IsTableEnabledArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type IsTableEnabledResult struct {
	Success bool     "success" // 0
	Io      *IOError "io"      // 1
}

var tstructIsTableEnabledResult = thrift.NewTStruct("isTableEnabled_result", []thrift.TField{
	thrift.NewTField("success", thrift.BOOL, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*IsTableEnabledResult) GetTStruct() thrift.TStruct { return tstructIsTableEnabledResult }
func NewIsTableEnabledResult() *IsTableEnabledResult {
	output := &IsTableEnabledResult{}
	{
	}
	return output
}

func (p *IsTableEnabledResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIsTableEnabledResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIsTableEnabledResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //bool
			if fieldTypeId == thrift.BOOL {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IsTableEnabledResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v383, err384 := iprot.ReadBool()
	if err384 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err384)
	}
	p.Success = v383
	return err
}

func (p *IsTableEnabledResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err387 := p.Io.Read(iprot)
	if err387 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err387)
	}
	return err
}

func (p *IsTableEnabledResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("isTableEnabled_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IsTableEnabledResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *IsTableEnabledResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IsTableEnabledResult) TStructName() string {
	return "IsTableEnabledResult"
}

func (p *IsTableEnabledResult) ThriftName() string {
	return "isTableEnabled_result"
}

func (p *IsTableEnabledResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *IsTableEnabledResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.BOOL, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableNameOrRegionName
 */
type CompactArgs struct {
	TableNameOrRegionName Bytes "tableNameOrRegionName" // 1
}

var tstructCompactArgs = thrift.NewTStruct("compact_args", []thrift.TField{
	thrift.NewTField("tableNameOrRegionName", thrift.STRING, 1),
})

func (*CompactArgs) GetTStruct() thrift.TStruct { return tstructCompactArgs }
func NewCompactArgs() *CompactArgs {
	output := &CompactArgs{}
	{
	}
	return output
}

func (p *CompactArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCompactArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCompactArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Bytes
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CompactArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v388, err389 := iprot.ReadBinary()
	if err389 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableNameOrRegionName", p.ThriftName(), err389)
	}
	p.TableNameOrRegionName = Bytes(v388)
	return err
}

func (p *CompactArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("compact_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CompactArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableNameOrRegionName != nil {
		err = oprot.WriteFieldBegin("tableNameOrRegionName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableNameOrRegionName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactArgs) TStructName() string {
	return "CompactArgs"
}

func (p *CompactArgs) ThriftName() string {
	return "compact_args"
}

func (p *CompactArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableNameOrRegionName
	}
	return nil
}

func (p *CompactArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableNameOrRegionName", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type CompactResult struct {
	Io *IOError "io" // 1
}

var tstructCompactResult = thrift.NewTStruct("compact_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*CompactResult) GetTStruct() thrift.TStruct { return tstructCompactResult }
func NewCompactResult() *CompactResult {
	output := &CompactResult{}
	{
	}
	return output
}

func (p *CompactResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCompactResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCompactResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CompactResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err392 := p.Io.Read(iprot)
	if err392 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err392)
	}
	return err
}

func (p *CompactResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("compact_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CompactResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactResult) TStructName() string {
	return "CompactResult"
}

func (p *CompactResult) ThriftName() string {
	return "compact_result"
}

func (p *CompactResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *CompactResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableNameOrRegionName
 */
type MajorCompactArgs struct {
	TableNameOrRegionName Bytes "tableNameOrRegionName" // 1
}

var tstructMajorCompactArgs = thrift.NewTStruct("majorCompact_args", []thrift.TField{
	thrift.NewTField("tableNameOrRegionName", thrift.STRING, 1),
})

func (*MajorCompactArgs) GetTStruct() thrift.TStruct { return tstructMajorCompactArgs }
func NewMajorCompactArgs() *MajorCompactArgs {
	output := &MajorCompactArgs{}
	{
	}
	return output
}

func (p *MajorCompactArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMajorCompactArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMajorCompactArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Bytes
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MajorCompactArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v393, err394 := iprot.ReadBinary()
	if err394 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableNameOrRegionName", p.ThriftName(), err394)
	}
	p.TableNameOrRegionName = Bytes(v393)
	return err
}

func (p *MajorCompactArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("majorCompact_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MajorCompactArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableNameOrRegionName != nil {
		err = oprot.WriteFieldBegin("tableNameOrRegionName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableNameOrRegionName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MajorCompactArgs) TStructName() string {
	return "MajorCompactArgs"
}

func (p *MajorCompactArgs) ThriftName() string {
	return "majorCompact_args"
}

func (p *MajorCompactArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableNameOrRegionName
	}
	return nil
}

func (p *MajorCompactArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableNameOrRegionName", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type MajorCompactResult struct {
	Io *IOError "io" // 1
}

var tstructMajorCompactResult = thrift.NewTStruct("majorCompact_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*MajorCompactResult) GetTStruct() thrift.TStruct { return tstructMajorCompactResult }
func NewMajorCompactResult() *MajorCompactResult {
	output := &MajorCompactResult{}
	{
	}
	return output
}

func (p *MajorCompactResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMajorCompactResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMajorCompactResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MajorCompactResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err397 := p.Io.Read(iprot)
	if err397 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err397)
	}
	return err
}

func (p *MajorCompactResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("majorCompact_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MajorCompactResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MajorCompactResult) TStructName() string {
	return "MajorCompactResult"
}

func (p *MajorCompactResult) ThriftName() string {
	return "majorCompact_result"
}

func (p *MajorCompactResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *MajorCompactResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

type GetTableNamesArgs struct {
}

var tstructGetTableNamesArgs = thrift.NewTStruct("getTableNames_args", []thrift.TField{})

func (*GetTableNamesArgs) GetTStruct() thrift.TStruct { return tstructGetTableNamesArgs }
func NewGetTableNamesArgs() *GetTableNamesArgs {
	output := &GetTableNamesArgs{}
	{
	}
	return output
}

func (p *GetTableNamesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetTableNamesArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetTableNamesArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableNamesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getTableNames_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableNamesArgs) TStructName() string {
	return "GetTableNamesArgs"
}

func (p *GetTableNamesArgs) ThriftName() string {
	return "getTableNames_args"
}

func (p *GetTableNamesArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *GetTableNamesArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetTableNamesResult struct {
	Success []Text   "success" // 0
	Io      *IOError "io"      // 1
}

var tstructGetTableNamesResult = thrift.NewTStruct("getTableNames_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetTableNamesResult) GetTStruct() thrift.TStruct { return tstructGetTableNamesResult }
func NewGetTableNamesResult() *GetTableNamesResult {
	output := &GetTableNamesResult{}
	{
	}
	return output
}

func (p *GetTableNamesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetTableNamesResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetTableNamesResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableNamesResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype403, _size400, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype403
	p.Success = make([]Text, _size400, _size400)
	for i := 0; i < _size400; i++ {
		v406, err407 := iprot.ReadBinary()
		if err407 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem405", "", err407)
		}
		_elem405 := Text(v406)
		p.Success[i] = _elem405
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetTableNamesResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err410 := p.Io.Read(iprot)
	if err410 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err410)
	}
	return err
}

func (p *GetTableNamesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getTableNames_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableNamesResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter411 := range p.Success {
			err = oprot.WriteBinary(Iter411)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter411", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetTableNamesResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetTableNamesResult) TStructName() string {
	return "GetTableNamesResult"
}

func (p *GetTableNamesResult) ThriftName() string {
	return "getTableNames_result"
}

func (p *GetTableNamesResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetTableNamesResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: table name
 */
type GetColumnDescriptorsArgs struct {
	TableName Text "tableName" // 1
}

var tstructGetColumnDescriptorsArgs = thrift.NewTStruct("getColumnDescriptors_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
})

func (*GetColumnDescriptorsArgs) GetTStruct() thrift.TStruct { return tstructGetColumnDescriptorsArgs }
func NewGetColumnDescriptorsArgs() *GetColumnDescriptorsArgs {
	output := &GetColumnDescriptorsArgs{}
	{
	}
	return output
}

func (p *GetColumnDescriptorsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetColumnDescriptorsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetColumnDescriptorsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetColumnDescriptorsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v412, err413 := iprot.ReadBinary()
	if err413 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err413)
	}
	p.TableName = Text(v412)
	return err
}

func (p *GetColumnDescriptorsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getColumnDescriptors_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetColumnDescriptorsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetColumnDescriptorsArgs) TStructName() string {
	return "GetColumnDescriptorsArgs"
}

func (p *GetColumnDescriptorsArgs) ThriftName() string {
	return "getColumnDescriptors_args"
}

func (p *GetColumnDescriptorsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *GetColumnDescriptorsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetColumnDescriptorsResult struct {
	Success map[string]*ColumnDescriptor "success" // 0
	Io      *IOError                     "io"      // 1
}

var tstructGetColumnDescriptorsResult = thrift.NewTStruct("getColumnDescriptors_result", []thrift.TField{
	thrift.NewTField("success", thrift.MAP, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetColumnDescriptorsResult) GetTStruct() thrift.TStruct {
	return tstructGetColumnDescriptorsResult
}
func NewGetColumnDescriptorsResult() *GetColumnDescriptorsResult {
	output := &GetColumnDescriptorsResult{}
	{
	}
	return output
}

func (p *GetColumnDescriptorsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetColumnDescriptorsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetColumnDescriptorsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.MAP {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetColumnDescriptorsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype417, _vtype418, _size416, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_, _ = _ktype417, _vtype418
	p.Success = make(map[string]*ColumnDescriptor, _size416)
	for i := 0; i < _size416; i++ {
		v423, err424 := iprot.ReadString()
		if err424 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key421", "", err424)
		}
		_key421 := v423
		_val422 := NewColumnDescriptor()
		err427 := _val422.Read(iprot)
		if err427 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_val422ColumnDescriptor", err427)
		}
		p.Success[_key421] = _val422
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetColumnDescriptorsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err430 := p.Io.Read(iprot)
	if err430 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err430)
	}
	return err
}

func (p *GetColumnDescriptorsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getColumnDescriptors_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetColumnDescriptorsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.MAP, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter431, Viter432 := range p.Success {
			err = oprot.WriteString(Kiter431)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter431", "", err)
			}
			err = Viter432.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("ColumnDescriptor", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetColumnDescriptorsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetColumnDescriptorsResult) TStructName() string {
	return "GetColumnDescriptorsResult"
}

func (p *GetColumnDescriptorsResult) ThriftName() string {
	return "getColumnDescriptors_result"
}

func (p *GetColumnDescriptorsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetColumnDescriptorsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.MAP, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: table name
 */
type GetTableRegionsArgs struct {
	TableName Text "tableName" // 1
}

var tstructGetTableRegionsArgs = thrift.NewTStruct("getTableRegions_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
})

func (*GetTableRegionsArgs) GetTStruct() thrift.TStruct { return tstructGetTableRegionsArgs }
func NewGetTableRegionsArgs() *GetTableRegionsArgs {
	output := &GetTableRegionsArgs{}
	{
	}
	return output
}

func (p *GetTableRegionsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetTableRegionsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetTableRegionsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableRegionsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v433, err434 := iprot.ReadBinary()
	if err434 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err434)
	}
	p.TableName = Text(v433)
	return err
}

func (p *GetTableRegionsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getTableRegions_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableRegionsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetTableRegionsArgs) TStructName() string {
	return "GetTableRegionsArgs"
}

func (p *GetTableRegionsArgs) ThriftName() string {
	return "getTableRegions_args"
}

func (p *GetTableRegionsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *GetTableRegionsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetTableRegionsResult struct {
	Success []*TRegionInfo "success" // 0
	Io      *IOError       "io"      // 1
}

var tstructGetTableRegionsResult = thrift.NewTStruct("getTableRegions_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetTableRegionsResult) GetTStruct() thrift.TStruct { return tstructGetTableRegionsResult }
func NewGetTableRegionsResult() *GetTableRegionsResult {
	output := &GetTableRegionsResult{}
	{
	}
	return output
}

func (p *GetTableRegionsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetTableRegionsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetTableRegionsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableRegionsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype440, _size437, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype440
	p.Success = make([]*TRegionInfo, _size437, _size437)
	for i := 0; i < _size437; i++ {
		_elem442 := NewTRegionInfo()
		err445 := _elem442.Read(iprot)
		if err445 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem442TRegionInfo", err445)
		}
		p.Success[i] = _elem442
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetTableRegionsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err448 := p.Io.Read(iprot)
	if err448 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err448)
	}
	return err
}

func (p *GetTableRegionsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getTableRegions_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableRegionsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter449 := range p.Success {
			err = Iter449.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRegionInfo", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetTableRegionsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetTableRegionsResult) TStructName() string {
	return "GetTableRegionsResult"
}

func (p *GetTableRegionsResult) ThriftName() string {
	return "getTableRegions_result"
}

func (p *GetTableRegionsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetTableRegionsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table to create
 *  - ColumnFamilies: list of column family descriptors
 */
type CreateTableArgs struct {
	TableName      Text                "tableName"      // 1
	ColumnFamilies []*ColumnDescriptor "columnFamilies" // 2
}

var tstructCreateTableArgs = thrift.NewTStruct("createTable_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("columnFamilies", thrift.LIST, 2),
})

func (*CreateTableArgs) GetTStruct() thrift.TStruct { return tstructCreateTableArgs }
func NewCreateTableArgs() *CreateTableArgs {
	output := &CreateTableArgs{}
	{
	}
	return output
}

func (p *CreateTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCreateTableArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCreateTableArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CreateTableArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v450, err451 := iprot.ReadBinary()
	if err451 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err451)
	}
	p.TableName = Text(v450)
	return err
}

func (p *CreateTableArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype457, _size454, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ColumnFamilies", "", err)
	}
	_ = _etype457
	p.ColumnFamilies = make([]*ColumnDescriptor, _size454, _size454)
	for i := 0; i < _size454; i++ {
		_elem459 := NewColumnDescriptor()
		err462 := _elem459.Read(iprot)
		if err462 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem459ColumnDescriptor", err462)
		}
		p.ColumnFamilies[i] = _elem459
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CreateTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("createTable_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CreateTableArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CreateTableArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnFamilies != nil {
		err = oprot.WriteFieldBegin("columnFamilies", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columnFamilies", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnFamilies))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter463 := range p.ColumnFamilies {
			err = Iter463.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("ColumnDescriptor", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columnFamilies", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CreateTableArgs) TStructName() string {
	return "CreateTableArgs"
}

func (p *CreateTableArgs) ThriftName() string {
	return "createTable_args"
}

func (p *CreateTableArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.ColumnFamilies
	}
	return nil
}

func (p *CreateTableArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("columnFamilies", thrift.LIST, 2),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 *  - Exist
 */
type CreateTableResult struct {
	Io    *IOError         "io"    // 1
	Ia    *IllegalArgument "ia"    // 2
	Exist *AlreadyExists   "exist" // 3
}

var tstructCreateTableResult = thrift.NewTStruct("createTable_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
	thrift.NewTField("exist", thrift.STRUCT, 3),
})

func (*CreateTableResult) GetTStruct() thrift.TStruct { return tstructCreateTableResult }
func NewCreateTableResult() *CreateTableResult {
	output := &CreateTableResult{}
	{
	}
	return output
}

func (p *CreateTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCreateTableResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCreateTableResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //AlreadyExists
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CreateTableResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err466 := p.Io.Read(iprot)
	if err466 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err466)
	}
	return err
}

func (p *CreateTableResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err469 := p.Ia.Read(iprot)
	if err469 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err469)
	}
	return err
}

func (p *CreateTableResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Exist = NewAlreadyExists()
	err472 := p.Exist.Read(iprot)
	if err472 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ExistAlreadyExists", err472)
	}
	return err
}

func (p *CreateTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("createTable_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Exist != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CreateTableResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CreateTableResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CreateTableResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Exist != nil {
		err = oprot.WriteFieldBegin("exist", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "exist", p.ThriftName(), err)
		}
		err = p.Exist.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("AlreadyExists", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "exist", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CreateTableResult) TStructName() string {
	return "CreateTableResult"
}

func (p *CreateTableResult) ThriftName() string {
	return "createTable_result"
}

func (p *CreateTableResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	case 3:
		return p.Exist
	}
	return nil
}

func (p *CreateTableResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
		thrift.NewTField("exist", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - TableName: name of table to delete
 */
type DeleteTableArgs struct {
	TableName Text "tableName" // 1
}

var tstructDeleteTableArgs = thrift.NewTStruct("deleteTable_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
})

func (*DeleteTableArgs) GetTStruct() thrift.TStruct { return tstructDeleteTableArgs }
func NewDeleteTableArgs() *DeleteTableArgs {
	output := &DeleteTableArgs{}
	{
	}
	return output
}

func (p *DeleteTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteTableArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteTableArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteTableArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v473, err474 := iprot.ReadBinary()
	if err474 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err474)
	}
	p.TableName = Text(v473)
	return err
}

func (p *DeleteTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteTable_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteTableArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteTableArgs) TStructName() string {
	return "DeleteTableArgs"
}

func (p *DeleteTableArgs) ThriftName() string {
	return "deleteTable_args"
}

func (p *DeleteTableArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *DeleteTableArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DeleteTableResult struct {
	Io *IOError "io" // 1
}

var tstructDeleteTableResult = thrift.NewTStruct("deleteTable_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*DeleteTableResult) GetTStruct() thrift.TStruct { return tstructDeleteTableResult }
func NewDeleteTableResult() *DeleteTableResult {
	output := &DeleteTableResult{}
	{
	}
	return output
}

func (p *DeleteTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteTableResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteTableResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteTableResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err477 := p.Io.Read(iprot)
	if err477 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err477)
	}
	return err
}

func (p *DeleteTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteTable_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteTableResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteTableResult) TStructName() string {
	return "DeleteTableResult"
}

func (p *DeleteTableResult) ThriftName() string {
	return "deleteTable_result"
}

func (p *DeleteTableResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DeleteTableResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - Attributes: Get attributes
 */
type GetArgs struct {
	TableName  Text            "tableName"  // 1
	Row        Text            "row"        // 2
	Column     Text            "column"     // 3
	Attributes map[string]Text "attributes" // 4
}

var tstructGetArgs = thrift.NewTStruct("get_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("column", thrift.STRING, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*GetArgs) GetTStruct() thrift.TStruct { return tstructGetArgs }
func NewGetArgs() *GetArgs {
	output := &GetArgs{}
	{
	}
	return output
}

func (p *GetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v478, err479 := iprot.ReadBinary()
	if err479 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err479)
	}
	p.TableName = Text(v478)
	return err
}

func (p *GetArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v480, err481 := iprot.ReadBinary()
	if err481 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err481)
	}
	p.Row = Text(v480)
	return err
}

func (p *GetArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v482, err483 := iprot.ReadBinary()
	if err483 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err483)
	}
	p.Column = Text(v482)
	return err
}

func (p *GetArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype487, _vtype488, _size486, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype487, _vtype488
	p.Attributes = make(map[string]Text, _size486)
	for i := 0; i < _size486; i++ {
		v493, err494 := iprot.ReadString()
		if err494 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key491", "", err494)
		}
		_key491 := v493
		v495, err496 := iprot.ReadBinary()
		if err496 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val492", "", err496)
		}
		_val492 := Text(v495)
		p.Attributes[_key491] = _val492
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter497, Viter498 := range p.Attributes {
			err = oprot.WriteString(Kiter497)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter497", "", err)
			}
			err = oprot.WriteBinary(Viter498)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter498", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetArgs) TStructName() string {
	return "GetArgs"
}

func (p *GetArgs) ThriftName() string {
	return "get_args"
}

func (p *GetArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *GetArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("column", thrift.STRING, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetResult struct {
	Success []*TCell "success" // 0
	Io      *IOError "io"      // 1
}

var tstructGetResult = thrift.NewTStruct("get_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetResult) GetTStruct() thrift.TStruct { return tstructGetResult }
func NewGetResult() *GetResult {
	output := &GetResult{}
	{
	}
	return output
}

func (p *GetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype504, _size501, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype504
	p.Success = make([]*TCell, _size501, _size501)
	for i := 0; i < _size501; i++ {
		_elem506 := NewTCell()
		err509 := _elem506.Read(iprot)
		if err509 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem506TCell", err509)
		}
		p.Success[i] = _elem506
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err512 := p.Io.Read(iprot)
	if err512 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err512)
	}
	return err
}

func (p *GetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter513 := range p.Success {
			err = Iter513.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TCell", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetResult) TStructName() string {
	return "GetResult"
}

func (p *GetResult) ThriftName() string {
	return "get_result"
}

func (p *GetResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - NumVersions: number of versions to retrieve
 *  - Attributes: Get attributes
 */
type GetVerArgs struct {
	TableName   Text            "tableName"   // 1
	Row         Text            "row"         // 2
	Column      Text            "column"      // 3
	NumVersions int32           "numVersions" // 4
	Attributes  map[string]Text "attributes"  // 5
}

var tstructGetVerArgs = thrift.NewTStruct("getVer_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("column", thrift.STRING, 3),
	thrift.NewTField("numVersions", thrift.I32, 4),
	thrift.NewTField("attributes", thrift.MAP, 5),
})

func (*GetVerArgs) GetTStruct() thrift.TStruct { return tstructGetVerArgs }
func NewGetVerArgs() *GetVerArgs {
	output := &GetVerArgs{}
	{
	}
	return output
}

func (p *GetVerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetVerArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetVerArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v514, err515 := iprot.ReadBinary()
	if err515 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err515)
	}
	p.TableName = Text(v514)
	return err
}

func (p *GetVerArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v516, err517 := iprot.ReadBinary()
	if err517 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err517)
	}
	p.Row = Text(v516)
	return err
}

func (p *GetVerArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v518, err519 := iprot.ReadBinary()
	if err519 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err519)
	}
	p.Column = Text(v518)
	return err
}

func (p *GetVerArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v520, err521 := iprot.ReadI32()
	if err521 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "numVersions", p.ThriftName(), err521)
	}
	p.NumVersions = v520
	return err
}

func (p *GetVerArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype525, _vtype526, _size524, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype525, _vtype526
	p.Attributes = make(map[string]Text, _size524)
	for i := 0; i < _size524; i++ {
		v531, err532 := iprot.ReadString()
		if err532 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key529", "", err532)
		}
		_key529 := v531
		v533, err534 := iprot.ReadBinary()
		if err534 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val530", "", err534)
		}
		_val530 := Text(v533)
		p.Attributes[_key529] = _val530
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetVerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getVer_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("numVersions", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "numVersions", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.NumVersions))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "numVersions", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "numVersions", p.ThriftName(), err)
	}
	return err
}

func (p *GetVerArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter535, Viter536 := range p.Attributes {
			err = oprot.WriteString(Kiter535)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter535", "", err)
			}
			err = oprot.WriteBinary(Viter536)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter536", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerArgs) TStructName() string {
	return "GetVerArgs"
}

func (p *GetVerArgs) ThriftName() string {
	return "getVer_args"
}

func (p *GetVerArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.NumVersions
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *GetVerArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("column", thrift.STRING, 3),
		thrift.NewTField("numVersions", thrift.I32, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetVerResult struct {
	Success []*TCell "success" // 0
	Io      *IOError "io"      // 1
}

var tstructGetVerResult = thrift.NewTStruct("getVer_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetVerResult) GetTStruct() thrift.TStruct { return tstructGetVerResult }
func NewGetVerResult() *GetVerResult {
	output := &GetVerResult{}
	{
	}
	return output
}

func (p *GetVerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetVerResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetVerResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype542, _size539, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype542
	p.Success = make([]*TCell, _size539, _size539)
	for i := 0; i < _size539; i++ {
		_elem544 := NewTCell()
		err547 := _elem544.Read(iprot)
		if err547 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem544TCell", err547)
		}
		p.Success[i] = _elem544
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetVerResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err550 := p.Io.Read(iprot)
	if err550 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err550)
	}
	return err
}

func (p *GetVerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getVer_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter551 := range p.Success {
			err = Iter551.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TCell", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerResult) TStructName() string {
	return "GetVerResult"
}

func (p *GetVerResult) ThriftName() string {
	return "getVer_result"
}

func (p *GetVerResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetVerResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - Timestamp: timestamp
 *  - NumVersions: number of versions to retrieve
 *  - Attributes: Get attributes
 */
type GetVerTsArgs struct {
	TableName   Text            "tableName"   // 1
	Row         Text            "row"         // 2
	Column      Text            "column"      // 3
	Timestamp   int64           "timestamp"   // 4
	NumVersions int32           "numVersions" // 5
	Attributes  map[string]Text "attributes"  // 6
}

var tstructGetVerTsArgs = thrift.NewTStruct("getVerTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("column", thrift.STRING, 3),
	thrift.NewTField("timestamp", thrift.I64, 4),
	thrift.NewTField("numVersions", thrift.I32, 5),
	thrift.NewTField("attributes", thrift.MAP, 6),
})

func (*GetVerTsArgs) GetTStruct() thrift.TStruct { return tstructGetVerTsArgs }
func NewGetVerTsArgs() *GetVerTsArgs {
	output := &GetVerTsArgs{}
	{
	}
	return output
}

func (p *GetVerTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetVerTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetVerTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //
			if fieldTypeId == thrift.MAP {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v552, err553 := iprot.ReadBinary()
	if err553 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err553)
	}
	p.TableName = Text(v552)
	return err
}

func (p *GetVerTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v554, err555 := iprot.ReadBinary()
	if err555 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err555)
	}
	p.Row = Text(v554)
	return err
}

func (p *GetVerTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v556, err557 := iprot.ReadBinary()
	if err557 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err557)
	}
	p.Column = Text(v556)
	return err
}

func (p *GetVerTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v558, err559 := iprot.ReadI64()
	if err559 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err559)
	}
	p.Timestamp = v558
	return err
}

func (p *GetVerTsArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v560, err561 := iprot.ReadI32()
	if err561 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "numVersions", p.ThriftName(), err561)
	}
	p.NumVersions = v560
	return err
}

func (p *GetVerTsArgs) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype565, _vtype566, _size564, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype565, _vtype566
	p.Attributes = make(map[string]Text, _size564)
	for i := 0; i < _size564; i++ {
		v571, err572 := iprot.ReadString()
		if err572 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key569", "", err572)
		}
		_key569 := v571
		v573, err574 := iprot.ReadBinary()
		if err574 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val570", "", err574)
		}
		_val570 := Text(v573)
		p.Attributes[_key569] = _val570
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetVerTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getVerTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("numVersions", thrift.I32, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "numVersions", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.NumVersions))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "numVersions", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "numVersions", p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsArgs) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter575, Viter576 := range p.Attributes {
			err = oprot.WriteString(Kiter575)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter575", "", err)
			}
			err = oprot.WriteBinary(Viter576)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter576", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsArgs) TStructName() string {
	return "GetVerTsArgs"
}

func (p *GetVerTsArgs) ThriftName() string {
	return "getVerTs_args"
}

func (p *GetVerTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Timestamp
	case 5:
		return p.NumVersions
	case 6:
		return p.Attributes
	}
	return nil
}

func (p *GetVerTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("column", thrift.STRING, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("numVersions", thrift.I32, 5),
		thrift.NewTField("attributes", thrift.MAP, 6),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetVerTsResult struct {
	Success []*TCell "success" // 0
	Io      *IOError "io"      // 1
}

var tstructGetVerTsResult = thrift.NewTStruct("getVerTs_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetVerTsResult) GetTStruct() thrift.TStruct { return tstructGetVerTsResult }
func NewGetVerTsResult() *GetVerTsResult {
	output := &GetVerTsResult{}
	{
	}
	return output
}

func (p *GetVerTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetVerTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetVerTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype582, _size579, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype582
	p.Success = make([]*TCell, _size579, _size579)
	for i := 0; i < _size579; i++ {
		_elem584 := NewTCell()
		err587 := _elem584.Read(iprot)
		if err587 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem584TCell", err587)
		}
		p.Success[i] = _elem584
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetVerTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err590 := p.Io.Read(iprot)
	if err590 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err590)
	}
	return err
}

func (p *GetVerTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getVerTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter591 := range p.Success {
			err = Iter591.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TCell", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsResult) TStructName() string {
	return "GetVerTsResult"
}

func (p *GetVerTsResult) ThriftName() string {
	return "getVerTs_result"
}

func (p *GetVerTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetVerTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Attributes: Get attributes
 */
type GetRowArgs struct {
	TableName  Text            "tableName"  // 1
	Row        Text            "row"        // 2
	Attributes map[string]Text "attributes" // 3
}

var tstructGetRowArgs = thrift.NewTStruct("getRow_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("attributes", thrift.MAP, 3),
})

func (*GetRowArgs) GetTStruct() thrift.TStruct { return tstructGetRowArgs }
func NewGetRowArgs() *GetRowArgs {
	output := &GetRowArgs{}
	{
	}
	return output
}

func (p *GetRowArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.MAP {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v592, err593 := iprot.ReadBinary()
	if err593 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err593)
	}
	p.TableName = Text(v592)
	return err
}

func (p *GetRowArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v594, err595 := iprot.ReadBinary()
	if err595 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err595)
	}
	p.Row = Text(v594)
	return err
}

func (p *GetRowArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype599, _vtype600, _size598, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype599, _vtype600
	p.Attributes = make(map[string]Text, _size598)
	for i := 0; i < _size598; i++ {
		v605, err606 := iprot.ReadString()
		if err606 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key603", "", err606)
		}
		_key603 := v605
		v607, err608 := iprot.ReadBinary()
		if err608 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val604", "", err608)
		}
		_val604 := Text(v607)
		p.Attributes[_key603] = _val604
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRow_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter609, Viter610 := range p.Attributes {
			err = oprot.WriteString(Kiter609)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter609", "", err)
			}
			err = oprot.WriteBinary(Viter610)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter610", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowArgs) TStructName() string {
	return "GetRowArgs"
}

func (p *GetRowArgs) ThriftName() string {
	return "getRow_args"
}

func (p *GetRowArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Attributes
	}
	return nil
}

func (p *GetRowArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("attributes", thrift.MAP, 3),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowResult struct {
	Success []*TRowResult "success" // 0
	Io      *IOError      "io"      // 1
}

var tstructGetRowResult = thrift.NewTStruct("getRow_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowResult) GetTStruct() thrift.TStruct { return tstructGetRowResult }
func NewGetRowResult() *GetRowResult {
	output := &GetRowResult{}
	{
	}
	return output
}

func (p *GetRowResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype616, _size613, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype616
	p.Success = make([]*TRowResult, _size613, _size613)
	for i := 0; i < _size613; i++ {
		_elem618 := NewTRowResult()
		err621 := _elem618.Read(iprot)
		if err621 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem618TRowResult", err621)
		}
		p.Success[i] = _elem618
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err624 := p.Io.Read(iprot)
	if err624 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err624)
	}
	return err
}

func (p *GetRowResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRow_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter625 := range p.Success {
			err = Iter625.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowResult) TStructName() string {
	return "GetRowResult"
}

func (p *GetRowResult) ThriftName() string {
	return "getRow_result"
}

func (p *GetRowResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - Attributes: Get attributes
 */
type GetRowWithColumnsArgs struct {
	TableName  Text            "tableName"  // 1
	Row        Text            "row"        // 2
	Columns    []Text          "columns"    // 3
	Attributes map[string]Text "attributes" // 4
}

var tstructGetRowWithColumnsArgs = thrift.NewTStruct("getRowWithColumns_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("columns", thrift.LIST, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*GetRowWithColumnsArgs) GetTStruct() thrift.TStruct { return tstructGetRowWithColumnsArgs }
func NewGetRowWithColumnsArgs() *GetRowWithColumnsArgs {
	output := &GetRowWithColumnsArgs{}
	{
	}
	return output
}

func (p *GetRowWithColumnsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowWithColumnsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowWithColumnsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v626, err627 := iprot.ReadBinary()
	if err627 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err627)
	}
	p.TableName = Text(v626)
	return err
}

func (p *GetRowWithColumnsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v628, err629 := iprot.ReadBinary()
	if err629 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err629)
	}
	p.Row = Text(v628)
	return err
}

func (p *GetRowWithColumnsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype635, _size632, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype635
	p.Columns = make([]Text, _size632, _size632)
	for i := 0; i < _size632; i++ {
		v638, err639 := iprot.ReadBinary()
		if err639 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem637", "", err639)
		}
		_elem637 := Text(v638)
		p.Columns[i] = _elem637
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowWithColumnsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype643, _vtype644, _size642, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype643, _vtype644
	p.Attributes = make(map[string]Text, _size642)
	for i := 0; i < _size642; i++ {
		v649, err650 := iprot.ReadString()
		if err650 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key647", "", err650)
		}
		_key647 := v649
		v651, err652 := iprot.ReadBinary()
		if err652 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val648", "", err652)
		}
		_val648 := Text(v651)
		p.Attributes[_key647] = _val648
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowWithColumnsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowWithColumns_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter653 := range p.Columns {
			err = oprot.WriteBinary(Iter653)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter653", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter654, Viter655 := range p.Attributes {
			err = oprot.WriteString(Kiter654)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter654", "", err)
			}
			err = oprot.WriteBinary(Viter655)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter655", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsArgs) TStructName() string {
	return "GetRowWithColumnsArgs"
}

func (p *GetRowWithColumnsArgs) ThriftName() string {
	return "getRowWithColumns_args"
}

func (p *GetRowWithColumnsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Columns
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *GetRowWithColumnsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowWithColumnsResult struct {
	Success []*TRowResult "success" // 0
	Io      *IOError      "io"      // 1
}

var tstructGetRowWithColumnsResult = thrift.NewTStruct("getRowWithColumns_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowWithColumnsResult) GetTStruct() thrift.TStruct { return tstructGetRowWithColumnsResult }
func NewGetRowWithColumnsResult() *GetRowWithColumnsResult {
	output := &GetRowWithColumnsResult{}
	{
	}
	return output
}

func (p *GetRowWithColumnsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowWithColumnsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowWithColumnsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype661, _size658, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype661
	p.Success = make([]*TRowResult, _size658, _size658)
	for i := 0; i < _size658; i++ {
		_elem663 := NewTRowResult()
		err666 := _elem663.Read(iprot)
		if err666 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem663TRowResult", err666)
		}
		p.Success[i] = _elem663
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowWithColumnsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err669 := p.Io.Read(iprot)
	if err669 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err669)
	}
	return err
}

func (p *GetRowWithColumnsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowWithColumns_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter670 := range p.Success {
			err = Iter670.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsResult) TStructName() string {
	return "GetRowWithColumnsResult"
}

func (p *GetRowWithColumnsResult) ThriftName() string {
	return "getRowWithColumns_result"
}

func (p *GetRowWithColumnsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowWithColumnsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of the table
 *  - Row: row key
 *  - Timestamp: timestamp
 *  - Attributes: Get attributes
 */
type GetRowTsArgs struct {
	TableName  Text            "tableName"  // 1
	Row        Text            "row"        // 2
	Timestamp  int64           "timestamp"  // 3
	Attributes map[string]Text "attributes" // 4
}

var tstructGetRowTsArgs = thrift.NewTStruct("getRowTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("timestamp", thrift.I64, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*GetRowTsArgs) GetTStruct() thrift.TStruct { return tstructGetRowTsArgs }
func NewGetRowTsArgs() *GetRowTsArgs {
	output := &GetRowTsArgs{}
	{
	}
	return output
}

func (p *GetRowTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v671, err672 := iprot.ReadBinary()
	if err672 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err672)
	}
	p.TableName = Text(v671)
	return err
}

func (p *GetRowTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v673, err674 := iprot.ReadBinary()
	if err674 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err674)
	}
	p.Row = Text(v673)
	return err
}

func (p *GetRowTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v675, err676 := iprot.ReadI64()
	if err676 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err676)
	}
	p.Timestamp = v675
	return err
}

func (p *GetRowTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype680, _vtype681, _size679, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype680, _vtype681
	p.Attributes = make(map[string]Text, _size679)
	for i := 0; i < _size679; i++ {
		v686, err687 := iprot.ReadString()
		if err687 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key684", "", err687)
		}
		_key684 := v686
		v688, err689 := iprot.ReadBinary()
		if err689 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val685", "", err689)
		}
		_val685 := Text(v688)
		p.Attributes[_key684] = _val685
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *GetRowTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter690, Viter691 := range p.Attributes {
			err = oprot.WriteString(Kiter690)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter690", "", err)
			}
			err = oprot.WriteBinary(Viter691)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter691", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowTsArgs) TStructName() string {
	return "GetRowTsArgs"
}

func (p *GetRowTsArgs) ThriftName() string {
	return "getRowTs_args"
}

func (p *GetRowTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Timestamp
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *GetRowTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowTsResult struct {
	Success []*TRowResult "success" // 0
	Io      *IOError      "io"      // 1
}

var tstructGetRowTsResult = thrift.NewTStruct("getRowTs_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowTsResult) GetTStruct() thrift.TStruct { return tstructGetRowTsResult }
func NewGetRowTsResult() *GetRowTsResult {
	output := &GetRowTsResult{}
	{
	}
	return output
}

func (p *GetRowTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowTsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype697, _size694, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype697
	p.Success = make([]*TRowResult, _size694, _size694)
	for i := 0; i < _size694; i++ {
		_elem699 := NewTRowResult()
		err702 := _elem699.Read(iprot)
		if err702 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem699TRowResult", err702)
		}
		p.Success[i] = _elem699
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err705 := p.Io.Read(iprot)
	if err705 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err705)
	}
	return err
}

func (p *GetRowTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowTsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter706 := range p.Success {
			err = Iter706.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowTsResult) TStructName() string {
	return "GetRowTsResult"
}

func (p *GetRowTsResult) ThriftName() string {
	return "getRowTs_result"
}

func (p *GetRowTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 *  - Attributes: Get attributes
 */
type GetRowWithColumnsTsArgs struct {
	TableName  Text            "tableName"  // 1
	Row        Text            "row"        // 2
	Columns    []Text          "columns"    // 3
	Timestamp  int64           "timestamp"  // 4
	Attributes map[string]Text "attributes" // 5
}

var tstructGetRowWithColumnsTsArgs = thrift.NewTStruct("getRowWithColumnsTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("columns", thrift.LIST, 3),
	thrift.NewTField("timestamp", thrift.I64, 4),
	thrift.NewTField("attributes", thrift.MAP, 5),
})

func (*GetRowWithColumnsTsArgs) GetTStruct() thrift.TStruct { return tstructGetRowWithColumnsTsArgs }
func NewGetRowWithColumnsTsArgs() *GetRowWithColumnsTsArgs {
	output := &GetRowWithColumnsTsArgs{}
	{
	}
	return output
}

func (p *GetRowWithColumnsTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowWithColumnsTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowWithColumnsTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v707, err708 := iprot.ReadBinary()
	if err708 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err708)
	}
	p.TableName = Text(v707)
	return err
}

func (p *GetRowWithColumnsTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v709, err710 := iprot.ReadBinary()
	if err710 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err710)
	}
	p.Row = Text(v709)
	return err
}

func (p *GetRowWithColumnsTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype716, _size713, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype716
	p.Columns = make([]Text, _size713, _size713)
	for i := 0; i < _size713; i++ {
		v719, err720 := iprot.ReadBinary()
		if err720 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem718", "", err720)
		}
		_elem718 := Text(v719)
		p.Columns[i] = _elem718
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v721, err722 := iprot.ReadI64()
	if err722 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err722)
	}
	p.Timestamp = v721
	return err
}

func (p *GetRowWithColumnsTsArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype726, _vtype727, _size725, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype726, _vtype727
	p.Attributes = make(map[string]Text, _size725)
	for i := 0; i < _size725; i++ {
		v732, err733 := iprot.ReadString()
		if err733 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key730", "", err733)
		}
		_key730 := v732
		v734, err735 := iprot.ReadBinary()
		if err735 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val731", "", err735)
		}
		_val731 := Text(v734)
		p.Attributes[_key730] = _val731
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowWithColumnsTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter736 := range p.Columns {
			err = oprot.WriteBinary(Iter736)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter736", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter737, Viter738 := range p.Attributes {
			err = oprot.WriteString(Kiter737)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter737", "", err)
			}
			err = oprot.WriteBinary(Viter738)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter738", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) TStructName() string {
	return "GetRowWithColumnsTsArgs"
}

func (p *GetRowWithColumnsTsArgs) ThriftName() string {
	return "getRowWithColumnsTs_args"
}

func (p *GetRowWithColumnsTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Columns
	case 4:
		return p.Timestamp
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *GetRowWithColumnsTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowWithColumnsTsResult struct {
	Success []*TRowResult "success" // 0
	Io      *IOError      "io"      // 1
}

var tstructGetRowWithColumnsTsResult = thrift.NewTStruct("getRowWithColumnsTs_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowWithColumnsTsResult) GetTStruct() thrift.TStruct { return tstructGetRowWithColumnsTsResult }
func NewGetRowWithColumnsTsResult() *GetRowWithColumnsTsResult {
	output := &GetRowWithColumnsTsResult{}
	{
	}
	return output
}

func (p *GetRowWithColumnsTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowWithColumnsTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowWithColumnsTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype744, _size741, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype744
	p.Success = make([]*TRowResult, _size741, _size741)
	for i := 0; i < _size741; i++ {
		_elem746 := NewTRowResult()
		err749 := _elem746.Read(iprot)
		if err749 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem746TRowResult", err749)
		}
		p.Success[i] = _elem746
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowWithColumnsTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err752 := p.Io.Read(iprot)
	if err752 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err752)
	}
	return err
}

func (p *GetRowWithColumnsTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowWithColumnsTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter753 := range p.Success {
			err = Iter753.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsResult) TStructName() string {
	return "GetRowWithColumnsTsResult"
}

func (p *GetRowWithColumnsTsResult) ThriftName() string {
	return "getRowWithColumnsTs_result"
}

func (p *GetRowWithColumnsTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowWithColumnsTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Attributes: Get attributes
 */
type GetRowsArgs struct {
	TableName  Text            "tableName"  // 1
	Rows       []Text          "rows"       // 2
	Attributes map[string]Text "attributes" // 3
}

var tstructGetRowsArgs = thrift.NewTStruct("getRows_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("rows", thrift.LIST, 2),
	thrift.NewTField("attributes", thrift.MAP, 3),
})

func (*GetRowsArgs) GetTStruct() thrift.TStruct { return tstructGetRowsArgs }
func NewGetRowsArgs() *GetRowsArgs {
	output := &GetRowsArgs{}
	{
	}
	return output
}

func (p *GetRowsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.MAP {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v754, err755 := iprot.ReadBinary()
	if err755 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err755)
	}
	p.TableName = Text(v754)
	return err
}

func (p *GetRowsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype761, _size758, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
	}
	_ = _etype761
	p.Rows = make([]Text, _size758, _size758)
	for i := 0; i < _size758; i++ {
		v764, err765 := iprot.ReadBinary()
		if err765 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem763", "", err765)
		}
		_elem763 := Text(v764)
		p.Rows[i] = _elem763
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype769, _vtype770, _size768, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype769, _vtype770
	p.Attributes = make(map[string]Text, _size768)
	for i := 0; i < _size768; i++ {
		v775, err776 := iprot.ReadString()
		if err776 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key773", "", err776)
		}
		_key773 := v775
		v777, err778 := iprot.ReadBinary()
		if err778 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val774", "", err778)
		}
		_val774 := Text(v777)
		p.Attributes[_key773] = _val774
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRows_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Rows != nil {
		err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Rows))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter779 := range p.Rows {
			err = oprot.WriteBinary(Iter779)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter779", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter780, Viter781 := range p.Attributes {
			err = oprot.WriteString(Kiter780)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter780", "", err)
			}
			err = oprot.WriteBinary(Viter781)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter781", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsArgs) TStructName() string {
	return "GetRowsArgs"
}

func (p *GetRowsArgs) ThriftName() string {
	return "getRows_args"
}

func (p *GetRowsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Rows
	case 3:
		return p.Attributes
	}
	return nil
}

func (p *GetRowsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("rows", thrift.LIST, 2),
		thrift.NewTField("attributes", thrift.MAP, 3),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowsResult struct {
	Success []*TRowResult "success" // 0
	Io      *IOError      "io"      // 1
}

var tstructGetRowsResult = thrift.NewTStruct("getRows_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowsResult) GetTStruct() thrift.TStruct { return tstructGetRowsResult }
func NewGetRowsResult() *GetRowsResult {
	output := &GetRowsResult{}
	{
	}
	return output
}

func (p *GetRowsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype787, _size784, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype787
	p.Success = make([]*TRowResult, _size784, _size784)
	for i := 0; i < _size784; i++ {
		_elem789 := NewTRowResult()
		err792 := _elem789.Read(iprot)
		if err792 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem789TRowResult", err792)
		}
		p.Success[i] = _elem789
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err795 := p.Io.Read(iprot)
	if err795 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err795)
	}
	return err
}

func (p *GetRowsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRows_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter796 := range p.Success {
			err = Iter796.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsResult) TStructName() string {
	return "GetRowsResult"
}

func (p *GetRowsResult) ThriftName() string {
	return "getRows_result"
}

func (p *GetRowsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Columns: List of columns to return, null for all columns
 *  - Attributes: Get attributes
 */
type GetRowsWithColumnsArgs struct {
	TableName  Text            "tableName"  // 1
	Rows       []Text          "rows"       // 2
	Columns    []Text          "columns"    // 3
	Attributes map[string]Text "attributes" // 4
}

var tstructGetRowsWithColumnsArgs = thrift.NewTStruct("getRowsWithColumns_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("rows", thrift.LIST, 2),
	thrift.NewTField("columns", thrift.LIST, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*GetRowsWithColumnsArgs) GetTStruct() thrift.TStruct { return tstructGetRowsWithColumnsArgs }
func NewGetRowsWithColumnsArgs() *GetRowsWithColumnsArgs {
	output := &GetRowsWithColumnsArgs{}
	{
	}
	return output
}

func (p *GetRowsWithColumnsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowsWithColumnsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowsWithColumnsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v797, err798 := iprot.ReadBinary()
	if err798 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err798)
	}
	p.TableName = Text(v797)
	return err
}

func (p *GetRowsWithColumnsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype804, _size801, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
	}
	_ = _etype804
	p.Rows = make([]Text, _size801, _size801)
	for i := 0; i < _size801; i++ {
		v807, err808 := iprot.ReadBinary()
		if err808 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem806", "", err808)
		}
		_elem806 := Text(v807)
		p.Rows[i] = _elem806
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype814, _size811, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype814
	p.Columns = make([]Text, _size811, _size811)
	for i := 0; i < _size811; i++ {
		v817, err818 := iprot.ReadBinary()
		if err818 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem816", "", err818)
		}
		_elem816 := Text(v817)
		p.Columns[i] = _elem816
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype822, _vtype823, _size821, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype822, _vtype823
	p.Attributes = make(map[string]Text, _size821)
	for i := 0; i < _size821; i++ {
		v828, err829 := iprot.ReadString()
		if err829 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key826", "", err829)
		}
		_key826 := v828
		v830, err831 := iprot.ReadBinary()
		if err831 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val827", "", err831)
		}
		_val827 := Text(v830)
		p.Attributes[_key826] = _val827
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowsWithColumnsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsWithColumns_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Rows != nil {
		err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Rows))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter832 := range p.Rows {
			err = oprot.WriteBinary(Iter832)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter832", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter833 := range p.Columns {
			err = oprot.WriteBinary(Iter833)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter833", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter834, Viter835 := range p.Attributes {
			err = oprot.WriteString(Kiter834)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter834", "", err)
			}
			err = oprot.WriteBinary(Viter835)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter835", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsArgs) TStructName() string {
	return "GetRowsWithColumnsArgs"
}

func (p *GetRowsWithColumnsArgs) ThriftName() string {
	return "getRowsWithColumns_args"
}

func (p *GetRowsWithColumnsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Rows
	case 3:
		return p.Columns
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *GetRowsWithColumnsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("rows", thrift.LIST, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowsWithColumnsResult struct {
	Success []*TRowResult "success" // 0
	Io      *IOError      "io"      // 1
}

var tstructGetRowsWithColumnsResult = thrift.NewTStruct("getRowsWithColumns_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowsWithColumnsResult) GetTStruct() thrift.TStruct { return tstructGetRowsWithColumnsResult }
func NewGetRowsWithColumnsResult() *GetRowsWithColumnsResult {
	output := &GetRowsWithColumnsResult{}
	{
	}
	return output
}

func (p *GetRowsWithColumnsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowsWithColumnsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowsWithColumnsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype841, _size838, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype841
	p.Success = make([]*TRowResult, _size838, _size838)
	for i := 0; i < _size838; i++ {
		_elem843 := NewTRowResult()
		err846 := _elem843.Read(iprot)
		if err846 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem843TRowResult", err846)
		}
		p.Success[i] = _elem843
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err849 := p.Io.Read(iprot)
	if err849 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err849)
	}
	return err
}

func (p *GetRowsWithColumnsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsWithColumns_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter850 := range p.Success {
			err = Iter850.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsResult) TStructName() string {
	return "GetRowsWithColumnsResult"
}

func (p *GetRowsWithColumnsResult) ThriftName() string {
	return "getRowsWithColumns_result"
}

func (p *GetRowsWithColumnsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowsWithColumnsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of the table
 *  - Rows: row keys
 *  - Timestamp: timestamp
 *  - Attributes: Get attributes
 */
type GetRowsTsArgs struct {
	TableName  Text            "tableName"  // 1
	Rows       []Text          "rows"       // 2
	Timestamp  int64           "timestamp"  // 3
	Attributes map[string]Text "attributes" // 4
}

var tstructGetRowsTsArgs = thrift.NewTStruct("getRowsTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("rows", thrift.LIST, 2),
	thrift.NewTField("timestamp", thrift.I64, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*GetRowsTsArgs) GetTStruct() thrift.TStruct { return tstructGetRowsTsArgs }
func NewGetRowsTsArgs() *GetRowsTsArgs {
	output := &GetRowsTsArgs{}
	{
	}
	return output
}

func (p *GetRowsTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowsTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowsTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v851, err852 := iprot.ReadBinary()
	if err852 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err852)
	}
	p.TableName = Text(v851)
	return err
}

func (p *GetRowsTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype858, _size855, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
	}
	_ = _etype858
	p.Rows = make([]Text, _size855, _size855)
	for i := 0; i < _size855; i++ {
		v861, err862 := iprot.ReadBinary()
		if err862 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem860", "", err862)
		}
		_elem860 := Text(v861)
		p.Rows[i] = _elem860
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v863, err864 := iprot.ReadI64()
	if err864 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err864)
	}
	p.Timestamp = v863
	return err
}

func (p *GetRowsTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype868, _vtype869, _size867, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype868, _vtype869
	p.Attributes = make(map[string]Text, _size867)
	for i := 0; i < _size867; i++ {
		v874, err875 := iprot.ReadString()
		if err875 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key872", "", err875)
		}
		_key872 := v874
		v876, err877 := iprot.ReadBinary()
		if err877 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val873", "", err877)
		}
		_val873 := Text(v876)
		p.Attributes[_key872] = _val873
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowsTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Rows != nil {
		err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Rows))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter878 := range p.Rows {
			err = oprot.WriteBinary(Iter878)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter878", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter879, Viter880 := range p.Attributes {
			err = oprot.WriteString(Kiter879)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter879", "", err)
			}
			err = oprot.WriteBinary(Viter880)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter880", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsTsArgs) TStructName() string {
	return "GetRowsTsArgs"
}

func (p *GetRowsTsArgs) ThriftName() string {
	return "getRowsTs_args"
}

func (p *GetRowsTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Rows
	case 3:
		return p.Timestamp
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *GetRowsTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("rows", thrift.LIST, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowsTsResult struct {
	Success []*TRowResult "success" // 0
	Io      *IOError      "io"      // 1
}

var tstructGetRowsTsResult = thrift.NewTStruct("getRowsTs_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowsTsResult) GetTStruct() thrift.TStruct { return tstructGetRowsTsResult }
func NewGetRowsTsResult() *GetRowsTsResult {
	output := &GetRowsTsResult{}
	{
	}
	return output
}

func (p *GetRowsTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowsTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowsTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsTsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype886, _size883, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype886
	p.Success = make([]*TRowResult, _size883, _size883)
	for i := 0; i < _size883; i++ {
		_elem888 := NewTRowResult()
		err891 := _elem888.Read(iprot)
		if err891 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem888TRowResult", err891)
		}
		p.Success[i] = _elem888
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err894 := p.Io.Read(iprot)
	if err894 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err894)
	}
	return err
}

func (p *GetRowsTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsTsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter895 := range p.Success {
			err = Iter895.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsTsResult) TStructName() string {
	return "GetRowsTsResult"
}

func (p *GetRowsTsResult) ThriftName() string {
	return "getRowsTs_result"
}

func (p *GetRowsTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowsTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 *  - Attributes: Get attributes
 */
type GetRowsWithColumnsTsArgs struct {
	TableName  Text            "tableName"  // 1
	Rows       []Text          "rows"       // 2
	Columns    []Text          "columns"    // 3
	Timestamp  int64           "timestamp"  // 4
	Attributes map[string]Text "attributes" // 5
}

var tstructGetRowsWithColumnsTsArgs = thrift.NewTStruct("getRowsWithColumnsTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("rows", thrift.LIST, 2),
	thrift.NewTField("columns", thrift.LIST, 3),
	thrift.NewTField("timestamp", thrift.I64, 4),
	thrift.NewTField("attributes", thrift.MAP, 5),
})

func (*GetRowsWithColumnsTsArgs) GetTStruct() thrift.TStruct { return tstructGetRowsWithColumnsTsArgs }
func NewGetRowsWithColumnsTsArgs() *GetRowsWithColumnsTsArgs {
	output := &GetRowsWithColumnsTsArgs{}
	{
	}
	return output
}

func (p *GetRowsWithColumnsTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowsWithColumnsTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowsWithColumnsTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v896, err897 := iprot.ReadBinary()
	if err897 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err897)
	}
	p.TableName = Text(v896)
	return err
}

func (p *GetRowsWithColumnsTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype903, _size900, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
	}
	_ = _etype903
	p.Rows = make([]Text, _size900, _size900)
	for i := 0; i < _size900; i++ {
		v906, err907 := iprot.ReadBinary()
		if err907 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem905", "", err907)
		}
		_elem905 := Text(v906)
		p.Rows[i] = _elem905
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype913, _size910, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype913
	p.Columns = make([]Text, _size910, _size910)
	for i := 0; i < _size910; i++ {
		v916, err917 := iprot.ReadBinary()
		if err917 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem915", "", err917)
		}
		_elem915 := Text(v916)
		p.Columns[i] = _elem915
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v918, err919 := iprot.ReadI64()
	if err919 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err919)
	}
	p.Timestamp = v918
	return err
}

func (p *GetRowsWithColumnsTsArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype923, _vtype924, _size922, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype923, _vtype924
	p.Attributes = make(map[string]Text, _size922)
	for i := 0; i < _size922; i++ {
		v929, err930 := iprot.ReadString()
		if err930 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key927", "", err930)
		}
		_key927 := v929
		v931, err932 := iprot.ReadBinary()
		if err932 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val928", "", err932)
		}
		_val928 := Text(v931)
		p.Attributes[_key927] = _val928
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsWithColumnsTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Rows != nil {
		err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Rows))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter933 := range p.Rows {
			err = oprot.WriteBinary(Iter933)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter933", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter934 := range p.Columns {
			err = oprot.WriteBinary(Iter934)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter934", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter935, Viter936 := range p.Attributes {
			err = oprot.WriteString(Kiter935)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter935", "", err)
			}
			err = oprot.WriteBinary(Viter936)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter936", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) TStructName() string {
	return "GetRowsWithColumnsTsArgs"
}

func (p *GetRowsWithColumnsTsArgs) ThriftName() string {
	return "getRowsWithColumnsTs_args"
}

func (p *GetRowsWithColumnsTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Rows
	case 3:
		return p.Columns
	case 4:
		return p.Timestamp
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *GetRowsWithColumnsTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("rows", thrift.LIST, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowsWithColumnsTsResult struct {
	Success []*TRowResult "success" // 0
	Io      *IOError      "io"      // 1
}

var tstructGetRowsWithColumnsTsResult = thrift.NewTStruct("getRowsWithColumnsTs_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowsWithColumnsTsResult) GetTStruct() thrift.TStruct {
	return tstructGetRowsWithColumnsTsResult
}
func NewGetRowsWithColumnsTsResult() *GetRowsWithColumnsTsResult {
	output := &GetRowsWithColumnsTsResult{}
	{
	}
	return output
}

func (p *GetRowsWithColumnsTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowsWithColumnsTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowsWithColumnsTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype942, _size939, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype942
	p.Success = make([]*TRowResult, _size939, _size939)
	for i := 0; i < _size939; i++ {
		_elem944 := NewTRowResult()
		err947 := _elem944.Read(iprot)
		if err947 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem944TRowResult", err947)
		}
		p.Success[i] = _elem944
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err950 := p.Io.Read(iprot)
	if err950 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err950)
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsWithColumnsTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter951 := range p.Success {
			err = Iter951.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) TStructName() string {
	return "GetRowsWithColumnsTsResult"
}

func (p *GetRowsWithColumnsTsResult) ThriftName() string {
	return "getRowsWithColumnsTs_result"
}

func (p *GetRowsWithColumnsTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowsWithColumnsTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Mutations: list of mutation commands
 *  - Attributes: Mutation attributes
 */
type MutateRowArgs struct {
	TableName  Text            "tableName"  // 1
	Row        Text            "row"        // 2
	Mutations  []*Mutation     "mutations"  // 3
	Attributes map[string]Text "attributes" // 4
}

var tstructMutateRowArgs = thrift.NewTStruct("mutateRow_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("mutations", thrift.LIST, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*MutateRowArgs) GetTStruct() thrift.TStruct { return tstructMutateRowArgs }
func NewMutateRowArgs() *MutateRowArgs {
	output := &MutateRowArgs{}
	{
	}
	return output
}

func (p *MutateRowArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutateRowArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutateRowArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v952, err953 := iprot.ReadBinary()
	if err953 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err953)
	}
	p.TableName = Text(v952)
	return err
}

func (p *MutateRowArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v954, err955 := iprot.ReadBinary()
	if err955 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err955)
	}
	p.Row = Text(v954)
	return err
}

func (p *MutateRowArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype961, _size958, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Mutations", "", err)
	}
	_ = _etype961
	p.Mutations = make([]*Mutation, _size958, _size958)
	for i := 0; i < _size958; i++ {
		_elem963 := NewMutation()
		err966 := _elem963.Read(iprot)
		if err966 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem963Mutation", err966)
		}
		p.Mutations[i] = _elem963
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *MutateRowArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype970, _vtype971, _size969, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype970, _vtype971
	p.Attributes = make(map[string]Text, _size969)
	for i := 0; i < _size969; i++ {
		v976, err977 := iprot.ReadString()
		if err977 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key974", "", err977)
		}
		_key974 := v976
		v978, err979 := iprot.ReadBinary()
		if err979 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val975", "", err979)
		}
		_val975 := Text(v978)
		p.Attributes[_key974] = _val975
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *MutateRowArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRow_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Mutations != nil {
		err = oprot.WriteFieldBegin("mutations", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "mutations", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Mutations))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter980 := range p.Mutations {
			err = Iter980.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Mutation", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "mutations", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter981, Viter982 := range p.Attributes {
			err = oprot.WriteString(Kiter981)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter981", "", err)
			}
			err = oprot.WriteBinary(Viter982)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter982", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowArgs) TStructName() string {
	return "MutateRowArgs"
}

func (p *MutateRowArgs) ThriftName() string {
	return "mutateRow_args"
}

func (p *MutateRowArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Mutations
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *MutateRowArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("mutations", thrift.LIST, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type MutateRowResult struct {
	Io *IOError         "io" // 1
	Ia *IllegalArgument "ia" // 2
}

var tstructMutateRowResult = thrift.NewTStruct("mutateRow_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
})

func (*MutateRowResult) GetTStruct() thrift.TStruct { return tstructMutateRowResult }
func NewMutateRowResult() *MutateRowResult {
	output := &MutateRowResult{}
	{
	}
	return output
}

func (p *MutateRowResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutateRowResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutateRowResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err985 := p.Io.Read(iprot)
	if err985 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err985)
	}
	return err
}

func (p *MutateRowResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err988 := p.Ia.Read(iprot)
	if err988 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err988)
	}
	return err
}

func (p *MutateRowResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRow_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowResult) TStructName() string {
	return "MutateRowResult"
}

func (p *MutateRowResult) ThriftName() string {
	return "mutateRow_result"
}

func (p *MutateRowResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *MutateRowResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Mutations: list of mutation commands
 *  - Timestamp: timestamp
 *  - Attributes: Mutation attributes
 */
type MutateRowTsArgs struct {
	TableName  Text            "tableName"  // 1
	Row        Text            "row"        // 2
	Mutations  []*Mutation     "mutations"  // 3
	Timestamp  int64           "timestamp"  // 4
	Attributes map[string]Text "attributes" // 5
}

var tstructMutateRowTsArgs = thrift.NewTStruct("mutateRowTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("mutations", thrift.LIST, 3),
	thrift.NewTField("timestamp", thrift.I64, 4),
	thrift.NewTField("attributes", thrift.MAP, 5),
})

func (*MutateRowTsArgs) GetTStruct() thrift.TStruct { return tstructMutateRowTsArgs }
func NewMutateRowTsArgs() *MutateRowTsArgs {
	output := &MutateRowTsArgs{}
	{
	}
	return output
}

func (p *MutateRowTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutateRowTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutateRowTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v989, err990 := iprot.ReadBinary()
	if err990 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err990)
	}
	p.TableName = Text(v989)
	return err
}

func (p *MutateRowTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v991, err992 := iprot.ReadBinary()
	if err992 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err992)
	}
	p.Row = Text(v991)
	return err
}

func (p *MutateRowTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype998, _size995, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Mutations", "", err)
	}
	_ = _etype998
	p.Mutations = make([]*Mutation, _size995, _size995)
	for i := 0; i < _size995; i++ {
		_elem1000 := NewMutation()
		err1003 := _elem1000.Read(iprot)
		if err1003 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1000Mutation", err1003)
		}
		p.Mutations[i] = _elem1000
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *MutateRowTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1004, err1005 := iprot.ReadI64()
	if err1005 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err1005)
	}
	p.Timestamp = v1004
	return err
}

func (p *MutateRowTsArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1009, _vtype1010, _size1008, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1009, _vtype1010
	p.Attributes = make(map[string]Text, _size1008)
	for i := 0; i < _size1008; i++ {
		v1015, err1016 := iprot.ReadString()
		if err1016 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1013", "", err1016)
		}
		_key1013 := v1015
		v1017, err1018 := iprot.ReadBinary()
		if err1018 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1014", "", err1018)
		}
		_val1014 := Text(v1017)
		p.Attributes[_key1013] = _val1014
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *MutateRowTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRowTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Mutations != nil {
		err = oprot.WriteFieldBegin("mutations", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "mutations", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Mutations))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1019 := range p.Mutations {
			err = Iter1019.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Mutation", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "mutations", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowTsArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1020, Viter1021 := range p.Attributes {
			err = oprot.WriteString(Kiter1020)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1020", "", err)
			}
			err = oprot.WriteBinary(Viter1021)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1021", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsArgs) TStructName() string {
	return "MutateRowTsArgs"
}

func (p *MutateRowTsArgs) ThriftName() string {
	return "mutateRowTs_args"
}

func (p *MutateRowTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Mutations
	case 4:
		return p.Timestamp
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *MutateRowTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("mutations", thrift.LIST, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type MutateRowTsResult struct {
	Io *IOError         "io" // 1
	Ia *IllegalArgument "ia" // 2
}

var tstructMutateRowTsResult = thrift.NewTStruct("mutateRowTs_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
})

func (*MutateRowTsResult) GetTStruct() thrift.TStruct { return tstructMutateRowTsResult }
func NewMutateRowTsResult() *MutateRowTsResult {
	output := &MutateRowTsResult{}
	{
	}
	return output
}

func (p *MutateRowTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutateRowTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutateRowTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1024 := p.Io.Read(iprot)
	if err1024 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1024)
	}
	return err
}

func (p *MutateRowTsResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1027 := p.Ia.Read(iprot)
	if err1027 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1027)
	}
	return err
}

func (p *MutateRowTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRowTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsResult) TStructName() string {
	return "MutateRowTsResult"
}

func (p *MutateRowTsResult) ThriftName() string {
	return "mutateRowTs_result"
}

func (p *MutateRowTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *MutateRowTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - RowBatches: list of row batches
 *  - Attributes: Mutation attributes
 */
type MutateRowsArgs struct {
	TableName  Text             "tableName"  // 1
	RowBatches []*BatchMutation "rowBatches" // 2
	Attributes map[string]Text  "attributes" // 3
}

var tstructMutateRowsArgs = thrift.NewTStruct("mutateRows_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("rowBatches", thrift.LIST, 2),
	thrift.NewTField("attributes", thrift.MAP, 3),
})

func (*MutateRowsArgs) GetTStruct() thrift.TStruct { return tstructMutateRowsArgs }
func NewMutateRowsArgs() *MutateRowsArgs {
	output := &MutateRowsArgs{}
	{
	}
	return output
}

func (p *MutateRowsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutateRowsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutateRowsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.MAP {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1028, err1029 := iprot.ReadBinary()
	if err1029 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1029)
	}
	p.TableName = Text(v1028)
	return err
}

func (p *MutateRowsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1035, _size1032, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.RowBatches", "", err)
	}
	_ = _etype1035
	p.RowBatches = make([]*BatchMutation, _size1032, _size1032)
	for i := 0; i < _size1032; i++ {
		_elem1037 := NewBatchMutation()
		err1040 := _elem1037.Read(iprot)
		if err1040 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1037BatchMutation", err1040)
		}
		p.RowBatches[i] = _elem1037
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *MutateRowsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1044, _vtype1045, _size1043, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1044, _vtype1045
	p.Attributes = make(map[string]Text, _size1043)
	for i := 0; i < _size1043; i++ {
		v1050, err1051 := iprot.ReadString()
		if err1051 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1048", "", err1051)
		}
		_key1048 := v1050
		v1052, err1053 := iprot.ReadBinary()
		if err1053 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1049", "", err1053)
		}
		_val1049 := Text(v1052)
		p.Attributes[_key1048] = _val1049
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *MutateRowsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRows_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.RowBatches != nil {
		err = oprot.WriteFieldBegin("rowBatches", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rowBatches", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.RowBatches))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1054 := range p.RowBatches {
			err = Iter1054.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("BatchMutation", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rowBatches", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1055, Viter1056 := range p.Attributes {
			err = oprot.WriteString(Kiter1055)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1055", "", err)
			}
			err = oprot.WriteBinary(Viter1056)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1056", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsArgs) TStructName() string {
	return "MutateRowsArgs"
}

func (p *MutateRowsArgs) ThriftName() string {
	return "mutateRows_args"
}

func (p *MutateRowsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.RowBatches
	case 3:
		return p.Attributes
	}
	return nil
}

func (p *MutateRowsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("rowBatches", thrift.LIST, 2),
		thrift.NewTField("attributes", thrift.MAP, 3),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type MutateRowsResult struct {
	Io *IOError         "io" // 1
	Ia *IllegalArgument "ia" // 2
}

var tstructMutateRowsResult = thrift.NewTStruct("mutateRows_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
})

func (*MutateRowsResult) GetTStruct() thrift.TStruct { return tstructMutateRowsResult }
func NewMutateRowsResult() *MutateRowsResult {
	output := &MutateRowsResult{}
	{
	}
	return output
}

func (p *MutateRowsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutateRowsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutateRowsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1059 := p.Io.Read(iprot)
	if err1059 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1059)
	}
	return err
}

func (p *MutateRowsResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1062 := p.Ia.Read(iprot)
	if err1062 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1062)
	}
	return err
}

func (p *MutateRowsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRows_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsResult) TStructName() string {
	return "MutateRowsResult"
}

func (p *MutateRowsResult) ThriftName() string {
	return "mutateRows_result"
}

func (p *MutateRowsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *MutateRowsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - RowBatches: list of row batches
 *  - Timestamp: timestamp
 *  - Attributes: Mutation attributes
 */
type MutateRowsTsArgs struct {
	TableName  Text             "tableName"  // 1
	RowBatches []*BatchMutation "rowBatches" // 2
	Timestamp  int64            "timestamp"  // 3
	Attributes map[string]Text  "attributes" // 4
}

var tstructMutateRowsTsArgs = thrift.NewTStruct("mutateRowsTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("rowBatches", thrift.LIST, 2),
	thrift.NewTField("timestamp", thrift.I64, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*MutateRowsTsArgs) GetTStruct() thrift.TStruct { return tstructMutateRowsTsArgs }
func NewMutateRowsTsArgs() *MutateRowsTsArgs {
	output := &MutateRowsTsArgs{}
	{
	}
	return output
}

func (p *MutateRowsTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutateRowsTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutateRowsTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1063, err1064 := iprot.ReadBinary()
	if err1064 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1064)
	}
	p.TableName = Text(v1063)
	return err
}

func (p *MutateRowsTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1070, _size1067, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.RowBatches", "", err)
	}
	_ = _etype1070
	p.RowBatches = make([]*BatchMutation, _size1067, _size1067)
	for i := 0; i < _size1067; i++ {
		_elem1072 := NewBatchMutation()
		err1075 := _elem1072.Read(iprot)
		if err1075 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1072BatchMutation", err1075)
		}
		p.RowBatches[i] = _elem1072
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *MutateRowsTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1076, err1077 := iprot.ReadI64()
	if err1077 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err1077)
	}
	p.Timestamp = v1076
	return err
}

func (p *MutateRowsTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1081, _vtype1082, _size1080, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1081, _vtype1082
	p.Attributes = make(map[string]Text, _size1080)
	for i := 0; i < _size1080; i++ {
		v1087, err1088 := iprot.ReadString()
		if err1088 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1085", "", err1088)
		}
		_key1085 := v1087
		v1089, err1090 := iprot.ReadBinary()
		if err1090 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1086", "", err1090)
		}
		_val1086 := Text(v1089)
		p.Attributes[_key1085] = _val1086
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *MutateRowsTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRowsTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.RowBatches != nil {
		err = oprot.WriteFieldBegin("rowBatches", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rowBatches", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.RowBatches))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1091 := range p.RowBatches {
			err = Iter1091.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("BatchMutation", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rowBatches", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1092, Viter1093 := range p.Attributes {
			err = oprot.WriteString(Kiter1092)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1092", "", err)
			}
			err = oprot.WriteBinary(Viter1093)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1093", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsTsArgs) TStructName() string {
	return "MutateRowsTsArgs"
}

func (p *MutateRowsTsArgs) ThriftName() string {
	return "mutateRowsTs_args"
}

func (p *MutateRowsTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.RowBatches
	case 3:
		return p.Timestamp
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *MutateRowsTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("rowBatches", thrift.LIST, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type MutateRowsTsResult struct {
	Io *IOError         "io" // 1
	Ia *IllegalArgument "ia" // 2
}

var tstructMutateRowsTsResult = thrift.NewTStruct("mutateRowsTs_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
})

func (*MutateRowsTsResult) GetTStruct() thrift.TStruct { return tstructMutateRowsTsResult }
func NewMutateRowsTsResult() *MutateRowsTsResult {
	output := &MutateRowsTsResult{}
	{
	}
	return output
}

func (p *MutateRowsTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutateRowsTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutateRowsTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1096 := p.Io.Read(iprot)
	if err1096 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1096)
	}
	return err
}

func (p *MutateRowsTsResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1099 := p.Ia.Read(iprot)
	if err1099 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1099)
	}
	return err
}

func (p *MutateRowsTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRowsTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsTsResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsTsResult) TStructName() string {
	return "MutateRowsTsResult"
}

func (p *MutateRowsTsResult) ThriftName() string {
	return "mutateRowsTs_result"
}

func (p *MutateRowsTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *MutateRowsTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row to increment
 *  - Column: name of column
 *  - Value: amount to increment by
 */
type AtomicIncrementArgs struct {
	TableName Text  "tableName" // 1
	Row       Text  "row"       // 2
	Column    Text  "column"    // 3
	Value     int64 "value"     // 4
}

var tstructAtomicIncrementArgs = thrift.NewTStruct("atomicIncrement_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("column", thrift.STRING, 3),
	thrift.NewTField("value", thrift.I64, 4),
})

func (*AtomicIncrementArgs) GetTStruct() thrift.TStruct { return tstructAtomicIncrementArgs }
func NewAtomicIncrementArgs() *AtomicIncrementArgs {
	output := &AtomicIncrementArgs{}
	{
	}
	return output
}

func (p *AtomicIncrementArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructAtomicIncrementArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructAtomicIncrementArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1100, err1101 := iprot.ReadBinary()
	if err1101 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1101)
	}
	p.TableName = Text(v1100)
	return err
}

func (p *AtomicIncrementArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1102, err1103 := iprot.ReadBinary()
	if err1103 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1103)
	}
	p.Row = Text(v1102)
	return err
}

func (p *AtomicIncrementArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1104, err1105 := iprot.ReadBinary()
	if err1105 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err1105)
	}
	p.Column = Text(v1104)
	return err
}

func (p *AtomicIncrementArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1106, err1107 := iprot.ReadI64()
	if err1107 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "value", p.ThriftName(), err1107)
	}
	p.Value = v1106
	return err
}

func (p *AtomicIncrementArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("atomicIncrement_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicIncrementArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicIncrementArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicIncrementArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("value", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "value", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Value))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "value", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "value", p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementArgs) TStructName() string {
	return "AtomicIncrementArgs"
}

func (p *AtomicIncrementArgs) ThriftName() string {
	return "atomicIncrement_args"
}

func (p *AtomicIncrementArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Value
	}
	return nil
}

func (p *AtomicIncrementArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("column", thrift.STRING, 3),
		thrift.NewTField("value", thrift.I64, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 *  - Ia
 */
type AtomicIncrementResult struct {
	Success int64            "success" // 0
	Io      *IOError         "io"      // 1
	Ia      *IllegalArgument "ia"      // 2
}

var tstructAtomicIncrementResult = thrift.NewTStruct("atomicIncrement_result", []thrift.TField{
	thrift.NewTField("success", thrift.I64, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
})

func (*AtomicIncrementResult) GetTStruct() thrift.TStruct { return tstructAtomicIncrementResult }
func NewAtomicIncrementResult() *AtomicIncrementResult {
	output := &AtomicIncrementResult{}
	{
	}
	return output
}

func (p *AtomicIncrementResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructAtomicIncrementResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructAtomicIncrementResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1108, err1109 := iprot.ReadI64()
	if err1109 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1109)
	}
	p.Success = v1108
	return err
}

func (p *AtomicIncrementResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1112 := p.Io.Read(iprot)
	if err1112 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1112)
	}
	return err
}

func (p *AtomicIncrementResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1115 := p.Ia.Read(iprot)
	if err1115 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1115)
	}
	return err
}

func (p *AtomicIncrementResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("atomicIncrement_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I64, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicIncrementResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicIncrementResult) TStructName() string {
	return "AtomicIncrementResult"
}

func (p *AtomicIncrementResult) ThriftName() string {
	return "atomicIncrement_result"
}

func (p *AtomicIncrementResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *AtomicIncrementResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I64, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: Row to update
 *  - Column: name of column whose value is to be deleted
 *  - Attributes: Delete attributes
 */
type DeleteAllArgs struct {
	TableName  Text            "tableName"  // 1
	Row        Text            "row"        // 2
	Column     Text            "column"     // 3
	Attributes map[string]Text "attributes" // 4
}

var tstructDeleteAllArgs = thrift.NewTStruct("deleteAll_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("column", thrift.STRING, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*DeleteAllArgs) GetTStruct() thrift.TStruct { return tstructDeleteAllArgs }
func NewDeleteAllArgs() *DeleteAllArgs {
	output := &DeleteAllArgs{}
	{
	}
	return output
}

func (p *DeleteAllArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteAllArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteAllArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1116, err1117 := iprot.ReadBinary()
	if err1117 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1117)
	}
	p.TableName = Text(v1116)
	return err
}

func (p *DeleteAllArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1118, err1119 := iprot.ReadBinary()
	if err1119 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1119)
	}
	p.Row = Text(v1118)
	return err
}

func (p *DeleteAllArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1120, err1121 := iprot.ReadBinary()
	if err1121 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err1121)
	}
	p.Column = Text(v1120)
	return err
}

func (p *DeleteAllArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1125, _vtype1126, _size1124, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1125, _vtype1126
	p.Attributes = make(map[string]Text, _size1124)
	for i := 0; i < _size1124; i++ {
		v1131, err1132 := iprot.ReadString()
		if err1132 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1129", "", err1132)
		}
		_key1129 := v1131
		v1133, err1134 := iprot.ReadBinary()
		if err1134 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1130", "", err1134)
		}
		_val1130 := Text(v1133)
		p.Attributes[_key1129] = _val1130
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *DeleteAllArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAll_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1135, Viter1136 := range p.Attributes {
			err = oprot.WriteString(Kiter1135)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1135", "", err)
			}
			err = oprot.WriteBinary(Viter1136)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1136", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllArgs) TStructName() string {
	return "DeleteAllArgs"
}

func (p *DeleteAllArgs) ThriftName() string {
	return "deleteAll_args"
}

func (p *DeleteAllArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *DeleteAllArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("column", thrift.STRING, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DeleteAllResult struct {
	Io *IOError "io" // 1
}

var tstructDeleteAllResult = thrift.NewTStruct("deleteAll_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*DeleteAllResult) GetTStruct() thrift.TStruct { return tstructDeleteAllResult }
func NewDeleteAllResult() *DeleteAllResult {
	output := &DeleteAllResult{}
	{
	}
	return output
}

func (p *DeleteAllResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteAllResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteAllResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1139 := p.Io.Read(iprot)
	if err1139 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1139)
	}
	return err
}

func (p *DeleteAllResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAll_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllResult) TStructName() string {
	return "DeleteAllResult"
}

func (p *DeleteAllResult) ThriftName() string {
	return "deleteAll_result"
}

func (p *DeleteAllResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DeleteAllResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: Row to update
 *  - Column: name of column whose value is to be deleted
 *  - Timestamp: timestamp
 *  - Attributes: Delete attributes
 */
type DeleteAllTsArgs struct {
	TableName  Text            "tableName"  // 1
	Row        Text            "row"        // 2
	Column     Text            "column"     // 3
	Timestamp  int64           "timestamp"  // 4
	Attributes map[string]Text "attributes" // 5
}

var tstructDeleteAllTsArgs = thrift.NewTStruct("deleteAllTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("column", thrift.STRING, 3),
	thrift.NewTField("timestamp", thrift.I64, 4),
	thrift.NewTField("attributes", thrift.MAP, 5),
})

func (*DeleteAllTsArgs) GetTStruct() thrift.TStruct { return tstructDeleteAllTsArgs }
func NewDeleteAllTsArgs() *DeleteAllTsArgs {
	output := &DeleteAllTsArgs{}
	{
	}
	return output
}

func (p *DeleteAllTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteAllTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteAllTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1140, err1141 := iprot.ReadBinary()
	if err1141 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1141)
	}
	p.TableName = Text(v1140)
	return err
}

func (p *DeleteAllTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1142, err1143 := iprot.ReadBinary()
	if err1143 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1143)
	}
	p.Row = Text(v1142)
	return err
}

func (p *DeleteAllTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1144, err1145 := iprot.ReadBinary()
	if err1145 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err1145)
	}
	p.Column = Text(v1144)
	return err
}

func (p *DeleteAllTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1146, err1147 := iprot.ReadI64()
	if err1147 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err1147)
	}
	p.Timestamp = v1146
	return err
}

func (p *DeleteAllTsArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1151, _vtype1152, _size1150, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1151, _vtype1152
	p.Attributes = make(map[string]Text, _size1150)
	for i := 0; i < _size1150; i++ {
		v1157, err1158 := iprot.ReadString()
		if err1158 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1155", "", err1158)
		}
		_key1155 := v1157
		v1159, err1160 := iprot.ReadBinary()
		if err1160 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1156", "", err1160)
		}
		_val1156 := Text(v1159)
		p.Attributes[_key1155] = _val1156
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *DeleteAllTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllTsArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1161, Viter1162 := range p.Attributes {
			err = oprot.WriteString(Kiter1161)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1161", "", err)
			}
			err = oprot.WriteBinary(Viter1162)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1162", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllTsArgs) TStructName() string {
	return "DeleteAllTsArgs"
}

func (p *DeleteAllTsArgs) ThriftName() string {
	return "deleteAllTs_args"
}

func (p *DeleteAllTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Timestamp
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *DeleteAllTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("column", thrift.STRING, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DeleteAllTsResult struct {
	Io *IOError "io" // 1
}

var tstructDeleteAllTsResult = thrift.NewTStruct("deleteAllTs_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*DeleteAllTsResult) GetTStruct() thrift.TStruct { return tstructDeleteAllTsResult }
func NewDeleteAllTsResult() *DeleteAllTsResult {
	output := &DeleteAllTsResult{}
	{
	}
	return output
}

func (p *DeleteAllTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteAllTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteAllTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1165 := p.Io.Read(iprot)
	if err1165 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1165)
	}
	return err
}

func (p *DeleteAllTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllTsResult) TStructName() string {
	return "DeleteAllTsResult"
}

func (p *DeleteAllTsResult) ThriftName() string {
	return "deleteAllTs_result"
}

func (p *DeleteAllTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DeleteAllTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: key of the row to be completely deleted.
 *  - Attributes: Delete attributes
 */
type DeleteAllRowArgs struct {
	TableName  Text            "tableName"  // 1
	Row        Text            "row"        // 2
	Attributes map[string]Text "attributes" // 3
}

var tstructDeleteAllRowArgs = thrift.NewTStruct("deleteAllRow_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("attributes", thrift.MAP, 3),
})

func (*DeleteAllRowArgs) GetTStruct() thrift.TStruct { return tstructDeleteAllRowArgs }
func NewDeleteAllRowArgs() *DeleteAllRowArgs {
	output := &DeleteAllRowArgs{}
	{
	}
	return output
}

func (p *DeleteAllRowArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteAllRowArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteAllRowArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.MAP {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1166, err1167 := iprot.ReadBinary()
	if err1167 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1167)
	}
	p.TableName = Text(v1166)
	return err
}

func (p *DeleteAllRowArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1168, err1169 := iprot.ReadBinary()
	if err1169 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1169)
	}
	p.Row = Text(v1168)
	return err
}

func (p *DeleteAllRowArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1173, _vtype1174, _size1172, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1173, _vtype1174
	p.Attributes = make(map[string]Text, _size1172)
	for i := 0; i < _size1172; i++ {
		v1179, err1180 := iprot.ReadString()
		if err1180 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1177", "", err1180)
		}
		_key1177 := v1179
		v1181, err1182 := iprot.ReadBinary()
		if err1182 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1178", "", err1182)
		}
		_val1178 := Text(v1181)
		p.Attributes[_key1177] = _val1178
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *DeleteAllRowArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllRow_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1183, Viter1184 := range p.Attributes {
			err = oprot.WriteString(Kiter1183)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1183", "", err)
			}
			err = oprot.WriteBinary(Viter1184)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1184", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowArgs) TStructName() string {
	return "DeleteAllRowArgs"
}

func (p *DeleteAllRowArgs) ThriftName() string {
	return "deleteAllRow_args"
}

func (p *DeleteAllRowArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Attributes
	}
	return nil
}

func (p *DeleteAllRowArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("attributes", thrift.MAP, 3),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DeleteAllRowResult struct {
	Io *IOError "io" // 1
}

var tstructDeleteAllRowResult = thrift.NewTStruct("deleteAllRow_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*DeleteAllRowResult) GetTStruct() thrift.TStruct { return tstructDeleteAllRowResult }
func NewDeleteAllRowResult() *DeleteAllRowResult {
	output := &DeleteAllRowResult{}
	{
	}
	return output
}

func (p *DeleteAllRowResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteAllRowResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteAllRowResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1187 := p.Io.Read(iprot)
	if err1187 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1187)
	}
	return err
}

func (p *DeleteAllRowResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllRow_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowResult) TStructName() string {
	return "DeleteAllRowResult"
}

func (p *DeleteAllRowResult) ThriftName() string {
	return "deleteAllRow_result"
}

func (p *DeleteAllRowResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DeleteAllRowResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Increment: The single increment to apply
 */
type IncrementArgs struct {
	Increment *TIncrement "increment" // 1
}

var tstructIncrementArgs = thrift.NewTStruct("increment_args", []thrift.TField{
	thrift.NewTField("increment", thrift.STRUCT, 1),
})

func (*IncrementArgs) GetTStruct() thrift.TStruct { return tstructIncrementArgs }
func NewIncrementArgs() *IncrementArgs {
	output := &IncrementArgs{}
	{
	}
	return output
}

func (p *IncrementArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIncrementArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIncrementArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //TIncrement
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Increment = NewTIncrement()
	err1190 := p.Increment.Read(iprot)
	if err1190 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IncrementTIncrement", err1190)
	}
	return err
}

func (p *IncrementArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("increment_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Increment != nil {
		err = oprot.WriteFieldBegin("increment", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "increment", p.ThriftName(), err)
		}
		err = p.Increment.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TIncrement", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "increment", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IncrementArgs) TStructName() string {
	return "IncrementArgs"
}

func (p *IncrementArgs) ThriftName() string {
	return "increment_args"
}

func (p *IncrementArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Increment
	}
	return nil
}

func (p *IncrementArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("increment", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type IncrementResult struct {
	Io *IOError "io" // 1
}

var tstructIncrementResult = thrift.NewTStruct("increment_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*IncrementResult) GetTStruct() thrift.TStruct { return tstructIncrementResult }
func NewIncrementResult() *IncrementResult {
	output := &IncrementResult{}
	{
	}
	return output
}

func (p *IncrementResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIncrementResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIncrementResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1193 := p.Io.Read(iprot)
	if err1193 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1193)
	}
	return err
}

func (p *IncrementResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("increment_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IncrementResult) TStructName() string {
	return "IncrementResult"
}

func (p *IncrementResult) ThriftName() string {
	return "increment_result"
}

func (p *IncrementResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *IncrementResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Increments: The list of increments
 */
type IncrementRowsArgs struct {
	Increments []*TIncrement "increments" // 1
}

var tstructIncrementRowsArgs = thrift.NewTStruct("incrementRows_args", []thrift.TField{
	thrift.NewTField("increments", thrift.LIST, 1),
})

func (*IncrementRowsArgs) GetTStruct() thrift.TStruct { return tstructIncrementRowsArgs }
func NewIncrementRowsArgs() *IncrementRowsArgs {
	output := &IncrementRowsArgs{}
	{
	}
	return output
}

func (p *IncrementRowsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIncrementRowsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIncrementRowsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //
			if fieldTypeId == thrift.LIST {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementRowsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1199, _size1196, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Increments", "", err)
	}
	_ = _etype1199
	p.Increments = make([]*TIncrement, _size1196, _size1196)
	for i := 0; i < _size1196; i++ {
		_elem1201 := NewTIncrement()
		err1204 := _elem1201.Read(iprot)
		if err1204 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1201TIncrement", err1204)
		}
		p.Increments[i] = _elem1201
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *IncrementRowsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("incrementRows_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementRowsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Increments != nil {
		err = oprot.WriteFieldBegin("increments", thrift.LIST, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "increments", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Increments))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1205 := range p.Increments {
			err = Iter1205.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TIncrement", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "increments", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IncrementRowsArgs) TStructName() string {
	return "IncrementRowsArgs"
}

func (p *IncrementRowsArgs) ThriftName() string {
	return "incrementRows_args"
}

func (p *IncrementRowsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Increments
	}
	return nil
}

func (p *IncrementRowsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("increments", thrift.LIST, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type IncrementRowsResult struct {
	Io *IOError "io" // 1
}

var tstructIncrementRowsResult = thrift.NewTStruct("incrementRows_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*IncrementRowsResult) GetTStruct() thrift.TStruct { return tstructIncrementRowsResult }
func NewIncrementRowsResult() *IncrementRowsResult {
	output := &IncrementRowsResult{}
	{
	}
	return output
}

func (p *IncrementRowsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIncrementRowsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIncrementRowsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementRowsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1208 := p.Io.Read(iprot)
	if err1208 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1208)
	}
	return err
}

func (p *IncrementRowsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("incrementRows_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementRowsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IncrementRowsResult) TStructName() string {
	return "IncrementRowsResult"
}

func (p *IncrementRowsResult) ThriftName() string {
	return "incrementRows_result"
}

func (p *IncrementRowsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *IncrementRowsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: key of the row to be completely deleted.
 *  - Timestamp: timestamp
 *  - Attributes: Delete attributes
 */
type DeleteAllRowTsArgs struct {
	TableName  Text            "tableName"  // 1
	Row        Text            "row"        // 2
	Timestamp  int64           "timestamp"  // 3
	Attributes map[string]Text "attributes" // 4
}

var tstructDeleteAllRowTsArgs = thrift.NewTStruct("deleteAllRowTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("timestamp", thrift.I64, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*DeleteAllRowTsArgs) GetTStruct() thrift.TStruct { return tstructDeleteAllRowTsArgs }
func NewDeleteAllRowTsArgs() *DeleteAllRowTsArgs {
	output := &DeleteAllRowTsArgs{}
	{
	}
	return output
}

func (p *DeleteAllRowTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteAllRowTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteAllRowTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1209, err1210 := iprot.ReadBinary()
	if err1210 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1210)
	}
	p.TableName = Text(v1209)
	return err
}

func (p *DeleteAllRowTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1211, err1212 := iprot.ReadBinary()
	if err1212 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1212)
	}
	p.Row = Text(v1211)
	return err
}

func (p *DeleteAllRowTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1213, err1214 := iprot.ReadI64()
	if err1214 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err1214)
	}
	p.Timestamp = v1213
	return err
}

func (p *DeleteAllRowTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1218, _vtype1219, _size1217, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1218, _vtype1219
	p.Attributes = make(map[string]Text, _size1217)
	for i := 0; i < _size1217; i++ {
		v1224, err1225 := iprot.ReadString()
		if err1225 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1222", "", err1225)
		}
		_key1222 := v1224
		v1226, err1227 := iprot.ReadBinary()
		if err1227 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1223", "", err1227)
		}
		_val1223 := Text(v1226)
		p.Attributes[_key1222] = _val1223
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *DeleteAllRowTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllRowTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1228, Viter1229 := range p.Attributes {
			err = oprot.WriteString(Kiter1228)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1228", "", err)
			}
			err = oprot.WriteBinary(Viter1229)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1229", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowTsArgs) TStructName() string {
	return "DeleteAllRowTsArgs"
}

func (p *DeleteAllRowTsArgs) ThriftName() string {
	return "deleteAllRowTs_args"
}

func (p *DeleteAllRowTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Timestamp
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *DeleteAllRowTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DeleteAllRowTsResult struct {
	Io *IOError "io" // 1
}

var tstructDeleteAllRowTsResult = thrift.NewTStruct("deleteAllRowTs_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*DeleteAllRowTsResult) GetTStruct() thrift.TStruct { return tstructDeleteAllRowTsResult }
func NewDeleteAllRowTsResult() *DeleteAllRowTsResult {
	output := &DeleteAllRowTsResult{}
	{
	}
	return output
}

func (p *DeleteAllRowTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteAllRowTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteAllRowTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1232 := p.Io.Read(iprot)
	if err1232 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1232)
	}
	return err
}

func (p *DeleteAllRowTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllRowTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowTsResult) TStructName() string {
	return "DeleteAllRowTsResult"
}

func (p *DeleteAllRowTsResult) ThriftName() string {
	return "deleteAllRowTs_result"
}

func (p *DeleteAllRowTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DeleteAllRowTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Scan: Scan instance
 *  - Attributes: Scan attributes
 */
type ScannerOpenWithScanArgs struct {
	TableName  Text            "tableName"  // 1
	Scan       *TScan          "scan"       // 2
	Attributes map[string]Text "attributes" // 3
}

var tstructScannerOpenWithScanArgs = thrift.NewTStruct("scannerOpenWithScan_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("scan", thrift.STRUCT, 2),
	thrift.NewTField("attributes", thrift.MAP, 3),
})

func (*ScannerOpenWithScanArgs) GetTStruct() thrift.TStruct { return tstructScannerOpenWithScanArgs }
func NewScannerOpenWithScanArgs() *ScannerOpenWithScanArgs {
	output := &ScannerOpenWithScanArgs{}
	{
	}
	return output
}

func (p *ScannerOpenWithScanArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenWithScanArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenWithScanArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //TScan
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.MAP {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithScanArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1233, err1234 := iprot.ReadBinary()
	if err1234 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1234)
	}
	p.TableName = Text(v1233)
	return err
}

func (p *ScannerOpenWithScanArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Scan = NewTScan()
	err1237 := p.Scan.Read(iprot)
	if err1237 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ScanTScan", err1237)
	}
	return err
}

func (p *ScannerOpenWithScanArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1241, _vtype1242, _size1240, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1241, _vtype1242
	p.Attributes = make(map[string]Text, _size1240)
	for i := 0; i < _size1240; i++ {
		v1247, err1248 := iprot.ReadString()
		if err1248 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1245", "", err1248)
		}
		_key1245 := v1247
		v1249, err1250 := iprot.ReadBinary()
		if err1250 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1246", "", err1250)
		}
		_val1246 := Text(v1249)
		p.Attributes[_key1245] = _val1246
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenWithScanArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithScan_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithScanArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithScanArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Scan != nil {
		err = oprot.WriteFieldBegin("scan", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "scan", p.ThriftName(), err)
		}
		err = p.Scan.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TScan", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "scan", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithScanArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1251, Viter1252 := range p.Attributes {
			err = oprot.WriteString(Kiter1251)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1251", "", err)
			}
			err = oprot.WriteBinary(Viter1252)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1252", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithScanArgs) TStructName() string {
	return "ScannerOpenWithScanArgs"
}

func (p *ScannerOpenWithScanArgs) ThriftName() string {
	return "scannerOpenWithScan_args"
}

func (p *ScannerOpenWithScanArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Scan
	case 3:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenWithScanArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("scan", thrift.STRUCT, 2),
		thrift.NewTField("attributes", thrift.MAP, 3),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenWithScanResult struct {
	Success ScannerID "success" // 0
	Io      *IOError  "io"      // 1
}

var tstructScannerOpenWithScanResult = thrift.NewTStruct("scannerOpenWithScan_result", []thrift.TField{
	thrift.NewTField("success", thrift.I32, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*ScannerOpenWithScanResult) GetTStruct() thrift.TStruct { return tstructScannerOpenWithScanResult }
func NewScannerOpenWithScanResult() *ScannerOpenWithScanResult {
	output := &ScannerOpenWithScanResult{}
	{
	}
	return output
}

func (p *ScannerOpenWithScanResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenWithScanResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenWithScanResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithScanResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1253, err1254 := iprot.ReadI32()
	if err1254 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1254)
	}
	p.Success = ScannerID(v1253)
	return err
}

func (p *ScannerOpenWithScanResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1257 := p.Io.Read(iprot)
	if err1257 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1257)
	}
	return err
}

func (p *ScannerOpenWithScanResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithScan_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithScanResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithScanResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithScanResult) TStructName() string {
	return "ScannerOpenWithScanResult"
}

func (p *ScannerOpenWithScanResult) ThriftName() string {
	return "scannerOpenWithScan_result"
}

func (p *ScannerOpenWithScanResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenWithScanResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Attributes: Scan attributes
 */
type ScannerOpenArgs struct {
	TableName  Text            "tableName"  // 1
	StartRow   Text            "startRow"   // 2
	Columns    []Text          "columns"    // 3
	Attributes map[string]Text "attributes" // 4
}

var tstructScannerOpenArgs = thrift.NewTStruct("scannerOpen_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("startRow", thrift.STRING, 2),
	thrift.NewTField("columns", thrift.LIST, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*ScannerOpenArgs) GetTStruct() thrift.TStruct { return tstructScannerOpenArgs }
func NewScannerOpenArgs() *ScannerOpenArgs {
	output := &ScannerOpenArgs{}
	{
	}
	return output
}

func (p *ScannerOpenArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1258, err1259 := iprot.ReadBinary()
	if err1259 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1259)
	}
	p.TableName = Text(v1258)
	return err
}

func (p *ScannerOpenArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1260, err1261 := iprot.ReadBinary()
	if err1261 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "startRow", p.ThriftName(), err1261)
	}
	p.StartRow = Text(v1260)
	return err
}

func (p *ScannerOpenArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1267, _size1264, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype1267
	p.Columns = make([]Text, _size1264, _size1264)
	for i := 0; i < _size1264; i++ {
		v1270, err1271 := iprot.ReadBinary()
		if err1271 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1269", "", err1271)
		}
		_elem1269 := Text(v1270)
		p.Columns[i] = _elem1269
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerOpenArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1275, _vtype1276, _size1274, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1275, _vtype1276
	p.Attributes = make(map[string]Text, _size1274)
	for i := 0; i < _size1274; i++ {
		v1281, err1282 := iprot.ReadString()
		if err1282 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1279", "", err1282)
		}
		_key1279 := v1281
		v1283, err1284 := iprot.ReadBinary()
		if err1284 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1280", "", err1284)
		}
		_val1280 := Text(v1283)
		p.Attributes[_key1279] = _val1280
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpen_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartRow != nil {
		err = oprot.WriteFieldBegin("startRow", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1285 := range p.Columns {
			err = oprot.WriteBinary(Iter1285)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1285", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1286, Viter1287 := range p.Attributes {
			err = oprot.WriteString(Kiter1286)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1286", "", err)
			}
			err = oprot.WriteBinary(Viter1287)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1287", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenArgs) TStructName() string {
	return "ScannerOpenArgs"
}

func (p *ScannerOpenArgs) ThriftName() string {
	return "scannerOpen_args"
}

func (p *ScannerOpenArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.StartRow
	case 3:
		return p.Columns
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("startRow", thrift.STRING, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenResult struct {
	Success ScannerID "success" // 0
	Io      *IOError  "io"      // 1
}

var tstructScannerOpenResult = thrift.NewTStruct("scannerOpen_result", []thrift.TField{
	thrift.NewTField("success", thrift.I32, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*ScannerOpenResult) GetTStruct() thrift.TStruct { return tstructScannerOpenResult }
func NewScannerOpenResult() *ScannerOpenResult {
	output := &ScannerOpenResult{}
	{
	}
	return output
}

func (p *ScannerOpenResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1288, err1289 := iprot.ReadI32()
	if err1289 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1289)
	}
	p.Success = ScannerID(v1288)
	return err
}

func (p *ScannerOpenResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1292 := p.Io.Read(iprot)
	if err1292 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1292)
	}
	return err
}

func (p *ScannerOpenResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpen_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenResult) TStructName() string {
	return "ScannerOpenResult"
}

func (p *ScannerOpenResult) ThriftName() string {
	return "scannerOpen_result"
}

func (p *ScannerOpenResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - StopRow: row to stop scanning on. This row is *not* included in the
 * scanner's results
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Attributes: Scan attributes
 */
type ScannerOpenWithStopArgs struct {
	TableName  Text            "tableName"  // 1
	StartRow   Text            "startRow"   // 2
	StopRow    Text            "stopRow"    // 3
	Columns    []Text          "columns"    // 4
	Attributes map[string]Text "attributes" // 5
}

var tstructScannerOpenWithStopArgs = thrift.NewTStruct("scannerOpenWithStop_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("startRow", thrift.STRING, 2),
	thrift.NewTField("stopRow", thrift.STRING, 3),
	thrift.NewTField("columns", thrift.LIST, 4),
	thrift.NewTField("attributes", thrift.MAP, 5),
})

func (*ScannerOpenWithStopArgs) GetTStruct() thrift.TStruct { return tstructScannerOpenWithStopArgs }
func NewScannerOpenWithStopArgs() *ScannerOpenWithStopArgs {
	output := &ScannerOpenWithStopArgs{}
	{
	}
	return output
}

func (p *ScannerOpenWithStopArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenWithStopArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenWithStopArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.LIST {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1293, err1294 := iprot.ReadBinary()
	if err1294 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1294)
	}
	p.TableName = Text(v1293)
	return err
}

func (p *ScannerOpenWithStopArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1295, err1296 := iprot.ReadBinary()
	if err1296 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "startRow", p.ThriftName(), err1296)
	}
	p.StartRow = Text(v1295)
	return err
}

func (p *ScannerOpenWithStopArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1297, err1298 := iprot.ReadBinary()
	if err1298 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "stopRow", p.ThriftName(), err1298)
	}
	p.StopRow = Text(v1297)
	return err
}

func (p *ScannerOpenWithStopArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1304, _size1301, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype1304
	p.Columns = make([]Text, _size1301, _size1301)
	for i := 0; i < _size1301; i++ {
		v1307, err1308 := iprot.ReadBinary()
		if err1308 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1306", "", err1308)
		}
		_elem1306 := Text(v1307)
		p.Columns[i] = _elem1306
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerOpenWithStopArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1312, _vtype1313, _size1311, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1312, _vtype1313
	p.Attributes = make(map[string]Text, _size1311)
	for i := 0; i < _size1311; i++ {
		v1318, err1319 := iprot.ReadString()
		if err1319 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1316", "", err1319)
		}
		_key1316 := v1318
		v1320, err1321 := iprot.ReadBinary()
		if err1321 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1317", "", err1321)
		}
		_val1317 := Text(v1320)
		p.Attributes[_key1316] = _val1317
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenWithStopArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithStop_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartRow != nil {
		err = oprot.WriteFieldBegin("startRow", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StopRow != nil {
		err = oprot.WriteFieldBegin("stopRow", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StopRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1322 := range p.Columns {
			err = oprot.WriteBinary(Iter1322)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1322", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1323, Viter1324 := range p.Attributes {
			err = oprot.WriteString(Kiter1323)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1323", "", err)
			}
			err = oprot.WriteBinary(Viter1324)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1324", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopArgs) TStructName() string {
	return "ScannerOpenWithStopArgs"
}

func (p *ScannerOpenWithStopArgs) ThriftName() string {
	return "scannerOpenWithStop_args"
}

func (p *ScannerOpenWithStopArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.StartRow
	case 3:
		return p.StopRow
	case 4:
		return p.Columns
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenWithStopArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("startRow", thrift.STRING, 2),
		thrift.NewTField("stopRow", thrift.STRING, 3),
		thrift.NewTField("columns", thrift.LIST, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenWithStopResult struct {
	Success ScannerID "success" // 0
	Io      *IOError  "io"      // 1
}

var tstructScannerOpenWithStopResult = thrift.NewTStruct("scannerOpenWithStop_result", []thrift.TField{
	thrift.NewTField("success", thrift.I32, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*ScannerOpenWithStopResult) GetTStruct() thrift.TStruct { return tstructScannerOpenWithStopResult }
func NewScannerOpenWithStopResult() *ScannerOpenWithStopResult {
	output := &ScannerOpenWithStopResult{}
	{
	}
	return output
}

func (p *ScannerOpenWithStopResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenWithStopResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenWithStopResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1325, err1326 := iprot.ReadI32()
	if err1326 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1326)
	}
	p.Success = ScannerID(v1325)
	return err
}

func (p *ScannerOpenWithStopResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1329 := p.Io.Read(iprot)
	if err1329 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1329)
	}
	return err
}

func (p *ScannerOpenWithStopResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithStop_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopResult) TStructName() string {
	return "ScannerOpenWithStopResult"
}

func (p *ScannerOpenWithStopResult) ThriftName() string {
	return "scannerOpenWithStop_result"
}

func (p *ScannerOpenWithStopResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenWithStopResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartAndPrefix: the prefix (and thus start row) of the keys you want
 *  - Columns: the columns you want returned
 *  - Attributes: Scan attributes
 */
type ScannerOpenWithPrefixArgs struct {
	TableName      Text            "tableName"      // 1
	StartAndPrefix Text            "startAndPrefix" // 2
	Columns        []Text          "columns"        // 3
	Attributes     map[string]Text "attributes"     // 4
}

var tstructScannerOpenWithPrefixArgs = thrift.NewTStruct("scannerOpenWithPrefix_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("startAndPrefix", thrift.STRING, 2),
	thrift.NewTField("columns", thrift.LIST, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*ScannerOpenWithPrefixArgs) GetTStruct() thrift.TStruct { return tstructScannerOpenWithPrefixArgs }
func NewScannerOpenWithPrefixArgs() *ScannerOpenWithPrefixArgs {
	output := &ScannerOpenWithPrefixArgs{}
	{
	}
	return output
}

func (p *ScannerOpenWithPrefixArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenWithPrefixArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenWithPrefixArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1330, err1331 := iprot.ReadBinary()
	if err1331 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1331)
	}
	p.TableName = Text(v1330)
	return err
}

func (p *ScannerOpenWithPrefixArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1332, err1333 := iprot.ReadBinary()
	if err1333 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "startAndPrefix", p.ThriftName(), err1333)
	}
	p.StartAndPrefix = Text(v1332)
	return err
}

func (p *ScannerOpenWithPrefixArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1339, _size1336, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype1339
	p.Columns = make([]Text, _size1336, _size1336)
	for i := 0; i < _size1336; i++ {
		v1342, err1343 := iprot.ReadBinary()
		if err1343 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1341", "", err1343)
		}
		_elem1341 := Text(v1342)
		p.Columns[i] = _elem1341
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1347, _vtype1348, _size1346, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1347, _vtype1348
	p.Attributes = make(map[string]Text, _size1346)
	for i := 0; i < _size1346; i++ {
		v1353, err1354 := iprot.ReadString()
		if err1354 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1351", "", err1354)
		}
		_key1351 := v1353
		v1355, err1356 := iprot.ReadBinary()
		if err1356 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1352", "", err1356)
		}
		_val1352 := Text(v1355)
		p.Attributes[_key1351] = _val1352
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithPrefix_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartAndPrefix != nil {
		err = oprot.WriteFieldBegin("startAndPrefix", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startAndPrefix", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartAndPrefix)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startAndPrefix", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startAndPrefix", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1357 := range p.Columns {
			err = oprot.WriteBinary(Iter1357)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1357", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1358, Viter1359 := range p.Attributes {
			err = oprot.WriteString(Kiter1358)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1358", "", err)
			}
			err = oprot.WriteBinary(Viter1359)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1359", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) TStructName() string {
	return "ScannerOpenWithPrefixArgs"
}

func (p *ScannerOpenWithPrefixArgs) ThriftName() string {
	return "scannerOpenWithPrefix_args"
}

func (p *ScannerOpenWithPrefixArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.StartAndPrefix
	case 3:
		return p.Columns
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenWithPrefixArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("startAndPrefix", thrift.STRING, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenWithPrefixResult struct {
	Success ScannerID "success" // 0
	Io      *IOError  "io"      // 1
}

var tstructScannerOpenWithPrefixResult = thrift.NewTStruct("scannerOpenWithPrefix_result", []thrift.TField{
	thrift.NewTField("success", thrift.I32, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*ScannerOpenWithPrefixResult) GetTStruct() thrift.TStruct {
	return tstructScannerOpenWithPrefixResult
}
func NewScannerOpenWithPrefixResult() *ScannerOpenWithPrefixResult {
	output := &ScannerOpenWithPrefixResult{}
	{
	}
	return output
}

func (p *ScannerOpenWithPrefixResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenWithPrefixResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenWithPrefixResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithPrefixResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1360, err1361 := iprot.ReadI32()
	if err1361 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1361)
	}
	p.Success = ScannerID(v1360)
	return err
}

func (p *ScannerOpenWithPrefixResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1364 := p.Io.Read(iprot)
	if err1364 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1364)
	}
	return err
}

func (p *ScannerOpenWithPrefixResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithPrefix_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithPrefixResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithPrefixResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithPrefixResult) TStructName() string {
	return "ScannerOpenWithPrefixResult"
}

func (p *ScannerOpenWithPrefixResult) ThriftName() string {
	return "scannerOpenWithPrefix_result"
}

func (p *ScannerOpenWithPrefixResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenWithPrefixResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Timestamp: timestamp
 *  - Attributes: Scan attributes
 */
type ScannerOpenTsArgs struct {
	TableName  Text            "tableName"  // 1
	StartRow   Text            "startRow"   // 2
	Columns    []Text          "columns"    // 3
	Timestamp  int64           "timestamp"  // 4
	Attributes map[string]Text "attributes" // 5
}

var tstructScannerOpenTsArgs = thrift.NewTStruct("scannerOpenTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("startRow", thrift.STRING, 2),
	thrift.NewTField("columns", thrift.LIST, 3),
	thrift.NewTField("timestamp", thrift.I64, 4),
	thrift.NewTField("attributes", thrift.MAP, 5),
})

func (*ScannerOpenTsArgs) GetTStruct() thrift.TStruct { return tstructScannerOpenTsArgs }
func NewScannerOpenTsArgs() *ScannerOpenTsArgs {
	output := &ScannerOpenTsArgs{}
	{
	}
	return output
}

func (p *ScannerOpenTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1365, err1366 := iprot.ReadBinary()
	if err1366 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1366)
	}
	p.TableName = Text(v1365)
	return err
}

func (p *ScannerOpenTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1367, err1368 := iprot.ReadBinary()
	if err1368 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "startRow", p.ThriftName(), err1368)
	}
	p.StartRow = Text(v1367)
	return err
}

func (p *ScannerOpenTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1374, _size1371, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype1374
	p.Columns = make([]Text, _size1371, _size1371)
	for i := 0; i < _size1371; i++ {
		v1377, err1378 := iprot.ReadBinary()
		if err1378 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1376", "", err1378)
		}
		_elem1376 := Text(v1377)
		p.Columns[i] = _elem1376
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerOpenTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1379, err1380 := iprot.ReadI64()
	if err1380 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err1380)
	}
	p.Timestamp = v1379
	return err
}

func (p *ScannerOpenTsArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1384, _vtype1385, _size1383, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1384, _vtype1385
	p.Attributes = make(map[string]Text, _size1383)
	for i := 0; i < _size1383; i++ {
		v1390, err1391 := iprot.ReadString()
		if err1391 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1388", "", err1391)
		}
		_key1388 := v1390
		v1392, err1393 := iprot.ReadBinary()
		if err1393 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1389", "", err1393)
		}
		_val1389 := Text(v1392)
		p.Attributes[_key1388] = _val1389
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartRow != nil {
		err = oprot.WriteFieldBegin("startRow", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1394 := range p.Columns {
			err = oprot.WriteBinary(Iter1394)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1394", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1395, Viter1396 := range p.Attributes {
			err = oprot.WriteString(Kiter1395)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1395", "", err)
			}
			err = oprot.WriteBinary(Viter1396)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1396", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenTsArgs) TStructName() string {
	return "ScannerOpenTsArgs"
}

func (p *ScannerOpenTsArgs) ThriftName() string {
	return "scannerOpenTs_args"
}

func (p *ScannerOpenTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.StartRow
	case 3:
		return p.Columns
	case 4:
		return p.Timestamp
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("startRow", thrift.STRING, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenTsResult struct {
	Success ScannerID "success" // 0
	Io      *IOError  "io"      // 1
}

var tstructScannerOpenTsResult = thrift.NewTStruct("scannerOpenTs_result", []thrift.TField{
	thrift.NewTField("success", thrift.I32, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*ScannerOpenTsResult) GetTStruct() thrift.TStruct { return tstructScannerOpenTsResult }
func NewScannerOpenTsResult() *ScannerOpenTsResult {
	output := &ScannerOpenTsResult{}
	{
	}
	return output
}

func (p *ScannerOpenTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1397, err1398 := iprot.ReadI32()
	if err1398 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1398)
	}
	p.Success = ScannerID(v1397)
	return err
}

func (p *ScannerOpenTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1401 := p.Io.Read(iprot)
	if err1401 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1401)
	}
	return err
}

func (p *ScannerOpenTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenTsResult) TStructName() string {
	return "ScannerOpenTsResult"
}

func (p *ScannerOpenTsResult) ThriftName() string {
	return "scannerOpenTs_result"
}

func (p *ScannerOpenTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - StopRow: row to stop scanning on. This row is *not* included in the
 * scanner's results
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Timestamp: timestamp
 *  - Attributes: Scan attributes
 */
type ScannerOpenWithStopTsArgs struct {
	TableName  Text            "tableName"  // 1
	StartRow   Text            "startRow"   // 2
	StopRow    Text            "stopRow"    // 3
	Columns    []Text          "columns"    // 4
	Timestamp  int64           "timestamp"  // 5
	Attributes map[string]Text "attributes" // 6
}

var tstructScannerOpenWithStopTsArgs = thrift.NewTStruct("scannerOpenWithStopTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("startRow", thrift.STRING, 2),
	thrift.NewTField("stopRow", thrift.STRING, 3),
	thrift.NewTField("columns", thrift.LIST, 4),
	thrift.NewTField("timestamp", thrift.I64, 5),
	thrift.NewTField("attributes", thrift.MAP, 6),
})

func (*ScannerOpenWithStopTsArgs) GetTStruct() thrift.TStruct { return tstructScannerOpenWithStopTsArgs }
func NewScannerOpenWithStopTsArgs() *ScannerOpenWithStopTsArgs {
	output := &ScannerOpenWithStopTsArgs{}
	{
	}
	return output
}

func (p *ScannerOpenWithStopTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenWithStopTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenWithStopTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.LIST {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //
			if fieldTypeId == thrift.MAP {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1402, err1403 := iprot.ReadBinary()
	if err1403 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1403)
	}
	p.TableName = Text(v1402)
	return err
}

func (p *ScannerOpenWithStopTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1404, err1405 := iprot.ReadBinary()
	if err1405 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "startRow", p.ThriftName(), err1405)
	}
	p.StartRow = Text(v1404)
	return err
}

func (p *ScannerOpenWithStopTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1406, err1407 := iprot.ReadBinary()
	if err1407 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "stopRow", p.ThriftName(), err1407)
	}
	p.StopRow = Text(v1406)
	return err
}

func (p *ScannerOpenWithStopTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1413, _size1410, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype1413
	p.Columns = make([]Text, _size1410, _size1410)
	for i := 0; i < _size1410; i++ {
		v1416, err1417 := iprot.ReadBinary()
		if err1417 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1415", "", err1417)
		}
		_elem1415 := Text(v1416)
		p.Columns[i] = _elem1415
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1418, err1419 := iprot.ReadI64()
	if err1419 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "timestamp", p.ThriftName(), err1419)
	}
	p.Timestamp = v1418
	return err
}

func (p *ScannerOpenWithStopTsArgs) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1423, _vtype1424, _size1422, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1423, _vtype1424
	p.Attributes = make(map[string]Text, _size1422)
	for i := 0; i < _size1422; i++ {
		v1429, err1430 := iprot.ReadString()
		if err1430 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1427", "", err1430)
		}
		_key1427 := v1429
		v1431, err1432 := iprot.ReadBinary()
		if err1432 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1428", "", err1432)
		}
		_val1428 := Text(v1431)
		p.Attributes[_key1427] = _val1428
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithStopTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartRow != nil {
		err = oprot.WriteFieldBegin("startRow", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StopRow != nil {
		err = oprot.WriteFieldBegin("stopRow", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StopRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1433 := range p.Columns {
			err = oprot.WriteBinary(Iter1433)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1433", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1434, Viter1435 := range p.Attributes {
			err = oprot.WriteString(Kiter1434)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1434", "", err)
			}
			err = oprot.WriteBinary(Viter1435)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1435", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) TStructName() string {
	return "ScannerOpenWithStopTsArgs"
}

func (p *ScannerOpenWithStopTsArgs) ThriftName() string {
	return "scannerOpenWithStopTs_args"
}

func (p *ScannerOpenWithStopTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.StartRow
	case 3:
		return p.StopRow
	case 4:
		return p.Columns
	case 5:
		return p.Timestamp
	case 6:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenWithStopTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("startRow", thrift.STRING, 2),
		thrift.NewTField("stopRow", thrift.STRING, 3),
		thrift.NewTField("columns", thrift.LIST, 4),
		thrift.NewTField("timestamp", thrift.I64, 5),
		thrift.NewTField("attributes", thrift.MAP, 6),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenWithStopTsResult struct {
	Success ScannerID "success" // 0
	Io      *IOError  "io"      // 1
}

var tstructScannerOpenWithStopTsResult = thrift.NewTStruct("scannerOpenWithStopTs_result", []thrift.TField{
	thrift.NewTField("success", thrift.I32, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*ScannerOpenWithStopTsResult) GetTStruct() thrift.TStruct {
	return tstructScannerOpenWithStopTsResult
}
func NewScannerOpenWithStopTsResult() *ScannerOpenWithStopTsResult {
	output := &ScannerOpenWithStopTsResult{}
	{
	}
	return output
}

func (p *ScannerOpenWithStopTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenWithStopTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenWithStopTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1436, err1437 := iprot.ReadI32()
	if err1437 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1437)
	}
	p.Success = ScannerID(v1436)
	return err
}

func (p *ScannerOpenWithStopTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1440 := p.Io.Read(iprot)
	if err1440 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1440)
	}
	return err
}

func (p *ScannerOpenWithStopTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithStopTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsResult) TStructName() string {
	return "ScannerOpenWithStopTsResult"
}

func (p *ScannerOpenWithStopTsResult) ThriftName() string {
	return "scannerOpenWithStopTs_result"
}

func (p *ScannerOpenWithStopTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenWithStopTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Id: id of a scanner returned by scannerOpen
 */
type ScannerGetArgs struct {
	Id ScannerID "id" // 1
}

var tstructScannerGetArgs = thrift.NewTStruct("scannerGet_args", []thrift.TField{
	thrift.NewTField("id", thrift.I32, 1),
})

func (*ScannerGetArgs) GetTStruct() thrift.TStruct { return tstructScannerGetArgs }
func NewScannerGetArgs() *ScannerGetArgs {
	output := &ScannerGetArgs{}
	{
	}
	return output
}

func (p *ScannerGetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerGetArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerGetArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1441, err1442 := iprot.ReadI32()
	if err1442 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err1442)
	}
	p.Id = ScannerID(v1441)
	return err
}

func (p *ScannerGetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerGet_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("id", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Id))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetArgs) TStructName() string {
	return "ScannerGetArgs"
}

func (p *ScannerGetArgs) ThriftName() string {
	return "scannerGet_args"
}

func (p *ScannerGetArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Id
	}
	return nil
}

func (p *ScannerGetArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("id", thrift.I32, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 *  - Ia
 */
type ScannerGetResult struct {
	Success []*TRowResult    "success" // 0
	Io      *IOError         "io"      // 1
	Ia      *IllegalArgument "ia"      // 2
}

var tstructScannerGetResult = thrift.NewTStruct("scannerGet_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
})

func (*ScannerGetResult) GetTStruct() thrift.TStruct { return tstructScannerGetResult }
func NewScannerGetResult() *ScannerGetResult {
	output := &ScannerGetResult{}
	{
	}
	return output
}

func (p *ScannerGetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerGetResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerGetResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1448, _size1445, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype1448
	p.Success = make([]*TRowResult, _size1445, _size1445)
	for i := 0; i < _size1445; i++ {
		_elem1450 := NewTRowResult()
		err1453 := _elem1450.Read(iprot)
		if err1453 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1450TRowResult", err1453)
		}
		p.Success[i] = _elem1450
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerGetResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1456 := p.Io.Read(iprot)
	if err1456 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1456)
	}
	return err
}

func (p *ScannerGetResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1459 := p.Ia.Read(iprot)
	if err1459 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1459)
	}
	return err
}

func (p *ScannerGetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerGet_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1460 := range p.Success {
			err = Iter1460.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetResult) TStructName() string {
	return "ScannerGetResult"
}

func (p *ScannerGetResult) ThriftName() string {
	return "scannerGet_result"
}

func (p *ScannerGetResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *ScannerGetResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - Id: id of a scanner returned by scannerOpen
 *  - NbRows: number of results to return
 */
type ScannerGetListArgs struct {
	Id     ScannerID "id"     // 1
	NbRows int32     "nbRows" // 2
}

var tstructScannerGetListArgs = thrift.NewTStruct("scannerGetList_args", []thrift.TField{
	thrift.NewTField("id", thrift.I32, 1),
	thrift.NewTField("nbRows", thrift.I32, 2),
})

func (*ScannerGetListArgs) GetTStruct() thrift.TStruct { return tstructScannerGetListArgs }
func NewScannerGetListArgs() *ScannerGetListArgs {
	output := &ScannerGetListArgs{}
	{
	}
	return output
}

func (p *ScannerGetListArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerGetListArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerGetListArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1461, err1462 := iprot.ReadI32()
	if err1462 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err1462)
	}
	p.Id = ScannerID(v1461)
	return err
}

func (p *ScannerGetListArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1463, err1464 := iprot.ReadI32()
	if err1464 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "nbRows", p.ThriftName(), err1464)
	}
	p.NbRows = v1463
	return err
}

func (p *ScannerGetListArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerGetList_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("id", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Id))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("nbRows", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "nbRows", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.NbRows))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "nbRows", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "nbRows", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListArgs) TStructName() string {
	return "ScannerGetListArgs"
}

func (p *ScannerGetListArgs) ThriftName() string {
	return "scannerGetList_args"
}

func (p *ScannerGetListArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Id
	case 2:
		return p.NbRows
	}
	return nil
}

func (p *ScannerGetListArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("id", thrift.I32, 1),
		thrift.NewTField("nbRows", thrift.I32, 2),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 *  - Ia
 */
type ScannerGetListResult struct {
	Success []*TRowResult    "success" // 0
	Io      *IOError         "io"      // 1
	Ia      *IllegalArgument "ia"      // 2
}

var tstructScannerGetListResult = thrift.NewTStruct("scannerGetList_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
})

func (*ScannerGetListResult) GetTStruct() thrift.TStruct { return tstructScannerGetListResult }
func NewScannerGetListResult() *ScannerGetListResult {
	output := &ScannerGetListResult{}
	{
	}
	return output
}

func (p *ScannerGetListResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerGetListResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerGetListResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1470, _size1467, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype1470
	p.Success = make([]*TRowResult, _size1467, _size1467)
	for i := 0; i < _size1467; i++ {
		_elem1472 := NewTRowResult()
		err1475 := _elem1472.Read(iprot)
		if err1475 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1472TRowResult", err1475)
		}
		p.Success[i] = _elem1472
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerGetListResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1478 := p.Io.Read(iprot)
	if err1478 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1478)
	}
	return err
}

func (p *ScannerGetListResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1481 := p.Ia.Read(iprot)
	if err1481 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1481)
	}
	return err
}

func (p *ScannerGetListResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerGetList_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1482 := range p.Success {
			err = Iter1482.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetListResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetListResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetListResult) TStructName() string {
	return "ScannerGetListResult"
}

func (p *ScannerGetListResult) ThriftName() string {
	return "scannerGetList_result"
}

func (p *ScannerGetListResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *ScannerGetListResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - Id: id of a scanner returned by scannerOpen
 */
type ScannerCloseArgs struct {
	Id ScannerID "id" // 1
}

var tstructScannerCloseArgs = thrift.NewTStruct("scannerClose_args", []thrift.TField{
	thrift.NewTField("id", thrift.I32, 1),
})

func (*ScannerCloseArgs) GetTStruct() thrift.TStruct { return tstructScannerCloseArgs }
func NewScannerCloseArgs() *ScannerCloseArgs {
	output := &ScannerCloseArgs{}
	{
	}
	return output
}

func (p *ScannerCloseArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerCloseArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerCloseArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerCloseArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1483, err1484 := iprot.ReadI32()
	if err1484 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err1484)
	}
	p.Id = ScannerID(v1483)
	return err
}

func (p *ScannerCloseArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerClose_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerCloseArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("id", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Id))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerCloseArgs) TStructName() string {
	return "ScannerCloseArgs"
}

func (p *ScannerCloseArgs) ThriftName() string {
	return "scannerClose_args"
}

func (p *ScannerCloseArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Id
	}
	return nil
}

func (p *ScannerCloseArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("id", thrift.I32, 1),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type ScannerCloseResult struct {
	Io *IOError         "io" // 1
	Ia *IllegalArgument "ia" // 2
}

var tstructScannerCloseResult = thrift.NewTStruct("scannerClose_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
})

func (*ScannerCloseResult) GetTStruct() thrift.TStruct { return tstructScannerCloseResult }
func NewScannerCloseResult() *ScannerCloseResult {
	output := &ScannerCloseResult{}
	{
	}
	return output
}

func (p *ScannerCloseResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerCloseResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerCloseResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerCloseResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1487 := p.Io.Read(iprot)
	if err1487 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1487)
	}
	return err
}

func (p *ScannerCloseResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1490 := p.Ia.Read(iprot)
	if err1490 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1490)
	}
	return err
}

func (p *ScannerCloseResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerClose_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerCloseResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerCloseResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerCloseResult) TStructName() string {
	return "ScannerCloseResult"
}

func (p *ScannerCloseResult) ThriftName() string {
	return "scannerClose_result"
}

func (p *ScannerCloseResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *ScannerCloseResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Family: column name
 */
type GetRowOrBeforeArgs struct {
	TableName Text "tableName" // 1
	Row       Text "row"       // 2
	Family    Text "family"    // 3
}

var tstructGetRowOrBeforeArgs = thrift.NewTStruct("getRowOrBefore_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("family", thrift.STRING, 3),
})

func (*GetRowOrBeforeArgs) GetTStruct() thrift.TStruct { return tstructGetRowOrBeforeArgs }
func NewGetRowOrBeforeArgs() *GetRowOrBeforeArgs {
	output := &GetRowOrBeforeArgs{}
	{
	}
	return output
}

func (p *GetRowOrBeforeArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowOrBeforeArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowOrBeforeArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowOrBeforeArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1491, err1492 := iprot.ReadBinary()
	if err1492 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1492)
	}
	p.TableName = Text(v1491)
	return err
}

func (p *GetRowOrBeforeArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1493, err1494 := iprot.ReadBinary()
	if err1494 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1494)
	}
	p.Row = Text(v1493)
	return err
}

func (p *GetRowOrBeforeArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1495, err1496 := iprot.ReadBinary()
	if err1496 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "family", p.ThriftName(), err1496)
	}
	p.Family = Text(v1495)
	return err
}

func (p *GetRowOrBeforeArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowOrBefore_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowOrBeforeArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowOrBeforeArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowOrBeforeArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Family != nil {
		err = oprot.WriteFieldBegin("family", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "family", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Family)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "family", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "family", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowOrBeforeArgs) TStructName() string {
	return "GetRowOrBeforeArgs"
}

func (p *GetRowOrBeforeArgs) ThriftName() string {
	return "getRowOrBefore_args"
}

func (p *GetRowOrBeforeArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Family
	}
	return nil
}

func (p *GetRowOrBeforeArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("family", thrift.STRING, 3),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowOrBeforeResult struct {
	Success []*TCell "success" // 0
	Io      *IOError "io"      // 1
}

var tstructGetRowOrBeforeResult = thrift.NewTStruct("getRowOrBefore_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowOrBeforeResult) GetTStruct() thrift.TStruct { return tstructGetRowOrBeforeResult }
func NewGetRowOrBeforeResult() *GetRowOrBeforeResult {
	output := &GetRowOrBeforeResult{}
	{
	}
	return output
}

func (p *GetRowOrBeforeResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowOrBeforeResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowOrBeforeResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowOrBeforeResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1502, _size1499, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype1502
	p.Success = make([]*TCell, _size1499, _size1499)
	for i := 0; i < _size1499; i++ {
		_elem1504 := NewTCell()
		err1507 := _elem1504.Read(iprot)
		if err1507 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1504TCell", err1507)
		}
		p.Success[i] = _elem1504
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowOrBeforeResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1510 := p.Io.Read(iprot)
	if err1510 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1510)
	}
	return err
}

func (p *GetRowOrBeforeResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowOrBefore_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowOrBeforeResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1511 := range p.Success {
			err = Iter1511.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TCell", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowOrBeforeResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowOrBeforeResult) TStructName() string {
	return "GetRowOrBeforeResult"
}

func (p *GetRowOrBeforeResult) ThriftName() string {
	return "getRowOrBefore_result"
}

func (p *GetRowOrBeforeResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowOrBeforeResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Row: row key
 */
type GetRegionInfoArgs struct {
	Row Text "row" // 1
}

var tstructGetRegionInfoArgs = thrift.NewTStruct("getRegionInfo_args", []thrift.TField{
	thrift.NewTField("row", thrift.STRING, 1),
})

func (*GetRegionInfoArgs) GetTStruct() thrift.TStruct { return tstructGetRegionInfoArgs }
func NewGetRegionInfoArgs() *GetRegionInfoArgs {
	output := &GetRegionInfoArgs{}
	{
	}
	return output
}

func (p *GetRegionInfoArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRegionInfoArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRegionInfoArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRegionInfoArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1512, err1513 := iprot.ReadBinary()
	if err1513 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "row", p.ThriftName(), err1513)
	}
	p.Row = Text(v1512)
	return err
}

func (p *GetRegionInfoArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRegionInfo_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRegionInfoArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRegionInfoArgs) TStructName() string {
	return "GetRegionInfoArgs"
}

func (p *GetRegionInfoArgs) ThriftName() string {
	return "getRegionInfo_args"
}

func (p *GetRegionInfoArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Row
	}
	return nil
}

func (p *GetRegionInfoArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("row", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRegionInfoResult struct {
	Success *TRegionInfo "success" // 0
	Io      *IOError     "io"      // 1
}

var tstructGetRegionInfoResult = thrift.NewTStruct("getRegionInfo_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRUCT, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRegionInfoResult) GetTStruct() thrift.TStruct { return tstructGetRegionInfoResult }
func NewGetRegionInfoResult() *GetRegionInfoResult {
	output := &GetRegionInfoResult{}
	{
	}
	return output
}

func (p *GetRegionInfoResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRegionInfoResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRegionInfoResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //TRegionInfo
			if fieldTypeId == thrift.STRUCT {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRegionInfoResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Success = NewTRegionInfo()
	err1516 := p.Success.Read(iprot)
	if err1516 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SuccessTRegionInfo", err1516)
	}
	return err
}

func (p *GetRegionInfoResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1519 := p.Io.Read(iprot)
	if err1519 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1519)
	}
	return err
}

func (p *GetRegionInfoResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRegionInfo_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRegionInfoResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = p.Success.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TRegionInfo", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRegionInfoResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRegionInfoResult) TStructName() string {
	return "GetRegionInfoResult"
}

func (p *GetRegionInfoResult) ThriftName() string {
	return "getRegionInfo_result"
}

func (p *GetRegionInfoResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRegionInfoResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRUCT, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}
